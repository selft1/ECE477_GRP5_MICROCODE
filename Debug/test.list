
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d28  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  08004de8  08004de8  00014de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005144  08005144  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005144  08005144  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005144  08005144  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005144  08005144  00015144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005148  08005148  00015148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800514c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  20000074  080051c0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  080051c0  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112b1  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002681  00000000  00000000  0003134d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000948  00000000  00000000  000339d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000830  00000000  00000000  00034318  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010607  00000000  00000000  00034b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aed4  00000000  00000000  0004514f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005283c  00000000  00000000  00050023  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a285f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002238  00000000  00000000  000a28dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004dd0 	.word	0x08004dd0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08004dd0 	.word	0x08004dd0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000234:	4b07      	ldr	r3, [pc, #28]	; (8000254 <HAL_Init+0x24>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <HAL_Init+0x24>)
 800023a:	2110      	movs	r1, #16
 800023c:	430a      	orrs	r2, r1
 800023e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000240:	2000      	movs	r0, #0
 8000242:	f000 f809 	bl	8000258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000246:	f003 ff63 	bl	8004110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800024a:	2300      	movs	r3, #0
}
 800024c:	0018      	movs	r0, r3
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	40022000 	.word	0x40022000

08000258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000260:	f001 fb64 	bl	800192c <HAL_RCC_GetHCLKFreq>
 8000264:	0002      	movs	r2, r0
 8000266:	23fa      	movs	r3, #250	; 0xfa
 8000268:	0099      	lsls	r1, r3, #2
 800026a:	0010      	movs	r0, r2
 800026c:	f7ff ff54 	bl	8000118 <__udivsi3>
 8000270:	0003      	movs	r3, r0
 8000272:	0018      	movs	r0, r3
 8000274:	f000 fd19 	bl	8000caa <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000278:	6879      	ldr	r1, [r7, #4]
 800027a:	2301      	movs	r3, #1
 800027c:	425b      	negs	r3, r3
 800027e:	2200      	movs	r2, #0
 8000280:	0018      	movs	r0, r3
 8000282:	f000 fced 	bl	8000c60 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000286:	2300      	movs	r3, #0
}
 8000288:	0018      	movs	r0, r3
 800028a:	46bd      	mov	sp, r7
 800028c:	b002      	add	sp, #8
 800028e:	bd80      	pop	{r7, pc}

08000290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  uwTick++;
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <HAL_IncTick+0x14>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	1c5a      	adds	r2, r3, #1
 800029a:	4b02      	ldr	r3, [pc, #8]	; (80002a4 <HAL_IncTick+0x14>)
 800029c:	601a      	str	r2, [r3, #0]
}
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	200000e8 	.word	0x200000e8

080002a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  return uwTick;
 80002ac:	4b02      	ldr	r3, [pc, #8]	; (80002b8 <HAL_GetTick+0x10>)
 80002ae:	681b      	ldr	r3, [r3, #0]
}
 80002b0:	0018      	movs	r0, r3
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	46c0      	nop			; (mov r8, r8)
 80002b8:	200000e8 	.word	0x200000e8

080002bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002c4:	f7ff fff0 	bl	80002a8 <HAL_GetTick>
 80002c8:	0003      	movs	r3, r0
 80002ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	3301      	adds	r3, #1
 80002d4:	d002      	beq.n	80002dc <HAL_Delay+0x20>
  {
     wait++;
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	3301      	adds	r3, #1
 80002da:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002dc:	46c0      	nop			; (mov r8, r8)
 80002de:	f7ff ffe3 	bl	80002a8 <HAL_GetTick>
 80002e2:	0002      	movs	r2, r0
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	1ad3      	subs	r3, r2, r3
 80002e8:	68fa      	ldr	r2, [r7, #12]
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d8f7      	bhi.n	80002de <HAL_Delay+0x22>
  {
  }
}
 80002ee:	46c0      	nop			; (mov r8, r8)
 80002f0:	46bd      	mov	sp, r7
 80002f2:	b004      	add	sp, #16
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000300:	230f      	movs	r3, #15
 8000302:	18fb      	adds	r3, r7, r3
 8000304:	2200      	movs	r2, #0
 8000306:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000308:	2300      	movs	r3, #0
 800030a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d101      	bne.n	8000316 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000312:	2301      	movs	r3, #1
 8000314:	e124      	b.n	8000560 <HAL_ADC_Init+0x268>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800031a:	2b00      	cmp	r3, #0
 800031c:	d10a      	bne.n	8000334 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2200      	movs	r2, #0
 8000322:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2240      	movs	r2, #64	; 0x40
 8000328:	2100      	movs	r1, #0
 800032a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	0018      	movs	r0, r3
 8000330:	f002 fafe 	bl	8002930 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000338:	2210      	movs	r2, #16
 800033a:	4013      	ands	r3, r2
 800033c:	d000      	beq.n	8000340 <HAL_ADC_Init+0x48>
 800033e:	e102      	b.n	8000546 <HAL_ADC_Init+0x24e>
 8000340:	230f      	movs	r3, #15
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d000      	beq.n	800034c <HAL_ADC_Init+0x54>
 800034a:	e0fc      	b.n	8000546 <HAL_ADC_Init+0x24e>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	2204      	movs	r2, #4
 8000354:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000356:	d000      	beq.n	800035a <HAL_ADC_Init+0x62>
 8000358:	e0f5      	b.n	8000546 <HAL_ADC_Init+0x24e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800035e:	4a82      	ldr	r2, [pc, #520]	; (8000568 <HAL_ADC_Init+0x270>)
 8000360:	4013      	ands	r3, r2
 8000362:	2202      	movs	r2, #2
 8000364:	431a      	orrs	r2, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	645a      	str	r2, [r3, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	2203      	movs	r2, #3
 8000372:	4013      	ands	r3, r2
 8000374:	2b01      	cmp	r3, #1
 8000376:	d112      	bne.n	800039e <HAL_ADC_Init+0xa6>
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2201      	movs	r2, #1
 8000380:	4013      	ands	r3, r2
 8000382:	2b01      	cmp	r3, #1
 8000384:	d009      	beq.n	800039a <HAL_ADC_Init+0xa2>
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	68da      	ldr	r2, [r3, #12]
 800038c:	2380      	movs	r3, #128	; 0x80
 800038e:	021b      	lsls	r3, r3, #8
 8000390:	401a      	ands	r2, r3
 8000392:	2380      	movs	r3, #128	; 0x80
 8000394:	021b      	lsls	r3, r3, #8
 8000396:	429a      	cmp	r2, r3
 8000398:	d101      	bne.n	800039e <HAL_ADC_Init+0xa6>
 800039a:	2301      	movs	r3, #1
 800039c:	e000      	b.n	80003a0 <HAL_ADC_Init+0xa8>
 800039e:	2300      	movs	r3, #0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d116      	bne.n	80003d2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	68db      	ldr	r3, [r3, #12]
 80003aa:	2218      	movs	r2, #24
 80003ac:	4393      	bics	r3, r2
 80003ae:	0019      	movs	r1, r3
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	689a      	ldr	r2, [r3, #8]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	430a      	orrs	r2, r1
 80003ba:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	691b      	ldr	r3, [r3, #16]
 80003c2:	009b      	lsls	r3, r3, #2
 80003c4:	0899      	lsrs	r1, r3, #2
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	685a      	ldr	r2, [r3, #4]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	430a      	orrs	r2, r1
 80003d0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	68da      	ldr	r2, [r3, #12]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4963      	ldr	r1, [pc, #396]	; (800056c <HAL_ADC_Init+0x274>)
 80003de:	400a      	ands	r2, r1
 80003e0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	69db      	ldr	r3, [r3, #28]
 80003ec:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003ee:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	6a1b      	ldr	r3, [r3, #32]
 80003f4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80003f6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d002      	beq.n	8000406 <HAL_ADC_Init+0x10e>
 8000400:	2380      	movs	r3, #128	; 0x80
 8000402:	015b      	lsls	r3, r3, #5
 8000404:	e000      	b.n	8000408 <HAL_ADC_Init+0x110>
 8000406:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000408:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                   |
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 800040e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	691b      	ldr	r3, [r3, #16]
 8000414:	2b02      	cmp	r3, #2
 8000416:	d101      	bne.n	800041c <HAL_ADC_Init+0x124>
 8000418:	2304      	movs	r3, #4
 800041a:	e000      	b.n	800041e <HAL_ADC_Init+0x126>
 800041c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                   |
 800041e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000424:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000426:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000428:	68ba      	ldr	r2, [r7, #8]
 800042a:	4313      	orrs	r3, r2
 800042c:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000432:	2b01      	cmp	r3, #1
 8000434:	d115      	bne.n	8000462 <HAL_ADC_Init+0x16a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	6a1b      	ldr	r3, [r3, #32]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d105      	bne.n	800044a <HAL_ADC_Init+0x152>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	2280      	movs	r2, #128	; 0x80
 8000442:	0252      	lsls	r2, r2, #9
 8000444:	4313      	orrs	r3, r2
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	e00b      	b.n	8000462 <HAL_ADC_Init+0x16a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800044e:	2220      	movs	r2, #32
 8000450:	431a      	orrs	r2, r3
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800045a:	2201      	movs	r2, #1
 800045c:	431a      	orrs	r2, r3
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000466:	23c2      	movs	r3, #194	; 0xc2
 8000468:	33ff      	adds	r3, #255	; 0xff
 800046a:	429a      	cmp	r2, r3
 800046c:	d007      	beq.n	800047e <HAL_ADC_Init+0x186>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                    hadc->Init.ExternalTrigConvEdge );
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000476:	4313      	orrs	r3, r2
 8000478:	68ba      	ldr	r2, [r7, #8]
 800047a:	4313      	orrs	r3, r2
 800047c:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	68d9      	ldr	r1, [r3, #12]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	68ba      	ldr	r2, [r7, #8]
 800048a:	430a      	orrs	r2, r1
 800048c:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000492:	2380      	movs	r3, #128	; 0x80
 8000494:	055b      	lsls	r3, r3, #21
 8000496:	429a      	cmp	r2, r3
 8000498:	d01b      	beq.n	80004d2 <HAL_ADC_Init+0x1da>
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d017      	beq.n	80004d2 <HAL_ADC_Init+0x1da>
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004a6:	2b02      	cmp	r3, #2
 80004a8:	d013      	beq.n	80004d2 <HAL_ADC_Init+0x1da>
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004ae:	2b03      	cmp	r3, #3
 80004b0:	d00f      	beq.n	80004d2 <HAL_ADC_Init+0x1da>
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004b6:	2b04      	cmp	r3, #4
 80004b8:	d00b      	beq.n	80004d2 <HAL_ADC_Init+0x1da>
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004be:	2b05      	cmp	r3, #5
 80004c0:	d007      	beq.n	80004d2 <HAL_ADC_Init+0x1da>
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004c6:	2b06      	cmp	r3, #6
 80004c8:	d003      	beq.n	80004d2 <HAL_ADC_Init+0x1da>
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004ce:	2b07      	cmp	r3, #7
 80004d0:	d112      	bne.n	80004f8 <HAL_ADC_Init+0x200>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	695a      	ldr	r2, [r3, #20]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2107      	movs	r1, #7
 80004de:	438a      	bics	r2, r1
 80004e0:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	6959      	ldr	r1, [r3, #20]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004ec:	2207      	movs	r2, #7
 80004ee:	401a      	ands	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	430a      	orrs	r2, r1
 80004f6:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	68db      	ldr	r3, [r3, #12]
 80004fe:	4a1c      	ldr	r2, [pc, #112]	; (8000570 <HAL_ADC_Init+0x278>)
 8000500:	4013      	ands	r3, r2
 8000502:	68ba      	ldr	r2, [r7, #8]
 8000504:	429a      	cmp	r2, r3
 8000506:	d10b      	bne.n	8000520 <HAL_ADC_Init+0x228>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2200      	movs	r2, #0
 800050c:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000512:	2203      	movs	r2, #3
 8000514:	4393      	bics	r3, r2
 8000516:	2201      	movs	r2, #1
 8000518:	431a      	orrs	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	645a      	str	r2, [r3, #68]	; 0x44
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800051e:	e01c      	b.n	800055a <HAL_ADC_Init+0x262>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000524:	2212      	movs	r2, #18
 8000526:	4393      	bics	r3, r2
 8000528:	2210      	movs	r2, #16
 800052a:	431a      	orrs	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000534:	2201      	movs	r2, #1
 8000536:	431a      	orrs	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 800053c:	230f      	movs	r3, #15
 800053e:	18fb      	adds	r3, r7, r3
 8000540:	2201      	movs	r2, #1
 8000542:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000544:	e009      	b.n	800055a <HAL_ADC_Init+0x262>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800054a:	2210      	movs	r2, #16
 800054c:	431a      	orrs	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	645a      	str	r2, [r3, #68]	; 0x44
        
    tmp_hal_status = HAL_ERROR;
 8000552:	230f      	movs	r3, #15
 8000554:	18fb      	adds	r3, r7, r3
 8000556:	2201      	movs	r2, #1
 8000558:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800055a:	230f      	movs	r3, #15
 800055c:	18fb      	adds	r3, r7, r3
 800055e:	781b      	ldrb	r3, [r3, #0]
}
 8000560:	0018      	movs	r0, r3
 8000562:	46bd      	mov	sp, r7
 8000564:	b004      	add	sp, #16
 8000566:	bd80      	pop	{r7, pc}
 8000568:	fffffefd 	.word	0xfffffefd
 800056c:	fffe0219 	.word	0xfffe0219
 8000570:	833fffe7 	.word	0x833fffe7

08000574 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800057c:	230f      	movs	r3, #15
 800057e:	18fb      	adds	r3, r7, r3
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	689b      	ldr	r3, [r3, #8]
 800058a:	2204      	movs	r2, #4
 800058c:	4013      	ands	r3, r2
 800058e:	d156      	bne.n	800063e <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2240      	movs	r2, #64	; 0x40
 8000594:	5c9b      	ldrb	r3, [r3, r2]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d101      	bne.n	800059e <HAL_ADC_Start_IT+0x2a>
 800059a:	2302      	movs	r3, #2
 800059c:	e056      	b.n	800064c <HAL_ADC_Start_IT+0xd8>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2240      	movs	r2, #64	; 0x40
 80005a2:	2101      	movs	r1, #1
 80005a4:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d007      	beq.n	80005be <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80005ae:	230f      	movs	r3, #15
 80005b0:	18fc      	adds	r4, r7, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	0018      	movs	r0, r3
 80005b6:	f000 fa2f 	bl	8000a18 <ADC_Enable>
 80005ba:	0003      	movs	r3, r0
 80005bc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80005be:	230f      	movs	r3, #15
 80005c0:	18fb      	adds	r3, r7, r3
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d13e      	bne.n	8000646 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005cc:	4a21      	ldr	r2, [pc, #132]	; (8000654 <HAL_ADC_Start_IT+0xe0>)
 80005ce:	4013      	ands	r3, r2
 80005d0:	2280      	movs	r2, #128	; 0x80
 80005d2:	0052      	lsls	r2, r2, #1
 80005d4:	431a      	orrs	r2, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2200      	movs	r2, #0
 80005de:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2240      	movs	r2, #64	; 0x40
 80005e4:	2100      	movs	r1, #0
 80005e6:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	221c      	movs	r2, #28
 80005ee:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	2b08      	cmp	r3, #8
 80005f6:	d110      	bne.n	800061a <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	685a      	ldr	r2, [r3, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2104      	movs	r1, #4
 8000604:	438a      	bics	r2, r1
 8000606:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	685a      	ldr	r2, [r3, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2118      	movs	r1, #24
 8000614:	430a      	orrs	r2, r1
 8000616:	605a      	str	r2, [r3, #4]
          break;
 8000618:	e008      	b.n	800062c <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	685a      	ldr	r2, [r3, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	211c      	movs	r1, #28
 8000626:	430a      	orrs	r2, r1
 8000628:	605a      	str	r2, [r3, #4]
          break;
 800062a:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	689a      	ldr	r2, [r3, #8]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2104      	movs	r1, #4
 8000638:	430a      	orrs	r2, r1
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	e003      	b.n	8000646 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800063e:	230f      	movs	r3, #15
 8000640:	18fb      	adds	r3, r7, r3
 8000642:	2202      	movs	r2, #2
 8000644:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 8000646:	230f      	movs	r3, #15
 8000648:	18fb      	adds	r3, r7, r3
 800064a:	781b      	ldrb	r3, [r3, #0]
}
 800064c:	0018      	movs	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	b005      	add	sp, #20
 8000652:	bd90      	pop	{r4, r7, pc}
 8000654:	fffff0fe 	.word	0xfffff0fe

08000658 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000666:	0018      	movs	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	b002      	add	sp, #8
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2204      	movs	r2, #4
 8000680:	4013      	ands	r3, r2
 8000682:	2b04      	cmp	r3, #4
 8000684:	d106      	bne.n	8000694 <HAL_ADC_IRQHandler+0x24>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	2204      	movs	r2, #4
 800068e:	4013      	ands	r3, r2
 8000690:	2b04      	cmp	r3, #4
 8000692:	d00d      	beq.n	80006b0 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2208      	movs	r2, #8
 800069c:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800069e:	2b08      	cmp	r3, #8
 80006a0:	d14f      	bne.n	8000742 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	2208      	movs	r2, #8
 80006aa:	4013      	ands	r3, r2
 80006ac:	2b08      	cmp	r3, #8
 80006ae:	d148      	bne.n	8000742 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b4:	2210      	movs	r2, #16
 80006b6:	4013      	ands	r3, r2
 80006b8:	d106      	bne.n	80006c8 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	0092      	lsls	r2, r2, #2
 80006c2:	431a      	orrs	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	68da      	ldr	r2, [r3, #12]
 80006ce:	23c0      	movs	r3, #192	; 0xc0
 80006d0:	011b      	lsls	r3, r3, #4
 80006d2:	4013      	ands	r3, r2
 80006d4:	d12d      	bne.n	8000732 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6a1b      	ldr	r3, [r3, #32]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d129      	bne.n	8000732 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2208      	movs	r2, #8
 80006e6:	4013      	ands	r3, r2
 80006e8:	2b08      	cmp	r3, #8
 80006ea:	d122      	bne.n	8000732 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	2204      	movs	r2, #4
 80006f4:	4013      	ands	r3, r2
 80006f6:	d110      	bne.n	800071a <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	685a      	ldr	r2, [r3, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	210c      	movs	r1, #12
 8000704:	438a      	bics	r2, r1
 8000706:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070c:	4a32      	ldr	r2, [pc, #200]	; (80007d8 <HAL_ADC_IRQHandler+0x168>)
 800070e:	4013      	ands	r3, r2
 8000710:	2201      	movs	r2, #1
 8000712:	431a      	orrs	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	645a      	str	r2, [r3, #68]	; 0x44
 8000718:	e00b      	b.n	8000732 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071e:	2220      	movs	r2, #32
 8000720:	431a      	orrs	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800072a:	2201      	movs	r2, #1
 800072c:	431a      	orrs	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Conversion complete callback */
    /* Note: into callback, to determine if conversion has been triggered     */
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
      HAL_ADC_ConvCpltCallback(hadc);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	0018      	movs	r0, r3
 8000736:	f003 fa8d 	bl	8003c54 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	220c      	movs	r2, #12
 8000740:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	4013      	ands	r3, r2
 800074c:	2b80      	cmp	r3, #128	; 0x80
 800074e:	d115      	bne.n	800077c <HAL_ADC_IRQHandler+0x10c>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	4013      	ands	r3, r2
 800075a:	2b80      	cmp	r3, #128	; 0x80
 800075c:	d10e      	bne.n	800077c <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	2280      	movs	r2, #128	; 0x80
 8000764:	0252      	lsls	r2, r2, #9
 8000766:	431a      	orrs	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Level out of window callback */ 
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	0018      	movs	r0, r3
 8000770:	f000 f834 	bl	80007dc <HAL_ADC_LevelOutOfWindowCallback>
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2210      	movs	r2, #16
 8000784:	4013      	ands	r3, r2
 8000786:	2b10      	cmp	r3, #16
 8000788:	d122      	bne.n	80007d0 <HAL_ADC_IRQHandler+0x160>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	2210      	movs	r2, #16
 8000792:	4013      	ands	r3, r2
 8000794:	2b10      	cmp	r3, #16
 8000796:	d11b      	bne.n	80007d0 <HAL_ADC_IRQHandler+0x160>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800079c:	2b01      	cmp	r3, #1
 800079e:	d005      	beq.n	80007ac <HAL_ADC_IRQHandler+0x13c>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	68db      	ldr	r3, [r3, #12]
 80007a6:	2201      	movs	r2, #1
 80007a8:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80007aa:	d00d      	beq.n	80007c8 <HAL_ADC_IRQHandler+0x158>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007b0:	2202      	movs	r2, #2
 80007b2:	431a      	orrs	r2, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2210      	movs	r2, #16
 80007be:	601a      	str	r2, [r3, #0]
      
      /* Error callback */ 
      HAL_ADC_ErrorCallback(hadc);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	0018      	movs	r0, r3
 80007c4:	f000 f812 	bl	80007ec <HAL_ADC_ErrorCallback>
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2210      	movs	r2, #16
 80007ce:	601a      	str	r2, [r3, #0]
  }

}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	b002      	add	sp, #8
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	fffffefe 	.word	0xfffffefe

080007dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b002      	add	sp, #8
 80007ea:	bd80      	pop	{r7, pc}

080007ec <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b002      	add	sp, #8
 80007fa:	bd80      	pop	{r7, pc}

080007fc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000806:	230f      	movs	r3, #15
 8000808:	18fb      	adds	r3, r7, r3
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000816:	2380      	movs	r3, #128	; 0x80
 8000818:	055b      	lsls	r3, r3, #21
 800081a:	429a      	cmp	r2, r3
 800081c:	d011      	beq.n	8000842 <HAL_ADC_ConfigChannel+0x46>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000822:	2b01      	cmp	r3, #1
 8000824:	d00d      	beq.n	8000842 <HAL_ADC_ConfigChannel+0x46>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800082a:	2b02      	cmp	r3, #2
 800082c:	d009      	beq.n	8000842 <HAL_ADC_ConfigChannel+0x46>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000832:	2b03      	cmp	r3, #3
 8000834:	d005      	beq.n	8000842 <HAL_ADC_ConfigChannel+0x46>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800083a:	2b04      	cmp	r3, #4
 800083c:	d001      	beq.n	8000842 <HAL_ADC_ConfigChannel+0x46>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2240      	movs	r2, #64	; 0x40
 8000846:	5c9b      	ldrb	r3, [r3, r2]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d101      	bne.n	8000850 <HAL_ADC_ConfigChannel+0x54>
 800084c:	2302      	movs	r3, #2
 800084e:	e0d0      	b.n	80009f2 <HAL_ADC_ConfigChannel+0x1f6>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2240      	movs	r2, #64	; 0x40
 8000854:	2101      	movs	r1, #1
 8000856:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	2204      	movs	r2, #4
 8000860:	4013      	ands	r3, r2
 8000862:	d000      	beq.n	8000866 <HAL_ADC_ConfigChannel+0x6a>
 8000864:	e0b4      	b.n	80009d0 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	4a64      	ldr	r2, [pc, #400]	; (80009fc <HAL_ADC_ConfigChannel+0x200>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d100      	bne.n	8000872 <HAL_ADC_ConfigChannel+0x76>
 8000870:	e082      	b.n	8000978 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2201      	movs	r2, #1
 800087e:	409a      	lsls	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	430a      	orrs	r2, r1
 8000886:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800088c:	2380      	movs	r3, #128	; 0x80
 800088e:	055b      	lsls	r3, r3, #21
 8000890:	429a      	cmp	r2, r3
 8000892:	d037      	beq.n	8000904 <HAL_ADC_ConfigChannel+0x108>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000898:	2b01      	cmp	r3, #1
 800089a:	d033      	beq.n	8000904 <HAL_ADC_ConfigChannel+0x108>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d02f      	beq.n	8000904 <HAL_ADC_ConfigChannel+0x108>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008a8:	2b03      	cmp	r3, #3
 80008aa:	d02b      	beq.n	8000904 <HAL_ADC_ConfigChannel+0x108>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008b0:	2b04      	cmp	r3, #4
 80008b2:	d027      	beq.n	8000904 <HAL_ADC_ConfigChannel+0x108>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008b8:	2b05      	cmp	r3, #5
 80008ba:	d023      	beq.n	8000904 <HAL_ADC_ConfigChannel+0x108>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008c0:	2b06      	cmp	r3, #6
 80008c2:	d01f      	beq.n	8000904 <HAL_ADC_ConfigChannel+0x108>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008c8:	2b07      	cmp	r3, #7
 80008ca:	d01b      	beq.n	8000904 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	689a      	ldr	r2, [r3, #8]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	2107      	movs	r1, #7
 80008d8:	400b      	ands	r3, r1
 80008da:	429a      	cmp	r2, r3
 80008dc:	d012      	beq.n	8000904 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	695a      	ldr	r2, [r3, #20]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2107      	movs	r1, #7
 80008ea:	438a      	bics	r2, r1
 80008ec:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	6959      	ldr	r1, [r3, #20]
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	2207      	movs	r2, #7
 80008fa:	401a      	ands	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	430a      	orrs	r2, r1
 8000902:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b10      	cmp	r3, #16
 800090a:	d007      	beq.n	800091c <HAL_ADC_ConfigChannel+0x120>
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b11      	cmp	r3, #17
 8000912:	d003      	beq.n	800091c <HAL_ADC_ConfigChannel+0x120>
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b12      	cmp	r3, #18
 800091a:	d163      	bne.n	80009e4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800091c:	4b38      	ldr	r3, [pc, #224]	; (8000a00 <HAL_ADC_ConfigChannel+0x204>)
 800091e:	6819      	ldr	r1, [r3, #0]
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b10      	cmp	r3, #16
 8000926:	d009      	beq.n	800093c <HAL_ADC_ConfigChannel+0x140>
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b11      	cmp	r3, #17
 800092e:	d102      	bne.n	8000936 <HAL_ADC_ConfigChannel+0x13a>
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	03db      	lsls	r3, r3, #15
 8000934:	e004      	b.n	8000940 <HAL_ADC_ConfigChannel+0x144>
 8000936:	2380      	movs	r3, #128	; 0x80
 8000938:	045b      	lsls	r3, r3, #17
 800093a:	e001      	b.n	8000940 <HAL_ADC_ConfigChannel+0x144>
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	041b      	lsls	r3, r3, #16
 8000940:	4a2f      	ldr	r2, [pc, #188]	; (8000a00 <HAL_ADC_ConfigChannel+0x204>)
 8000942:	430b      	orrs	r3, r1
 8000944:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b10      	cmp	r3, #16
 800094c:	d14a      	bne.n	80009e4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800094e:	4b2d      	ldr	r3, [pc, #180]	; (8000a04 <HAL_ADC_ConfigChannel+0x208>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	492d      	ldr	r1, [pc, #180]	; (8000a08 <HAL_ADC_ConfigChannel+0x20c>)
 8000954:	0018      	movs	r0, r3
 8000956:	f7ff fbdf 	bl	8000118 <__udivsi3>
 800095a:	0003      	movs	r3, r0
 800095c:	001a      	movs	r2, r3
 800095e:	0013      	movs	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	189b      	adds	r3, r3, r2
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000968:	e002      	b.n	8000970 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	3b01      	subs	r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1f9      	bne.n	800096a <HAL_ADC_ConfigChannel+0x16e>
 8000976:	e035      	b.n	80009e4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2101      	movs	r1, #1
 8000984:	4099      	lsls	r1, r3
 8000986:	000b      	movs	r3, r1
 8000988:	43d9      	mvns	r1, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	400a      	ands	r2, r1
 8000990:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b10      	cmp	r3, #16
 8000998:	d007      	beq.n	80009aa <HAL_ADC_ConfigChannel+0x1ae>
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b11      	cmp	r3, #17
 80009a0:	d003      	beq.n	80009aa <HAL_ADC_ConfigChannel+0x1ae>
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b12      	cmp	r3, #18
 80009a8:	d11c      	bne.n	80009e4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_ADC_ConfigChannel+0x204>)
 80009ac:	6819      	ldr	r1, [r3, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b10      	cmp	r3, #16
 80009b4:	d007      	beq.n	80009c6 <HAL_ADC_ConfigChannel+0x1ca>
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b11      	cmp	r3, #17
 80009bc:	d101      	bne.n	80009c2 <HAL_ADC_ConfigChannel+0x1c6>
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <HAL_ADC_ConfigChannel+0x210>)
 80009c0:	e002      	b.n	80009c8 <HAL_ADC_ConfigChannel+0x1cc>
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <HAL_ADC_ConfigChannel+0x214>)
 80009c4:	e000      	b.n	80009c8 <HAL_ADC_ConfigChannel+0x1cc>
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <HAL_ADC_ConfigChannel+0x218>)
 80009c8:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <HAL_ADC_ConfigChannel+0x204>)
 80009ca:	400b      	ands	r3, r1
 80009cc:	6013      	str	r3, [r2, #0]
 80009ce:	e009      	b.n	80009e4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d4:	2220      	movs	r2, #32
 80009d6:	431a      	orrs	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 80009dc:	230f      	movs	r3, #15
 80009de:	18fb      	adds	r3, r7, r3
 80009e0:	2201      	movs	r2, #1
 80009e2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2240      	movs	r2, #64	; 0x40
 80009e8:	2100      	movs	r1, #0
 80009ea:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80009ec:	230f      	movs	r3, #15
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	781b      	ldrb	r3, [r3, #0]
}
 80009f2:	0018      	movs	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b004      	add	sp, #16
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	00001001 	.word	0x00001001
 8000a00:	40012708 	.word	0x40012708
 8000a04:	2000000c 	.word	0x2000000c
 8000a08:	000f4240 	.word	0x000f4240
 8000a0c:	ffbfffff 	.word	0xffbfffff
 8000a10:	feffffff 	.word	0xfeffffff
 8000a14:	ff7fffff 	.word	0xff7fffff

08000a18 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	689b      	ldr	r3, [r3, #8]
 8000a2e:	2203      	movs	r2, #3
 8000a30:	4013      	ands	r3, r2
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d112      	bne.n	8000a5c <ADC_Enable+0x44>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	4013      	ands	r3, r2
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d009      	beq.n	8000a58 <ADC_Enable+0x40>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	68da      	ldr	r2, [r3, #12]
 8000a4a:	2380      	movs	r3, #128	; 0x80
 8000a4c:	021b      	lsls	r3, r3, #8
 8000a4e:	401a      	ands	r2, r3
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	021b      	lsls	r3, r3, #8
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d101      	bne.n	8000a5c <ADC_Enable+0x44>
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e000      	b.n	8000a5e <ADC_Enable+0x46>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d14b      	bne.n	8000afa <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	4a26      	ldr	r2, [pc, #152]	; (8000b04 <ADC_Enable+0xec>)
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	d00d      	beq.n	8000a8a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	2210      	movs	r2, #16
 8000a74:	431a      	orrs	r2, r3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	645a      	str	r2, [r3, #68]	; 0x44
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a7e:	2201      	movs	r2, #1
 8000a80:	431a      	orrs	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e038      	b.n	8000afc <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	689a      	ldr	r2, [r3, #8]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2101      	movs	r1, #1
 8000a96:	430a      	orrs	r2, r1
 8000a98:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a9a:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <ADC_Enable+0xf0>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	491b      	ldr	r1, [pc, #108]	; (8000b0c <ADC_Enable+0xf4>)
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f7ff fb39 	bl	8000118 <__udivsi3>
 8000aa6:	0003      	movs	r3, r0
 8000aa8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000aaa:	e002      	b.n	8000ab2 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1f9      	bne.n	8000aac <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ab8:	f7ff fbf6 	bl	80002a8 <HAL_GetTick>
 8000abc:	0003      	movs	r3, r0
 8000abe:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000ac0:	e014      	b.n	8000aec <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000ac2:	f7ff fbf1 	bl	80002a8 <HAL_GetTick>
 8000ac6:	0002      	movs	r2, r0
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d90d      	bls.n	8000aec <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad4:	2210      	movs	r2, #16
 8000ad6:	431a      	orrs	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e007      	b.n	8000afc <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2201      	movs	r2, #1
 8000af4:	4013      	ands	r3, r2
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d1e3      	bne.n	8000ac2 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	0018      	movs	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b004      	add	sp, #16
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	80000017 	.word	0x80000017
 8000b08:	2000000c 	.word	0x2000000c
 8000b0c:	000f4240 	.word	0x000f4240

08000b10 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	0002      	movs	r2, r0
 8000b18:	1dfb      	adds	r3, r7, #7
 8000b1a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b1c:	1dfb      	adds	r3, r7, #7
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	001a      	movs	r2, r3
 8000b22:	231f      	movs	r3, #31
 8000b24:	401a      	ands	r2, r3
 8000b26:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <NVIC_EnableIRQ+0x28>)
 8000b28:	2101      	movs	r1, #1
 8000b2a:	4091      	lsls	r1, r2
 8000b2c:	000a      	movs	r2, r1
 8000b2e:	601a      	str	r2, [r3, #0]
}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b002      	add	sp, #8
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	e000e100 	.word	0xe000e100

08000b3c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	0002      	movs	r2, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b50:	d932      	bls.n	8000bb8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b52:	4a2f      	ldr	r2, [pc, #188]	; (8000c10 <NVIC_SetPriority+0xd4>)
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	0019      	movs	r1, r3
 8000b5a:	230f      	movs	r3, #15
 8000b5c:	400b      	ands	r3, r1
 8000b5e:	3b08      	subs	r3, #8
 8000b60:	089b      	lsrs	r3, r3, #2
 8000b62:	3306      	adds	r3, #6
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	18d3      	adds	r3, r2, r3
 8000b68:	3304      	adds	r3, #4
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	1dfa      	adds	r2, r7, #7
 8000b6e:	7812      	ldrb	r2, [r2, #0]
 8000b70:	0011      	movs	r1, r2
 8000b72:	2203      	movs	r2, #3
 8000b74:	400a      	ands	r2, r1
 8000b76:	00d2      	lsls	r2, r2, #3
 8000b78:	21ff      	movs	r1, #255	; 0xff
 8000b7a:	4091      	lsls	r1, r2
 8000b7c:	000a      	movs	r2, r1
 8000b7e:	43d2      	mvns	r2, r2
 8000b80:	401a      	ands	r2, r3
 8000b82:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	019b      	lsls	r3, r3, #6
 8000b88:	22ff      	movs	r2, #255	; 0xff
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	0018      	movs	r0, r3
 8000b92:	2303      	movs	r3, #3
 8000b94:	4003      	ands	r3, r0
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b9a:	481d      	ldr	r0, [pc, #116]	; (8000c10 <NVIC_SetPriority+0xd4>)
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	001c      	movs	r4, r3
 8000ba2:	230f      	movs	r3, #15
 8000ba4:	4023      	ands	r3, r4
 8000ba6:	3b08      	subs	r3, #8
 8000ba8:	089b      	lsrs	r3, r3, #2
 8000baa:	430a      	orrs	r2, r1
 8000bac:	3306      	adds	r3, #6
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	18c3      	adds	r3, r0, r3
 8000bb2:	3304      	adds	r3, #4
 8000bb4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bb6:	e027      	b.n	8000c08 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb8:	4a16      	ldr	r2, [pc, #88]	; (8000c14 <NVIC_SetPriority+0xd8>)
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b25b      	sxtb	r3, r3
 8000bc0:	089b      	lsrs	r3, r3, #2
 8000bc2:	33c0      	adds	r3, #192	; 0xc0
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	589b      	ldr	r3, [r3, r2]
 8000bc8:	1dfa      	adds	r2, r7, #7
 8000bca:	7812      	ldrb	r2, [r2, #0]
 8000bcc:	0011      	movs	r1, r2
 8000bce:	2203      	movs	r2, #3
 8000bd0:	400a      	ands	r2, r1
 8000bd2:	00d2      	lsls	r2, r2, #3
 8000bd4:	21ff      	movs	r1, #255	; 0xff
 8000bd6:	4091      	lsls	r1, r2
 8000bd8:	000a      	movs	r2, r1
 8000bda:	43d2      	mvns	r2, r2
 8000bdc:	401a      	ands	r2, r3
 8000bde:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	019b      	lsls	r3, r3, #6
 8000be4:	22ff      	movs	r2, #255	; 0xff
 8000be6:	401a      	ands	r2, r3
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	0018      	movs	r0, r3
 8000bee:	2303      	movs	r3, #3
 8000bf0:	4003      	ands	r3, r0
 8000bf2:	00db      	lsls	r3, r3, #3
 8000bf4:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf6:	4807      	ldr	r0, [pc, #28]	; (8000c14 <NVIC_SetPriority+0xd8>)
 8000bf8:	1dfb      	adds	r3, r7, #7
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b25b      	sxtb	r3, r3
 8000bfe:	089b      	lsrs	r3, r3, #2
 8000c00:	430a      	orrs	r2, r1
 8000c02:	33c0      	adds	r3, #192	; 0xc0
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	501a      	str	r2, [r3, r0]
}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b003      	add	sp, #12
 8000c0e:	bd90      	pop	{r4, r7, pc}
 8000c10:	e000ed00 	.word	0xe000ed00
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	4a0c      	ldr	r2, [pc, #48]	; (8000c58 <SysTick_Config+0x40>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d901      	bls.n	8000c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e010      	b.n	8000c50 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <SysTick_Config+0x44>)
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	3a01      	subs	r2, #1
 8000c34:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c36:	2301      	movs	r3, #1
 8000c38:	425b      	negs	r3, r3
 8000c3a:	2103      	movs	r1, #3
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f7ff ff7d 	bl	8000b3c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <SysTick_Config+0x44>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <SysTick_Config+0x44>)
 8000c4a:	2207      	movs	r2, #7
 8000c4c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	0018      	movs	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b002      	add	sp, #8
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	00ffffff 	.word	0x00ffffff
 8000c5c:	e000e010 	.word	0xe000e010

08000c60 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	210f      	movs	r1, #15
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	1c02      	adds	r2, r0, #0
 8000c70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	b25b      	sxtb	r3, r3
 8000c7a:	0011      	movs	r1, r2
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f7ff ff5d 	bl	8000b3c <NVIC_SetPriority>
}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b004      	add	sp, #16
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	0002      	movs	r2, r0
 8000c92:	1dfb      	adds	r3, r7, #7
 8000c94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c96:	1dfb      	adds	r3, r7, #7
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b25b      	sxtb	r3, r3
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff ff37 	bl	8000b10 <NVIC_EnableIRQ>
}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b002      	add	sp, #8
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff ffaf 	bl	8000c18 <SysTick_Config>
 8000cba:	0003      	movs	r3, r0
}
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b002      	add	sp, #8
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ccc:	230f      	movs	r3, #15
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2221      	movs	r2, #33	; 0x21
 8000cd8:	5c9b      	ldrb	r3, [r3, r2]
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d007      	beq.n	8000cf0 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ce6:	230f      	movs	r3, #15
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	2201      	movs	r2, #1
 8000cec:	701a      	strb	r2, [r3, #0]
 8000cee:	e028      	b.n	8000d42 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	210e      	movs	r1, #14
 8000cfc:	438a      	bics	r2, r1
 8000cfe:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	438a      	bics	r2, r1
 8000d0e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d18:	2101      	movs	r1, #1
 8000d1a:	4091      	lsls	r1, r2
 8000d1c:	000a      	movs	r2, r1
 8000d1e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2221      	movs	r2, #33	; 0x21
 8000d24:	2101      	movs	r1, #1
 8000d26:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2220      	movs	r2, #32
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d004      	beq.n	8000d42 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	0010      	movs	r0, r2
 8000d40:	4798      	blx	r3
    } 
  }
  return status;
 8000d42:	230f      	movs	r3, #15
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	781b      	ldrb	r3, [r3, #0]
}
 8000d48:	0018      	movs	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b004      	add	sp, #16
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d66:	e14f      	b.n	8001008 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	4091      	lsls	r1, r2
 8000d72:	000a      	movs	r2, r1
 8000d74:	4013      	ands	r3, r2
 8000d76:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d100      	bne.n	8000d80 <HAL_GPIO_Init+0x30>
 8000d7e:	e140      	b.n	8001002 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d003      	beq.n	8000d90 <HAL_GPIO_Init+0x40>
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	2b12      	cmp	r3, #18
 8000d8e:	d123      	bne.n	8000dd8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	08da      	lsrs	r2, r3, #3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3208      	adds	r2, #8
 8000d98:	0092      	lsls	r2, r2, #2
 8000d9a:	58d3      	ldr	r3, [r2, r3]
 8000d9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	2207      	movs	r2, #7
 8000da2:	4013      	ands	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	220f      	movs	r2, #15
 8000da8:	409a      	lsls	r2, r3
 8000daa:	0013      	movs	r3, r2
 8000dac:	43da      	mvns	r2, r3
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	691a      	ldr	r2, [r3, #16]
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	2107      	movs	r1, #7
 8000dbc:	400b      	ands	r3, r1
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	409a      	lsls	r2, r3
 8000dc2:	0013      	movs	r3, r2
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	08da      	lsrs	r2, r3, #3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3208      	adds	r2, #8
 8000dd2:	0092      	lsls	r2, r2, #2
 8000dd4:	6939      	ldr	r1, [r7, #16]
 8000dd6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	409a      	lsls	r2, r3
 8000de6:	0013      	movs	r3, r2
 8000de8:	43da      	mvns	r2, r3
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2203      	movs	r2, #3
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	409a      	lsls	r2, r3
 8000dfe:	0013      	movs	r3, r2
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d00b      	beq.n	8000e2c <HAL_GPIO_Init+0xdc>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d007      	beq.n	8000e2c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e20:	2b11      	cmp	r3, #17
 8000e22:	d003      	beq.n	8000e2c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b12      	cmp	r3, #18
 8000e2a:	d130      	bne.n	8000e8e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	409a      	lsls	r2, r3
 8000e3a:	0013      	movs	r3, r2
 8000e3c:	43da      	mvns	r2, r3
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	68da      	ldr	r2, [r3, #12]
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	409a      	lsls	r2, r3
 8000e4e:	0013      	movs	r3, r2
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000e62:	2201      	movs	r2, #1
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
 8000e68:	0013      	movs	r3, r2
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	2201      	movs	r2, #1
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	0013      	movs	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	2380      	movs	r3, #128	; 0x80
 8000ec4:	055b      	lsls	r3, r3, #21
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	d100      	bne.n	8000ecc <HAL_GPIO_Init+0x17c>
 8000eca:	e09a      	b.n	8001002 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ecc:	4b54      	ldr	r3, [pc, #336]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000ece:	699a      	ldr	r2, [r3, #24]
 8000ed0:	4b53      	ldr	r3, [pc, #332]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	619a      	str	r2, [r3, #24]
 8000ed8:	4b51      	ldr	r3, [pc, #324]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	2201      	movs	r2, #1
 8000ede:	4013      	ands	r3, r2
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000ee4:	4a4f      	ldr	r2, [pc, #316]	; (8001024 <HAL_GPIO_Init+0x2d4>)
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	3302      	adds	r3, #2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	589b      	ldr	r3, [r3, r2]
 8000ef0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	220f      	movs	r2, #15
 8000efc:	409a      	lsls	r2, r3
 8000efe:	0013      	movs	r3, r2
 8000f00:	43da      	mvns	r2, r3
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	2390      	movs	r3, #144	; 0x90
 8000f0c:	05db      	lsls	r3, r3, #23
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d013      	beq.n	8000f3a <HAL_GPIO_Init+0x1ea>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a44      	ldr	r2, [pc, #272]	; (8001028 <HAL_GPIO_Init+0x2d8>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00d      	beq.n	8000f36 <HAL_GPIO_Init+0x1e6>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a43      	ldr	r2, [pc, #268]	; (800102c <HAL_GPIO_Init+0x2dc>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x1e2>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a42      	ldr	r2, [pc, #264]	; (8001030 <HAL_GPIO_Init+0x2e0>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d101      	bne.n	8000f2e <HAL_GPIO_Init+0x1de>
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e006      	b.n	8000f3c <HAL_GPIO_Init+0x1ec>
 8000f2e:	2305      	movs	r3, #5
 8000f30:	e004      	b.n	8000f3c <HAL_GPIO_Init+0x1ec>
 8000f32:	2302      	movs	r3, #2
 8000f34:	e002      	b.n	8000f3c <HAL_GPIO_Init+0x1ec>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e000      	b.n	8000f3c <HAL_GPIO_Init+0x1ec>
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	2103      	movs	r1, #3
 8000f40:	400a      	ands	r2, r1
 8000f42:	0092      	lsls	r2, r2, #2
 8000f44:	4093      	lsls	r3, r2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f4c:	4935      	ldr	r1, [pc, #212]	; (8001024 <HAL_GPIO_Init+0x2d4>)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	3302      	adds	r3, #2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f5a:	4b36      	ldr	r3, [pc, #216]	; (8001034 <HAL_GPIO_Init+0x2e4>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	43da      	mvns	r2, r3
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	025b      	lsls	r3, r3, #9
 8000f72:	4013      	ands	r3, r2
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f7e:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <HAL_GPIO_Init+0x2e4>)
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f84:	4b2b      	ldr	r3, [pc, #172]	; (8001034 <HAL_GPIO_Init+0x2e4>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	43da      	mvns	r2, r3
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	2380      	movs	r3, #128	; 0x80
 8000f9a:	029b      	lsls	r3, r3, #10
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fa8:	4b22      	ldr	r3, [pc, #136]	; (8001034 <HAL_GPIO_Init+0x2e4>)
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <HAL_GPIO_Init+0x2e4>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	035b      	lsls	r3, r3, #13
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fd2:	4b18      	ldr	r3, [pc, #96]	; (8001034 <HAL_GPIO_Init+0x2e4>)
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <HAL_GPIO_Init+0x2e4>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	43da      	mvns	r2, r3
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	039b      	lsls	r3, r3, #14
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <HAL_GPIO_Init+0x2e4>)
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	3301      	adds	r3, #1
 8001006:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	40da      	lsrs	r2, r3
 8001010:	1e13      	subs	r3, r2, #0
 8001012:	d000      	beq.n	8001016 <HAL_GPIO_Init+0x2c6>
 8001014:	e6a8      	b.n	8000d68 <HAL_GPIO_Init+0x18>
  } 
}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	46bd      	mov	sp, r7
 800101a:	b006      	add	sp, #24
 800101c:	bd80      	pop	{r7, pc}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	40021000 	.word	0x40021000
 8001024:	40010000 	.word	0x40010000
 8001028:	48000400 	.word	0x48000400
 800102c:	48000800 	.word	0x48000800
 8001030:	48000c00 	.word	0x48000c00
 8001034:	40010400 	.word	0x40010400

08001038 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	000a      	movs	r2, r1
 8001042:	1cbb      	adds	r3, r7, #2
 8001044:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	1cba      	adds	r2, r7, #2
 800104c:	8812      	ldrh	r2, [r2, #0]
 800104e:	4013      	ands	r3, r2
 8001050:	d004      	beq.n	800105c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001052:	230f      	movs	r3, #15
 8001054:	18fb      	adds	r3, r7, r3
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]
 800105a:	e003      	b.n	8001064 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800105c:	230f      	movs	r3, #15
 800105e:	18fb      	adds	r3, r7, r3
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001064:	230f      	movs	r3, #15
 8001066:	18fb      	adds	r3, r7, r3
 8001068:	781b      	ldrb	r3, [r3, #0]
  }
 800106a:	0018      	movs	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	b004      	add	sp, #16
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	0008      	movs	r0, r1
 800107c:	0011      	movs	r1, r2
 800107e:	1cbb      	adds	r3, r7, #2
 8001080:	1c02      	adds	r2, r0, #0
 8001082:	801a      	strh	r2, [r3, #0]
 8001084:	1c7b      	adds	r3, r7, #1
 8001086:	1c0a      	adds	r2, r1, #0
 8001088:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800108a:	1c7b      	adds	r3, r7, #1
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d004      	beq.n	800109c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001092:	1cbb      	adds	r3, r7, #2
 8001094:	881a      	ldrh	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800109a:	e003      	b.n	80010a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800109c:	1cbb      	adds	r3, r7, #2
 800109e:	881a      	ldrh	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b002      	add	sp, #8
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2201      	movs	r2, #1
 80010be:	4013      	ands	r3, r2
 80010c0:	d100      	bne.n	80010c4 <HAL_RCC_OscConfig+0x18>
 80010c2:	e08d      	b.n	80011e0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010c4:	4bc3      	ldr	r3, [pc, #780]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	220c      	movs	r2, #12
 80010ca:	4013      	ands	r3, r2
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d00e      	beq.n	80010ee <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010d0:	4bc0      	ldr	r3, [pc, #768]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	220c      	movs	r2, #12
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b08      	cmp	r3, #8
 80010da:	d116      	bne.n	800110a <HAL_RCC_OscConfig+0x5e>
 80010dc:	4bbd      	ldr	r3, [pc, #756]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	025b      	lsls	r3, r3, #9
 80010e4:	401a      	ands	r2, r3
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	025b      	lsls	r3, r3, #9
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d10d      	bne.n	800110a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ee:	4bb9      	ldr	r3, [pc, #740]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	029b      	lsls	r3, r3, #10
 80010f6:	4013      	ands	r3, r2
 80010f8:	d100      	bne.n	80010fc <HAL_RCC_OscConfig+0x50>
 80010fa:	e070      	b.n	80011de <HAL_RCC_OscConfig+0x132>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d000      	beq.n	8001106 <HAL_RCC_OscConfig+0x5a>
 8001104:	e06b      	b.n	80011de <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e2b6      	b.n	8001678 <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d107      	bne.n	8001122 <HAL_RCC_OscConfig+0x76>
 8001112:	4bb0      	ldr	r3, [pc, #704]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4baf      	ldr	r3, [pc, #700]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 8001118:	2180      	movs	r1, #128	; 0x80
 800111a:	0249      	lsls	r1, r1, #9
 800111c:	430a      	orrs	r2, r1
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	e02f      	b.n	8001182 <HAL_RCC_OscConfig+0xd6>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10c      	bne.n	8001144 <HAL_RCC_OscConfig+0x98>
 800112a:	4baa      	ldr	r3, [pc, #680]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4ba9      	ldr	r3, [pc, #676]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 8001130:	49a9      	ldr	r1, [pc, #676]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 8001132:	400a      	ands	r2, r1
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	4ba7      	ldr	r3, [pc, #668]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	4ba6      	ldr	r3, [pc, #664]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 800113c:	49a7      	ldr	r1, [pc, #668]	; (80013dc <HAL_RCC_OscConfig+0x330>)
 800113e:	400a      	ands	r2, r1
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	e01e      	b.n	8001182 <HAL_RCC_OscConfig+0xd6>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b05      	cmp	r3, #5
 800114a:	d10e      	bne.n	800116a <HAL_RCC_OscConfig+0xbe>
 800114c:	4ba1      	ldr	r3, [pc, #644]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4ba0      	ldr	r3, [pc, #640]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	02c9      	lsls	r1, r1, #11
 8001156:	430a      	orrs	r2, r1
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	4b9e      	ldr	r3, [pc, #632]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b9d      	ldr	r3, [pc, #628]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 8001160:	2180      	movs	r1, #128	; 0x80
 8001162:	0249      	lsls	r1, r1, #9
 8001164:	430a      	orrs	r2, r1
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	e00b      	b.n	8001182 <HAL_RCC_OscConfig+0xd6>
 800116a:	4b9a      	ldr	r3, [pc, #616]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	4b99      	ldr	r3, [pc, #612]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 8001170:	4999      	ldr	r1, [pc, #612]	; (80013d8 <HAL_RCC_OscConfig+0x32c>)
 8001172:	400a      	ands	r2, r1
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	4b97      	ldr	r3, [pc, #604]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4b96      	ldr	r3, [pc, #600]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 800117c:	4997      	ldr	r1, [pc, #604]	; (80013dc <HAL_RCC_OscConfig+0x330>)
 800117e:	400a      	ands	r2, r1
 8001180:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d014      	beq.n	80011b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118a:	f7ff f88d 	bl	80002a8 <HAL_GetTick>
 800118e:	0003      	movs	r3, r0
 8001190:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff f888 	bl	80002a8 <HAL_GetTick>
 8001198:	0002      	movs	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	; 0x64
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e268      	b.n	8001678 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a6:	4b8b      	ldr	r3, [pc, #556]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	029b      	lsls	r3, r3, #10
 80011ae:	4013      	ands	r3, r2
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0xe8>
 80011b2:	e015      	b.n	80011e0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff f878 	bl	80002a8 <HAL_GetTick>
 80011b8:	0003      	movs	r3, r0
 80011ba:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011be:	f7ff f873 	bl	80002a8 <HAL_GetTick>
 80011c2:	0002      	movs	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b64      	cmp	r3, #100	; 0x64
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e253      	b.n	8001678 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d0:	4b80      	ldr	r3, [pc, #512]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	029b      	lsls	r3, r3, #10
 80011d8:	4013      	ands	r3, r2
 80011da:	d1f0      	bne.n	80011be <HAL_RCC_OscConfig+0x112>
 80011dc:	e000      	b.n	80011e0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2202      	movs	r2, #2
 80011e6:	4013      	ands	r3, r2
 80011e8:	d100      	bne.n	80011ec <HAL_RCC_OscConfig+0x140>
 80011ea:	e069      	b.n	80012c0 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011ec:	4b79      	ldr	r3, [pc, #484]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	220c      	movs	r2, #12
 80011f2:	4013      	ands	r3, r2
 80011f4:	d00b      	beq.n	800120e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011f6:	4b77      	ldr	r3, [pc, #476]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	220c      	movs	r2, #12
 80011fc:	4013      	ands	r3, r2
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d11c      	bne.n	800123c <HAL_RCC_OscConfig+0x190>
 8001202:	4b74      	ldr	r3, [pc, #464]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	025b      	lsls	r3, r3, #9
 800120a:	4013      	ands	r3, r2
 800120c:	d116      	bne.n	800123c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120e:	4b71      	ldr	r3, [pc, #452]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2202      	movs	r2, #2
 8001214:	4013      	ands	r3, r2
 8001216:	d005      	beq.n	8001224 <HAL_RCC_OscConfig+0x178>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d001      	beq.n	8001224 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e229      	b.n	8001678 <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001224:	4b6b      	ldr	r3, [pc, #428]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	22f8      	movs	r2, #248	; 0xf8
 800122a:	4393      	bics	r3, r2
 800122c:	0019      	movs	r1, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	00da      	lsls	r2, r3, #3
 8001234:	4b67      	ldr	r3, [pc, #412]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 8001236:	430a      	orrs	r2, r1
 8001238:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123a:	e041      	b.n	80012c0 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d024      	beq.n	800128e <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001244:	4b63      	ldr	r3, [pc, #396]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b62      	ldr	r3, [pc, #392]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 800124a:	2101      	movs	r1, #1
 800124c:	430a      	orrs	r2, r1
 800124e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff f82a 	bl	80002a8 <HAL_GetTick>
 8001254:	0003      	movs	r3, r0
 8001256:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800125a:	f7ff f825 	bl	80002a8 <HAL_GetTick>
 800125e:	0002      	movs	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e205      	b.n	8001678 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126c:	4b59      	ldr	r3, [pc, #356]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2202      	movs	r2, #2
 8001272:	4013      	ands	r3, r2
 8001274:	d0f1      	beq.n	800125a <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001276:	4b57      	ldr	r3, [pc, #348]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	22f8      	movs	r2, #248	; 0xf8
 800127c:	4393      	bics	r3, r2
 800127e:	0019      	movs	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	00da      	lsls	r2, r3, #3
 8001286:	4b53      	ldr	r3, [pc, #332]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 8001288:	430a      	orrs	r2, r1
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	e018      	b.n	80012c0 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800128e:	4b51      	ldr	r3, [pc, #324]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4b50      	ldr	r3, [pc, #320]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 8001294:	2101      	movs	r1, #1
 8001296:	438a      	bics	r2, r1
 8001298:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129a:	f7ff f805 	bl	80002a8 <HAL_GetTick>
 800129e:	0003      	movs	r3, r0
 80012a0:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a4:	f7ff f800 	bl	80002a8 <HAL_GetTick>
 80012a8:	0002      	movs	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e1e0      	b.n	8001678 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b6:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2202      	movs	r2, #2
 80012bc:	4013      	ands	r3, r2
 80012be:	d1f1      	bne.n	80012a4 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2208      	movs	r2, #8
 80012c6:	4013      	ands	r3, r2
 80012c8:	d036      	beq.n	8001338 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d019      	beq.n	8001306 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012d2:	4b40      	ldr	r3, [pc, #256]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 80012d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012d6:	4b3f      	ldr	r3, [pc, #252]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 80012d8:	2101      	movs	r1, #1
 80012da:	430a      	orrs	r2, r1
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012de:	f7fe ffe3 	bl	80002a8 <HAL_GetTick>
 80012e2:	0003      	movs	r3, r0
 80012e4:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e8:	f7fe ffde 	bl	80002a8 <HAL_GetTick>
 80012ec:	0002      	movs	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e1be      	b.n	8001678 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	2202      	movs	r2, #2
 8001300:	4013      	ands	r3, r2
 8001302:	d0f1      	beq.n	80012e8 <HAL_RCC_OscConfig+0x23c>
 8001304:	e018      	b.n	8001338 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001306:	4b33      	ldr	r3, [pc, #204]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 8001308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800130a:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 800130c:	2101      	movs	r1, #1
 800130e:	438a      	bics	r2, r1
 8001310:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001312:	f7fe ffc9 	bl	80002a8 <HAL_GetTick>
 8001316:	0003      	movs	r3, r0
 8001318:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131c:	f7fe ffc4 	bl	80002a8 <HAL_GetTick>
 8001320:	0002      	movs	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e1a4      	b.n	8001678 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800132e:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	2202      	movs	r2, #2
 8001334:	4013      	ands	r3, r2
 8001336:	d1f1      	bne.n	800131c <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2204      	movs	r2, #4
 800133e:	4013      	ands	r3, r2
 8001340:	d100      	bne.n	8001344 <HAL_RCC_OscConfig+0x298>
 8001342:	e0b5      	b.n	80014b0 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001344:	2317      	movs	r3, #23
 8001346:	18fb      	adds	r3, r7, r3
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800134c:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 800134e:	69da      	ldr	r2, [r3, #28]
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	055b      	lsls	r3, r3, #21
 8001354:	4013      	ands	r3, r2
 8001356:	d111      	bne.n	800137c <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001358:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 800135a:	69da      	ldr	r2, [r3, #28]
 800135c:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 800135e:	2180      	movs	r1, #128	; 0x80
 8001360:	0549      	lsls	r1, r1, #21
 8001362:	430a      	orrs	r2, r1
 8001364:	61da      	str	r2, [r3, #28]
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 8001368:	69da      	ldr	r2, [r3, #28]
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	055b      	lsls	r3, r3, #21
 800136e:	4013      	ands	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001374:	2317      	movs	r3, #23
 8001376:	18fb      	adds	r3, r7, r3
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137c:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <HAL_RCC_OscConfig+0x334>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4013      	ands	r3, r2
 8001386:	d11a      	bne.n	80013be <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001388:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <HAL_RCC_OscConfig+0x334>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_RCC_OscConfig+0x334>)
 800138e:	2180      	movs	r1, #128	; 0x80
 8001390:	0049      	lsls	r1, r1, #1
 8001392:	430a      	orrs	r2, r1
 8001394:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001396:	f7fe ff87 	bl	80002a8 <HAL_GetTick>
 800139a:	0003      	movs	r3, r0
 800139c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a0:	f7fe ff82 	bl	80002a8 <HAL_GetTick>
 80013a4:	0002      	movs	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	; 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e162      	b.n	8001678 <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_RCC_OscConfig+0x334>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4013      	ands	r3, r2
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d10e      	bne.n	80013e4 <HAL_RCC_OscConfig+0x338>
 80013c6:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 80013c8:	6a1a      	ldr	r2, [r3, #32]
 80013ca:	4b02      	ldr	r3, [pc, #8]	; (80013d4 <HAL_RCC_OscConfig+0x328>)
 80013cc:	2101      	movs	r1, #1
 80013ce:	430a      	orrs	r2, r1
 80013d0:	621a      	str	r2, [r3, #32]
 80013d2:	e035      	b.n	8001440 <HAL_RCC_OscConfig+0x394>
 80013d4:	40021000 	.word	0x40021000
 80013d8:	fffeffff 	.word	0xfffeffff
 80013dc:	fffbffff 	.word	0xfffbffff
 80013e0:	40007000 	.word	0x40007000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d10c      	bne.n	8001406 <HAL_RCC_OscConfig+0x35a>
 80013ec:	4ba4      	ldr	r3, [pc, #656]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 80013ee:	6a1a      	ldr	r2, [r3, #32]
 80013f0:	4ba3      	ldr	r3, [pc, #652]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 80013f2:	2101      	movs	r1, #1
 80013f4:	438a      	bics	r2, r1
 80013f6:	621a      	str	r2, [r3, #32]
 80013f8:	4ba1      	ldr	r3, [pc, #644]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 80013fa:	6a1a      	ldr	r2, [r3, #32]
 80013fc:	4ba0      	ldr	r3, [pc, #640]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 80013fe:	2104      	movs	r1, #4
 8001400:	438a      	bics	r2, r1
 8001402:	621a      	str	r2, [r3, #32]
 8001404:	e01c      	b.n	8001440 <HAL_RCC_OscConfig+0x394>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b05      	cmp	r3, #5
 800140c:	d10c      	bne.n	8001428 <HAL_RCC_OscConfig+0x37c>
 800140e:	4b9c      	ldr	r3, [pc, #624]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 8001410:	6a1a      	ldr	r2, [r3, #32]
 8001412:	4b9b      	ldr	r3, [pc, #620]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 8001414:	2104      	movs	r1, #4
 8001416:	430a      	orrs	r2, r1
 8001418:	621a      	str	r2, [r3, #32]
 800141a:	4b99      	ldr	r3, [pc, #612]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 800141c:	6a1a      	ldr	r2, [r3, #32]
 800141e:	4b98      	ldr	r3, [pc, #608]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 8001420:	2101      	movs	r1, #1
 8001422:	430a      	orrs	r2, r1
 8001424:	621a      	str	r2, [r3, #32]
 8001426:	e00b      	b.n	8001440 <HAL_RCC_OscConfig+0x394>
 8001428:	4b95      	ldr	r3, [pc, #596]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 800142a:	6a1a      	ldr	r2, [r3, #32]
 800142c:	4b94      	ldr	r3, [pc, #592]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 800142e:	2101      	movs	r1, #1
 8001430:	438a      	bics	r2, r1
 8001432:	621a      	str	r2, [r3, #32]
 8001434:	4b92      	ldr	r3, [pc, #584]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 8001436:	6a1a      	ldr	r2, [r3, #32]
 8001438:	4b91      	ldr	r3, [pc, #580]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 800143a:	2104      	movs	r1, #4
 800143c:	438a      	bics	r2, r1
 800143e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d014      	beq.n	8001472 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001448:	f7fe ff2e 	bl	80002a8 <HAL_GetTick>
 800144c:	0003      	movs	r3, r0
 800144e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001450:	e009      	b.n	8001466 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001452:	f7fe ff29 	bl	80002a8 <HAL_GetTick>
 8001456:	0002      	movs	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	4a89      	ldr	r2, [pc, #548]	; (8001684 <HAL_RCC_OscConfig+0x5d8>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e108      	b.n	8001678 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001466:	4b86      	ldr	r3, [pc, #536]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	2202      	movs	r2, #2
 800146c:	4013      	ands	r3, r2
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x3a6>
 8001470:	e013      	b.n	800149a <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001472:	f7fe ff19 	bl	80002a8 <HAL_GetTick>
 8001476:	0003      	movs	r3, r0
 8001478:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800147a:	e009      	b.n	8001490 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800147c:	f7fe ff14 	bl	80002a8 <HAL_GetTick>
 8001480:	0002      	movs	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	4a7f      	ldr	r2, [pc, #508]	; (8001684 <HAL_RCC_OscConfig+0x5d8>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e0f3      	b.n	8001678 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001490:	4b7b      	ldr	r3, [pc, #492]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	2202      	movs	r2, #2
 8001496:	4013      	ands	r3, r2
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800149a:	2317      	movs	r3, #23
 800149c:	18fb      	adds	r3, r7, r3
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d105      	bne.n	80014b0 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a4:	4b76      	ldr	r3, [pc, #472]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 80014a6:	69da      	ldr	r2, [r3, #28]
 80014a8:	4b75      	ldr	r3, [pc, #468]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 80014aa:	4977      	ldr	r1, [pc, #476]	; (8001688 <HAL_RCC_OscConfig+0x5dc>)
 80014ac:	400a      	ands	r2, r1
 80014ae:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2210      	movs	r2, #16
 80014b6:	4013      	ands	r3, r2
 80014b8:	d063      	beq.n	8001582 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d12a      	bne.n	8001518 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014c2:	4b6f      	ldr	r3, [pc, #444]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 80014c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014c6:	4b6e      	ldr	r3, [pc, #440]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 80014c8:	2104      	movs	r1, #4
 80014ca:	430a      	orrs	r2, r1
 80014cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80014ce:	4b6c      	ldr	r3, [pc, #432]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 80014d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d2:	4b6b      	ldr	r3, [pc, #428]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 80014d4:	2101      	movs	r1, #1
 80014d6:	430a      	orrs	r2, r1
 80014d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014da:	f7fe fee5 	bl	80002a8 <HAL_GetTick>
 80014de:	0003      	movs	r3, r0
 80014e0:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014e4:	f7fe fee0 	bl	80002a8 <HAL_GetTick>
 80014e8:	0002      	movs	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e0c0      	b.n	8001678 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014f6:	4b62      	ldr	r3, [pc, #392]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 80014f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014fa:	2202      	movs	r2, #2
 80014fc:	4013      	ands	r3, r2
 80014fe:	d0f1      	beq.n	80014e4 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001500:	4b5f      	ldr	r3, [pc, #380]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 8001502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001504:	22f8      	movs	r2, #248	; 0xf8
 8001506:	4393      	bics	r3, r2
 8001508:	0019      	movs	r1, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	00da      	lsls	r2, r3, #3
 8001510:	4b5b      	ldr	r3, [pc, #364]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 8001512:	430a      	orrs	r2, r1
 8001514:	635a      	str	r2, [r3, #52]	; 0x34
 8001516:	e034      	b.n	8001582 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	3305      	adds	r3, #5
 800151e:	d111      	bne.n	8001544 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001520:	4b57      	ldr	r3, [pc, #348]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 8001522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001524:	4b56      	ldr	r3, [pc, #344]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 8001526:	2104      	movs	r1, #4
 8001528:	438a      	bics	r2, r1
 800152a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800152c:	4b54      	ldr	r3, [pc, #336]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 800152e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001530:	22f8      	movs	r2, #248	; 0xf8
 8001532:	4393      	bics	r3, r2
 8001534:	0019      	movs	r1, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	00da      	lsls	r2, r3, #3
 800153c:	4b50      	ldr	r3, [pc, #320]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 800153e:	430a      	orrs	r2, r1
 8001540:	635a      	str	r2, [r3, #52]	; 0x34
 8001542:	e01e      	b.n	8001582 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001544:	4b4e      	ldr	r3, [pc, #312]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 8001546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001548:	4b4d      	ldr	r3, [pc, #308]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 800154a:	2104      	movs	r1, #4
 800154c:	430a      	orrs	r2, r1
 800154e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001550:	4b4b      	ldr	r3, [pc, #300]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 8001552:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001554:	4b4a      	ldr	r3, [pc, #296]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 8001556:	2101      	movs	r1, #1
 8001558:	438a      	bics	r2, r1
 800155a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155c:	f7fe fea4 	bl	80002a8 <HAL_GetTick>
 8001560:	0003      	movs	r3, r0
 8001562:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001566:	f7fe fe9f 	bl	80002a8 <HAL_GetTick>
 800156a:	0002      	movs	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e07f      	b.n	8001678 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001578:	4b41      	ldr	r3, [pc, #260]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 800157a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157c:	2202      	movs	r2, #2
 800157e:	4013      	ands	r3, r2
 8001580:	d1f1      	bne.n	8001566 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d100      	bne.n	800158c <HAL_RCC_OscConfig+0x4e0>
 800158a:	e074      	b.n	8001676 <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800158c:	4b3c      	ldr	r3, [pc, #240]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	220c      	movs	r2, #12
 8001592:	4013      	ands	r3, r2
 8001594:	2b08      	cmp	r3, #8
 8001596:	d100      	bne.n	800159a <HAL_RCC_OscConfig+0x4ee>
 8001598:	e06b      	b.n	8001672 <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d14c      	bne.n	800163c <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a2:	4b37      	ldr	r3, [pc, #220]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	4b36      	ldr	r3, [pc, #216]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 80015a8:	4938      	ldr	r1, [pc, #224]	; (800168c <HAL_RCC_OscConfig+0x5e0>)
 80015aa:	400a      	ands	r2, r1
 80015ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ae:	f7fe fe7b 	bl	80002a8 <HAL_GetTick>
 80015b2:	0003      	movs	r3, r0
 80015b4:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b8:	f7fe fe76 	bl	80002a8 <HAL_GetTick>
 80015bc:	0002      	movs	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e056      	b.n	8001678 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ca:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	049b      	lsls	r3, r3, #18
 80015d2:	4013      	ands	r3, r2
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015d6:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 80015d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015da:	220f      	movs	r2, #15
 80015dc:	4393      	bics	r3, r2
 80015de:	0019      	movs	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015e4:	4b26      	ldr	r3, [pc, #152]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 80015e6:	430a      	orrs	r2, r1
 80015e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80015ea:	4b25      	ldr	r3, [pc, #148]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4a28      	ldr	r2, [pc, #160]	; (8001690 <HAL_RCC_OscConfig+0x5e4>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	0019      	movs	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	431a      	orrs	r2, r3
 80015fe:	4b20      	ldr	r3, [pc, #128]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 8001600:	430a      	orrs	r2, r1
 8001602:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001604:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	0449      	lsls	r1, r1, #17
 800160e:	430a      	orrs	r2, r1
 8001610:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7fe fe49 	bl	80002a8 <HAL_GetTick>
 8001616:	0003      	movs	r3, r0
 8001618:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161c:	f7fe fe44 	bl	80002a8 <HAL_GetTick>
 8001620:	0002      	movs	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e024      	b.n	8001678 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	049b      	lsls	r3, r3, #18
 8001636:	4013      	ands	r3, r2
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x570>
 800163a:	e01c      	b.n	8001676 <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163c:	4b10      	ldr	r3, [pc, #64]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 8001642:	4912      	ldr	r1, [pc, #72]	; (800168c <HAL_RCC_OscConfig+0x5e0>)
 8001644:	400a      	ands	r2, r1
 8001646:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001648:	f7fe fe2e 	bl	80002a8 <HAL_GetTick>
 800164c:	0003      	movs	r3, r0
 800164e:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001652:	f7fe fe29 	bl	80002a8 <HAL_GetTick>
 8001656:	0002      	movs	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e009      	b.n	8001678 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_RCC_OscConfig+0x5d4>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	049b      	lsls	r3, r3, #18
 800166c:	4013      	ands	r3, r2
 800166e:	d1f0      	bne.n	8001652 <HAL_RCC_OscConfig+0x5a6>
 8001670:	e001      	b.n	8001676 <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	0018      	movs	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	b006      	add	sp, #24
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40021000 	.word	0x40021000
 8001684:	00001388 	.word	0x00001388
 8001688:	efffffff 	.word	0xefffffff
 800168c:	feffffff 	.word	0xfeffffff
 8001690:	ffc2ffff 	.word	0xffc2ffff

08001694 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80016a2:	4b6a      	ldr	r3, [pc, #424]	; (800184c <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2201      	movs	r2, #1
 80016a8:	4013      	ands	r3, r2
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d911      	bls.n	80016d4 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b0:	4b66      	ldr	r3, [pc, #408]	; (800184c <HAL_RCC_ClockConfig+0x1b8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2201      	movs	r2, #1
 80016b6:	4393      	bics	r3, r2
 80016b8:	0019      	movs	r1, r3
 80016ba:	4b64      	ldr	r3, [pc, #400]	; (800184c <HAL_RCC_ClockConfig+0x1b8>)
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016c2:	4b62      	ldr	r3, [pc, #392]	; (800184c <HAL_RCC_ClockConfig+0x1b8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2201      	movs	r2, #1
 80016c8:	4013      	ands	r3, r2
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0b6      	b.n	8001842 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2202      	movs	r2, #2
 80016da:	4013      	ands	r3, r2
 80016dc:	d009      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016de:	4b5c      	ldr	r3, [pc, #368]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	22f0      	movs	r2, #240	; 0xf0
 80016e4:	4393      	bics	r3, r2
 80016e6:	0019      	movs	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	4b58      	ldr	r3, [pc, #352]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	430a      	orrs	r2, r1
 80016f0:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2201      	movs	r2, #1
 80016f8:	4013      	ands	r3, r2
 80016fa:	d100      	bne.n	80016fe <HAL_RCC_ClockConfig+0x6a>
 80016fc:	e067      	b.n	80017ce <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d107      	bne.n	8001716 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	4b52      	ldr	r3, [pc, #328]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	029b      	lsls	r3, r3, #10
 800170e:	4013      	ands	r3, r2
 8001710:	d114      	bne.n	800173c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e095      	b.n	8001842 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171e:	4b4c      	ldr	r3, [pc, #304]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	049b      	lsls	r3, r3, #18
 8001726:	4013      	ands	r3, r2
 8001728:	d108      	bne.n	800173c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e089      	b.n	8001842 <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172e:	4b48      	ldr	r3, [pc, #288]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2202      	movs	r2, #2
 8001734:	4013      	ands	r3, r2
 8001736:	d101      	bne.n	800173c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e082      	b.n	8001842 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800173c:	4b44      	ldr	r3, [pc, #272]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2203      	movs	r2, #3
 8001742:	4393      	bics	r3, r2
 8001744:	0019      	movs	r1, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	4b41      	ldr	r3, [pc, #260]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	430a      	orrs	r2, r1
 800174e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001750:	f7fe fdaa 	bl	80002a8 <HAL_GetTick>
 8001754:	0003      	movs	r3, r0
 8001756:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d111      	bne.n	8001784 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001760:	e009      	b.n	8001776 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001762:	f7fe fda1 	bl	80002a8 <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	4a39      	ldr	r2, [pc, #228]	; (8001854 <HAL_RCC_ClockConfig+0x1c0>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e065      	b.n	8001842 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001776:	4b36      	ldr	r3, [pc, #216]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	220c      	movs	r2, #12
 800177c:	4013      	ands	r3, r2
 800177e:	2b04      	cmp	r3, #4
 8001780:	d1ef      	bne.n	8001762 <HAL_RCC_ClockConfig+0xce>
 8001782:	e024      	b.n	80017ce <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d11b      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800178c:	e009      	b.n	80017a2 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800178e:	f7fe fd8b 	bl	80002a8 <HAL_GetTick>
 8001792:	0002      	movs	r2, r0
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	4a2e      	ldr	r2, [pc, #184]	; (8001854 <HAL_RCC_ClockConfig+0x1c0>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e04f      	b.n	8001842 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a2:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	220c      	movs	r2, #12
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d1ef      	bne.n	800178e <HAL_RCC_ClockConfig+0xfa>
 80017ae:	e00e      	b.n	80017ce <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b0:	f7fe fd7a 	bl	80002a8 <HAL_GetTick>
 80017b4:	0002      	movs	r2, r0
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	4a26      	ldr	r2, [pc, #152]	; (8001854 <HAL_RCC_ClockConfig+0x1c0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e03e      	b.n	8001842 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017c4:	4b22      	ldr	r3, [pc, #136]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	220c      	movs	r2, #12
 80017ca:	4013      	ands	r3, r2
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80017ce:	4b1f      	ldr	r3, [pc, #124]	; (800184c <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2201      	movs	r2, #1
 80017d4:	4013      	ands	r3, r2
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d211      	bcs.n	8001800 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <HAL_RCC_ClockConfig+0x1b8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2201      	movs	r2, #1
 80017e2:	4393      	bics	r3, r2
 80017e4:	0019      	movs	r1, r3
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_RCC_ClockConfig+0x1b8>)
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <HAL_RCC_ClockConfig+0x1b8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2201      	movs	r2, #1
 80017f4:	4013      	ands	r3, r2
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d001      	beq.n	8001800 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e020      	b.n	8001842 <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2204      	movs	r2, #4
 8001806:	4013      	ands	r3, r2
 8001808:	d009      	beq.n	800181e <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4a12      	ldr	r2, [pc, #72]	; (8001858 <HAL_RCC_ClockConfig+0x1c4>)
 8001810:	4013      	ands	r3, r2
 8001812:	0019      	movs	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	430a      	orrs	r2, r1
 800181c:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800181e:	f000 f821 	bl	8001864 <HAL_RCC_GetSysClockFreq>
 8001822:	0001      	movs	r1, r0
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	220f      	movs	r2, #15
 800182c:	4013      	ands	r3, r2
 800182e:	4a0b      	ldr	r2, [pc, #44]	; (800185c <HAL_RCC_ClockConfig+0x1c8>)
 8001830:	5cd3      	ldrb	r3, [r2, r3]
 8001832:	000a      	movs	r2, r1
 8001834:	40da      	lsrs	r2, r3
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <HAL_RCC_ClockConfig+0x1cc>)
 8001838:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800183a:	2000      	movs	r0, #0
 800183c:	f7fe fd0c 	bl	8000258 <HAL_InitTick>
  
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	0018      	movs	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	b004      	add	sp, #16
 8001848:	bd80      	pop	{r7, pc}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	40022000 	.word	0x40022000
 8001850:	40021000 	.word	0x40021000
 8001854:	00001388 	.word	0x00001388
 8001858:	fffff8ff 	.word	0xfffff8ff
 800185c:	080050f8 	.word	0x080050f8
 8001860:	2000000c 	.word	0x2000000c

08001864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b08f      	sub	sp, #60	; 0x3c
 8001868:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800186a:	2314      	movs	r3, #20
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	4a2b      	ldr	r2, [pc, #172]	; (800191c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001870:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001872:	c313      	stmia	r3!, {r0, r1, r4}
 8001874:	6812      	ldr	r2, [r2, #0]
 8001876:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	4a29      	ldr	r2, [pc, #164]	; (8001920 <HAL_RCC_GetSysClockFreq+0xbc>)
 800187c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800187e:	c313      	stmia	r3!, {r0, r1, r4}
 8001880:	6812      	ldr	r2, [r2, #0]
 8001882:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001888:	2300      	movs	r3, #0
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
 800188c:	2300      	movs	r3, #0
 800188e:	637b      	str	r3, [r7, #52]	; 0x34
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001894:	2300      	movs	r3, #0
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001898:	4b22      	ldr	r3, [pc, #136]	; (8001924 <HAL_RCC_GetSysClockFreq+0xc0>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800189e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a0:	220c      	movs	r2, #12
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d002      	beq.n	80018ae <HAL_RCC_GetSysClockFreq+0x4a>
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d003      	beq.n	80018b4 <HAL_RCC_GetSysClockFreq+0x50>
 80018ac:	e02d      	b.n	800190a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018ae:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <HAL_RCC_GetSysClockFreq+0xc4>)
 80018b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018b2:	e02d      	b.n	8001910 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b6:	0c9b      	lsrs	r3, r3, #18
 80018b8:	220f      	movs	r2, #15
 80018ba:	4013      	ands	r3, r2
 80018bc:	2214      	movs	r2, #20
 80018be:	18ba      	adds	r2, r7, r2
 80018c0:	5cd3      	ldrb	r3, [r2, r3]
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80018c4:	4b17      	ldr	r3, [pc, #92]	; (8001924 <HAL_RCC_GetSysClockFreq+0xc0>)
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c8:	220f      	movs	r2, #15
 80018ca:	4013      	ands	r3, r2
 80018cc:	1d3a      	adds	r2, r7, #4
 80018ce:	5cd3      	ldrb	r3, [r2, r3]
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80018d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	025b      	lsls	r3, r3, #9
 80018d8:	4013      	ands	r3, r2
 80018da:	d009      	beq.n	80018f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80018dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018de:	4812      	ldr	r0, [pc, #72]	; (8001928 <HAL_RCC_GetSysClockFreq+0xc4>)
 80018e0:	f7fe fc1a 	bl	8000118 <__udivsi3>
 80018e4:	0003      	movs	r3, r0
 80018e6:	001a      	movs	r2, r3
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	4353      	muls	r3, r2
 80018ec:	637b      	str	r3, [r7, #52]	; 0x34
 80018ee:	e009      	b.n	8001904 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80018f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018f2:	000a      	movs	r2, r1
 80018f4:	0152      	lsls	r2, r2, #5
 80018f6:	1a52      	subs	r2, r2, r1
 80018f8:	0193      	lsls	r3, r2, #6
 80018fa:	1a9b      	subs	r3, r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	185b      	adds	r3, r3, r1
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001908:	e002      	b.n	8001910 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800190a:	4b07      	ldr	r3, [pc, #28]	; (8001928 <HAL_RCC_GetSysClockFreq+0xc4>)
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800190e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001912:	0018      	movs	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	b00f      	add	sp, #60	; 0x3c
 8001918:	bd90      	pop	{r4, r7, pc}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	08004de8 	.word	0x08004de8
 8001920:	08004df8 	.word	0x08004df8
 8001924:	40021000 	.word	0x40021000
 8001928:	007a1200 	.word	0x007a1200

0800192c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001930:	4b02      	ldr	r3, [pc, #8]	; (800193c <HAL_RCC_GetHCLKFreq+0x10>)
 8001932:	681b      	ldr	r3, [r3, #0]
}
 8001934:	0018      	movs	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	2000000c 	.word	0x2000000c

08001940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001944:	f7ff fff2 	bl	800192c <HAL_RCC_GetHCLKFreq>
 8001948:	0001      	movs	r1, r0
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_RCC_GetPCLK1Freq+0x24>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	0a1b      	lsrs	r3, r3, #8
 8001950:	2207      	movs	r2, #7
 8001952:	4013      	ands	r3, r2
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001956:	5cd3      	ldrb	r3, [r2, r3]
 8001958:	40d9      	lsrs	r1, r3
 800195a:	000b      	movs	r3, r1
}    
 800195c:	0018      	movs	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	40021000 	.word	0x40021000
 8001968:	08005108 	.word	0x08005108

0800196c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	025b      	lsls	r3, r3, #9
 8001984:	4013      	ands	r3, r2
 8001986:	d100      	bne.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001988:	e08f      	b.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800198a:	2317      	movs	r3, #23
 800198c:	18fb      	adds	r3, r7, r3
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001992:	4b5f      	ldr	r3, [pc, #380]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001994:	69da      	ldr	r2, [r3, #28]
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	055b      	lsls	r3, r3, #21
 800199a:	4013      	ands	r3, r2
 800199c:	d111      	bne.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	4b5c      	ldr	r3, [pc, #368]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019a0:	69da      	ldr	r2, [r3, #28]
 80019a2:	4b5b      	ldr	r3, [pc, #364]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	0549      	lsls	r1, r1, #21
 80019a8:	430a      	orrs	r2, r1
 80019aa:	61da      	str	r2, [r3, #28]
 80019ac:	4b58      	ldr	r3, [pc, #352]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80019ae:	69da      	ldr	r2, [r3, #28]
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	055b      	lsls	r3, r3, #21
 80019b4:	4013      	ands	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ba:	2317      	movs	r3, #23
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c2:	4b54      	ldr	r3, [pc, #336]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	2380      	movs	r3, #128	; 0x80
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4013      	ands	r3, r2
 80019cc:	d11a      	bne.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ce:	4b51      	ldr	r3, [pc, #324]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4b50      	ldr	r3, [pc, #320]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80019d4:	2180      	movs	r1, #128	; 0x80
 80019d6:	0049      	lsls	r1, r1, #1
 80019d8:	430a      	orrs	r2, r1
 80019da:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019dc:	f7fe fc64 	bl	80002a8 <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e4:	e008      	b.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e6:	f7fe fc5f 	bl	80002a8 <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b64      	cmp	r3, #100	; 0x64
 80019f2:	d901      	bls.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e087      	b.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f8:	4b46      	ldr	r3, [pc, #280]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4013      	ands	r3, r2
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a04:	4b42      	ldr	r3, [pc, #264]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a06:	6a1a      	ldr	r2, [r3, #32]
 8001a08:	23c0      	movs	r3, #192	; 0xc0
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d034      	beq.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	23c0      	movs	r3, #192	; 0xc0
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4013      	ands	r3, r2
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d02c      	beq.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a26:	4b3a      	ldr	r3, [pc, #232]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	4a3b      	ldr	r2, [pc, #236]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a30:	4b37      	ldr	r3, [pc, #220]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a32:	6a1a      	ldr	r2, [r3, #32]
 8001a34:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a36:	2180      	movs	r1, #128	; 0x80
 8001a38:	0249      	lsls	r1, r1, #9
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a3e:	4b34      	ldr	r3, [pc, #208]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a40:	6a1a      	ldr	r2, [r3, #32]
 8001a42:	4b33      	ldr	r3, [pc, #204]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a44:	4935      	ldr	r1, [pc, #212]	; (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001a46:	400a      	ands	r2, r1
 8001a48:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a4a:	4b31      	ldr	r3, [pc, #196]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2201      	movs	r2, #1
 8001a54:	4013      	ands	r3, r2
 8001a56:	d013      	beq.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7fe fc26 	bl	80002a8 <HAL_GetTick>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a60:	e009      	b.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7fe fc21 	bl	80002a8 <HAL_GetTick>
 8001a66:	0002      	movs	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	4a2c      	ldr	r2, [pc, #176]	; (8001b20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e048      	b.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a76:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a80:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	4a24      	ldr	r2, [pc, #144]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	0019      	movs	r1, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001a90:	430a      	orrs	r2, r1
 8001a92:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a94:	2317      	movs	r3, #23
 8001a96:	18fb      	adds	r3, r7, r3
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d105      	bne.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a9e:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001aa0:	69da      	ldr	r2, [r3, #28]
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001aa4:	491f      	ldr	r1, [pc, #124]	; (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001aa6:	400a      	ands	r2, r1
 8001aa8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d009      	beq.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ab4:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	2203      	movs	r2, #3
 8001aba:	4393      	bics	r3, r2
 8001abc:	0019      	movs	r1, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2220      	movs	r2, #32
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d009      	beq.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	2210      	movs	r2, #16
 8001ad8:	4393      	bics	r3, r2
 8001ada:	0019      	movs	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4013      	ands	r3, r2
 8001af0:	d009      	beq.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001af2:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	2240      	movs	r2, #64	; 0x40
 8001af8:	4393      	bics	r3, r2
 8001afa:	0019      	movs	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691a      	ldr	r2, [r3, #16]
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001b02:	430a      	orrs	r2, r1
 8001b04:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	0018      	movs	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b006      	add	sp, #24
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40007000 	.word	0x40007000
 8001b18:	fffffcff 	.word	0xfffffcff
 8001b1c:	fffeffff 	.word	0xfffeffff
 8001b20:	00001388 	.word	0x00001388
 8001b24:	efffffff 	.word	0xefffffff

08001b28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e047      	b.n	8001bca <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2269      	movs	r2, #105	; 0x69
 8001b3e:	5c9b      	ldrb	r3, [r3, r2]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d107      	bne.n	8001b56 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2268      	movs	r2, #104	; 0x68
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	0018      	movs	r0, r3
 8001b52:	f002 fc0f 	bl	8004374 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2269      	movs	r2, #105	; 0x69
 8001b5a:	2124      	movs	r1, #36	; 0x24
 8001b5c:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2101      	movs	r1, #1
 8001b6a:	438a      	bics	r2, r1
 8001b6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	0018      	movs	r0, r3
 8001b72:	f000 fa85 	bl	8002080 <UART_SetConfig>
 8001b76:	0003      	movs	r3, r0
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e024      	b.n	8001bca <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f000 fbee 	bl	800236c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	490e      	ldr	r1, [pc, #56]	; (8001bd4 <HAL_UART_Init+0xac>)
 8001b9c:	400a      	ands	r2, r1
 8001b9e:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	212a      	movs	r1, #42	; 0x2a
 8001bac:	438a      	bics	r2, r1
 8001bae:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2101      	movs	r1, #1
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f000 fc86 	bl	80024d4 <UART_CheckIdleState>
 8001bc8:	0003      	movs	r3, r0
}
 8001bca:	0018      	movs	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b002      	add	sp, #8
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	ffffb7ff 	.word	0xffffb7ff

08001bd8 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	1dbb      	adds	r3, r7, #6
 8001be6:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2269      	movs	r2, #105	; 0x69
 8001bf0:	5c9b      	ldrb	r3, [r3, r2]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b20      	cmp	r3, #32
 8001bf6:	d000      	beq.n	8001bfa <HAL_UART_Transmit+0x22>
 8001bf8:	e08c      	b.n	8001d14 <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_UART_Transmit+0x30>
 8001c00:	1dbb      	adds	r3, r7, #6
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e084      	b.n	8001d16 <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	015b      	lsls	r3, r3, #5
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d109      	bne.n	8001c2c <HAL_UART_Transmit+0x54>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d105      	bne.n	8001c2c <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2201      	movs	r2, #1
 8001c24:	4013      	ands	r3, r2
 8001c26:	d001      	beq.n	8001c2c <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e074      	b.n	8001d16 <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2268      	movs	r2, #104	; 0x68
 8001c30:	5c9b      	ldrb	r3, [r3, r2]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d101      	bne.n	8001c3a <HAL_UART_Transmit+0x62>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e06d      	b.n	8001d16 <HAL_UART_Transmit+0x13e>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2268      	movs	r2, #104	; 0x68
 8001c3e:	2101      	movs	r1, #1
 8001c40:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2269      	movs	r2, #105	; 0x69
 8001c4c:	2121      	movs	r1, #33	; 0x21
 8001c4e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001c50:	f7fe fb2a 	bl	80002a8 <HAL_GetTick>
 8001c54:	0003      	movs	r3, r0
 8001c56:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	1dba      	adds	r2, r7, #6
 8001c5c:	2150      	movs	r1, #80	; 0x50
 8001c5e:	8812      	ldrh	r2, [r2, #0]
 8001c60:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1dba      	adds	r2, r7, #6
 8001c66:	2152      	movs	r1, #82	; 0x52
 8001c68:	8812      	ldrh	r2, [r2, #0]
 8001c6a:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 8001c6c:	e035      	b.n	8001cda <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2252      	movs	r2, #82	; 0x52
 8001c72:	5a9b      	ldrh	r3, [r3, r2]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b299      	uxth	r1, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2252      	movs	r2, #82	; 0x52
 8001c7e:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	0013      	movs	r3, r2
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2180      	movs	r1, #128	; 0x80
 8001c8e:	f000 fc73 	bl	8002578 <UART_WaitOnFlagUntilTimeout>
 8001c92:	1e03      	subs	r3, r0, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e03d      	b.n	8001d16 <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	2380      	movs	r3, #128	; 0x80
 8001ca0:	015b      	lsls	r3, r3, #5
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d111      	bne.n	8001cca <HAL_UART_Transmit+0xf2>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10d      	bne.n	8001cca <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	881a      	ldrh	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	05d2      	lsls	r2, r2, #23
 8001cbc:	0dd2      	lsrs	r2, r2, #23
 8001cbe:	b292      	uxth	r2, r2
 8001cc0:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	e007      	b.n	8001cda <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	60ba      	str	r2, [r7, #8]
 8001cd0:	781a      	ldrb	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	b292      	uxth	r2, r2
 8001cd8:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2252      	movs	r2, #82	; 0x52
 8001cde:	5a9b      	ldrh	r3, [r3, r2]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1c3      	bne.n	8001c6e <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	0013      	movs	r3, r2
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2140      	movs	r1, #64	; 0x40
 8001cf4:	f000 fc40 	bl	8002578 <UART_WaitOnFlagUntilTimeout>
 8001cf8:	1e03      	subs	r3, r0, #0
 8001cfa:	d001      	beq.n	8001d00 <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e00a      	b.n	8001d16 <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2269      	movs	r2, #105	; 0x69
 8001d04:	2120      	movs	r1, #32
 8001d06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2268      	movs	r2, #104	; 0x68
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	e000      	b.n	8001d16 <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 8001d14:	2302      	movs	r3, #2
  }
}
 8001d16:	0018      	movs	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b006      	add	sp, #24
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <HAL_UART_Receive_IT>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	1dbb      	adds	r3, r7, #6
 8001d2c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	226a      	movs	r2, #106	; 0x6a
 8001d32:	5c9b      	ldrb	r3, [r3, r2]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b20      	cmp	r3, #32
 8001d38:	d000      	beq.n	8001d3c <HAL_UART_Receive_IT+0x1c>
 8001d3a:	e073      	b.n	8001e24 <HAL_UART_Receive_IT+0x104>
  {
    if((pData == NULL ) || (Size == 0U))
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_UART_Receive_IT+0x2a>
 8001d42:	1dbb      	adds	r3, r7, #6
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_UART_Receive_IT+0x2e>
    {
      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e06b      	b.n	8001e26 <HAL_UART_Receive_IT+0x106>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	015b      	lsls	r3, r3, #5
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d109      	bne.n	8001d6e <HAL_UART_Receive_IT+0x4e>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d105      	bne.n	8001d6e <HAL_UART_Receive_IT+0x4e>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2201      	movs	r2, #1
 8001d66:	4013      	ands	r3, r2
 8001d68:	d001      	beq.n	8001d6e <HAL_UART_Receive_IT+0x4e>
      {
        return  HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e05b      	b.n	8001e26 <HAL_UART_Receive_IT+0x106>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2268      	movs	r2, #104	; 0x68
 8001d72:	5c9b      	ldrb	r3, [r3, r2]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_UART_Receive_IT+0x5c>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e054      	b.n	8001e26 <HAL_UART_Receive_IT+0x106>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2268      	movs	r2, #104	; 0x68
 8001d80:	2101      	movs	r1, #1
 8001d82:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	1dba      	adds	r2, r7, #6
 8001d8e:	2158      	movs	r1, #88	; 0x58
 8001d90:	8812      	ldrh	r2, [r2, #0]
 8001d92:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	1dba      	adds	r2, r7, #6
 8001d98:	215a      	movs	r1, #90	; 0x5a
 8001d9a:	8812      	ldrh	r2, [r2, #0]
 8001d9c:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	015b      	lsls	r3, r3, #5
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d10d      	bne.n	8001dc6 <HAL_UART_Receive_IT+0xa6>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d104      	bne.n	8001dbc <HAL_UART_Receive_IT+0x9c>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	225c      	movs	r2, #92	; 0x5c
 8001db6:	491e      	ldr	r1, [pc, #120]	; (8001e30 <HAL_UART_Receive_IT+0x110>)
 8001db8:	5299      	strh	r1, [r3, r2]
 8001dba:	e015      	b.n	8001de8 <HAL_UART_Receive_IT+0xc8>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	225c      	movs	r2, #92	; 0x5c
 8001dc0:	21ff      	movs	r1, #255	; 0xff
 8001dc2:	5299      	strh	r1, [r3, r2]
 8001dc4:	e010      	b.n	8001de8 <HAL_UART_Receive_IT+0xc8>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10c      	bne.n	8001de8 <HAL_UART_Receive_IT+0xc8>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d104      	bne.n	8001de0 <HAL_UART_Receive_IT+0xc0>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	225c      	movs	r2, #92	; 0x5c
 8001dda:	21ff      	movs	r1, #255	; 0xff
 8001ddc:	5299      	strh	r1, [r3, r2]
 8001dde:	e003      	b.n	8001de8 <HAL_UART_Receive_IT+0xc8>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	225c      	movs	r2, #92	; 0x5c
 8001de4:	217f      	movs	r1, #127	; 0x7f
 8001de6:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	226a      	movs	r2, #106	; 0x6a
 8001df2:	2122      	movs	r1, #34	; 0x22
 8001df4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2268      	movs	r2, #104	; 0x68
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2101      	movs	r1, #1
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2190      	movs	r1, #144	; 0x90
 8001e1a:	0049      	lsls	r1, r1, #1
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e000      	b.n	8001e26 <HAL_UART_Receive_IT+0x106>
  }
  else
  {
    return HAL_BUSY;
 8001e24:	2302      	movs	r3, #2
  }
}
 8001e26:	0018      	movs	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b004      	add	sp, #16
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	000001ff 	.word	0x000001ff

08001e34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	220f      	movs	r2, #15
 8001e50:	4013      	ands	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10c      	bne.n	8001e74 <HAL_UART_IRQHandler+0x40>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d008      	beq.n	8001e74 <HAL_UART_IRQHandler+0x40>
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2220      	movs	r2, #32
 8001e66:	4013      	ands	r3, r2
 8001e68:	d004      	beq.n	8001e74 <HAL_UART_IRQHandler+0x40>
    {
      UART_Receive_IT(huart);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f000 fc75 	bl	800275c <UART_Receive_IT>
      return;
 8001e72:	e0ef      	b.n	8002054 <HAL_UART_IRQHandler+0x220>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d100      	bne.n	8001e84 <HAL_UART_IRQHandler+0x50>
 8001e82:	e0af      	b.n	8001fe4 <HAL_UART_IRQHandler+0x1b0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2201      	movs	r2, #1
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d105      	bne.n	8001e98 <HAL_UART_IRQHandler+0x64>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	2390      	movs	r3, #144	; 0x90
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4013      	ands	r3, r2
 8001e94:	d100      	bne.n	8001e98 <HAL_UART_IRQHandler+0x64>
 8001e96:	e0a5      	b.n	8001fe4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d00e      	beq.n	8001ebe <HAL_UART_IRQHandler+0x8a>
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d009      	beq.n	8001ebe <HAL_UART_IRQHandler+0x8a>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d00d      	beq.n	8001ee2 <HAL_UART_IRQHandler+0xae>
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d009      	beq.n	8001ee2 <HAL_UART_IRQHandler+0xae>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eda:	2204      	movs	r2, #4
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d00d      	beq.n	8001f06 <HAL_UART_IRQHandler+0xd2>
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2201      	movs	r2, #1
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d009      	beq.n	8001f06 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2204      	movs	r2, #4
 8001ef8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001efe:	2202      	movs	r2, #2
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2208      	movs	r2, #8
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d011      	beq.n	8001f32 <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	2220      	movs	r2, #32
 8001f12:	4013      	ands	r3, r2
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8001f14:	d103      	bne.n	8001f1e <HAL_UART_IRQHandler+0xea>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d009      	beq.n	8001f32 <HAL_UART_IRQHandler+0xfe>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2208      	movs	r2, #8
 8001f24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f2a:	2208      	movs	r2, #8
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d100      	bne.n	8001f3c <HAL_UART_IRQHandler+0x108>
 8001f3a:	e08a      	b.n	8002052 <HAL_UART_IRQHandler+0x21e>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	4013      	ands	r3, r2
 8001f42:	d007      	beq.n	8001f54 <HAL_UART_IRQHandler+0x120>
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	2220      	movs	r2, #32
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d003      	beq.n	8001f54 <HAL_UART_IRQHandler+0x120>
      {
        UART_Receive_IT(huart);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f000 fc04 	bl	800275c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f58:	2208      	movs	r2, #8
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d105      	bne.n	8001f6a <HAL_UART_IRQHandler+0x136>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2240      	movs	r2, #64	; 0x40
 8001f66:	4013      	ands	r3, r2
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001f68:	d032      	beq.n	8001fd0 <HAL_UART_IRQHandler+0x19c>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f000 fb4f 	bl	8002610 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2240      	movs	r2, #64	; 0x40
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d023      	beq.n	8001fc6 <HAL_UART_IRQHandler+0x192>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2140      	movs	r1, #64	; 0x40
 8001f8a:	438a      	bics	r2, r1
 8001f8c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d012      	beq.n	8001fbc <HAL_UART_IRQHandler+0x188>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f9a:	4a30      	ldr	r2, [pc, #192]	; (800205c <HAL_UART_IRQHandler+0x228>)
 8001f9c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f7fe fe8e 	bl	8000cc4 <HAL_DMA_Abort_IT>
 8001fa8:	1e03      	subs	r3, r0, #0
 8001faa:	d019      	beq.n	8001fe0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fba:	e011      	b.n	8001fe0 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f000 f856 	bl	8002070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc4:	e00c      	b.n	8001fe0 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f000 f851 	bl	8002070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fce:	e007      	b.n	8001fe0 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	f000 f84c 	bl	8002070 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 8001fde:	e038      	b.n	8002052 <HAL_UART_IRQHandler+0x21e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fe0:	46c0      	nop			; (mov r8, r8)
    return;
 8001fe2:	e036      	b.n	8002052 <HAL_UART_IRQHandler+0x21e>

  } /* End if some error occurs */

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	035b      	lsls	r3, r3, #13
 8001fea:	4013      	ands	r3, r2
 8001fec:	d016      	beq.n	800201c <HAL_UART_IRQHandler+0x1e8>
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	03db      	lsls	r3, r3, #15
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d011      	beq.n	800201c <HAL_UART_IRQHandler+0x1e8>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2280      	movs	r2, #128	; 0x80
 8001ffe:	0352      	lsls	r2, r2, #13
 8002000:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2269      	movs	r2, #105	; 0x69
 8002006:	2120      	movs	r1, #32
 8002008:	5499      	strb	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	226a      	movs	r2, #106	; 0x6a
 800200e:	2120      	movs	r1, #32
 8002010:	5499      	strb	r1, [r3, r2]
    HAL_UARTEx_WakeupCallback(huart);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	0018      	movs	r0, r3
 8002016:	f000 fc1d 	bl	8002854 <HAL_UARTEx_WakeupCallback>
    return;
 800201a:	e01b      	b.n	8002054 <HAL_UART_IRQHandler+0x220>
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2280      	movs	r2, #128	; 0x80
 8002020:	4013      	ands	r3, r2
 8002022:	d008      	beq.n	8002036 <HAL_UART_IRQHandler+0x202>
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	2280      	movs	r2, #128	; 0x80
 8002028:	4013      	ands	r3, r2
 800202a:	d004      	beq.n	8002036 <HAL_UART_IRQHandler+0x202>
  {
    UART_Transmit_IT(huart);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	0018      	movs	r0, r3
 8002030:	f000 fb23 	bl	800267a <UART_Transmit_IT>
    return;
 8002034:	e00e      	b.n	8002054 <HAL_UART_IRQHandler+0x220>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2240      	movs	r2, #64	; 0x40
 800203a:	4013      	ands	r3, r2
 800203c:	d00a      	beq.n	8002054 <HAL_UART_IRQHandler+0x220>
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	2240      	movs	r2, #64	; 0x40
 8002042:	4013      	ands	r3, r2
 8002044:	d006      	beq.n	8002054 <HAL_UART_IRQHandler+0x220>
  {
    UART_EndTransmit_IT(huart);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	0018      	movs	r0, r3
 800204a:	f000 fb6d 	bl	8002728 <UART_EndTransmit_IT>
    return;
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	e000      	b.n	8002054 <HAL_UART_IRQHandler+0x220>
    return;
 8002052:	46c0      	nop			; (mov r8, r8)
  }

}
 8002054:	46bd      	mov	sp, r7
 8002056:	b006      	add	sp, #24
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	0800264d 	.word	0x0800264d

08002060 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002068:	46c0      	nop			; (mov r8, r8)
 800206a:	46bd      	mov	sp, r7
 800206c:	b002      	add	sp, #8
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002078:	46c0      	nop			; (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	b002      	add	sp, #8
 800207e:	bd80      	pop	{r7, pc}

08002080 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002080:	b590      	push	{r4, r7, lr}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800208c:	2317      	movs	r3, #23
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	2210      	movs	r2, #16
 8002092:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8002094:	230a      	movs	r3, #10
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	2200      	movs	r2, #0
 800209a:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 800209c:	2314      	movs	r3, #20
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	2200      	movs	r2, #0
 80020a2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 80020a4:	2313      	movs	r3, #19
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4aa0      	ldr	r2, [pc, #640]	; (800234c <UART_SetConfig+0x2cc>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	0019      	movs	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4a9b      	ldr	r2, [pc, #620]	; (8002350 <UART_SetConfig+0x2d0>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	0019      	movs	r1, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699a      	ldr	r2, [r3, #24]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4a93      	ldr	r2, [pc, #588]	; (8002354 <UART_SetConfig+0x2d4>)
 8002106:	4013      	ands	r3, r2
 8002108:	0019      	movs	r1, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	430a      	orrs	r2, r1
 8002112:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a8f      	ldr	r2, [pc, #572]	; (8002358 <UART_SetConfig+0x2d8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d125      	bne.n	800216a <UART_SetConfig+0xea>
 800211e:	4b8f      	ldr	r3, [pc, #572]	; (800235c <UART_SetConfig+0x2dc>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	2203      	movs	r2, #3
 8002124:	4013      	ands	r3, r2
 8002126:	2b01      	cmp	r3, #1
 8002128:	d00f      	beq.n	800214a <UART_SetConfig+0xca>
 800212a:	d304      	bcc.n	8002136 <UART_SetConfig+0xb6>
 800212c:	2b02      	cmp	r3, #2
 800212e:	d011      	beq.n	8002154 <UART_SetConfig+0xd4>
 8002130:	2b03      	cmp	r3, #3
 8002132:	d005      	beq.n	8002140 <UART_SetConfig+0xc0>
 8002134:	e013      	b.n	800215e <UART_SetConfig+0xde>
 8002136:	2317      	movs	r3, #23
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
 800213e:	e022      	b.n	8002186 <UART_SetConfig+0x106>
 8002140:	2317      	movs	r3, #23
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	2202      	movs	r2, #2
 8002146:	701a      	strb	r2, [r3, #0]
 8002148:	e01d      	b.n	8002186 <UART_SetConfig+0x106>
 800214a:	2317      	movs	r3, #23
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	2204      	movs	r2, #4
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	e018      	b.n	8002186 <UART_SetConfig+0x106>
 8002154:	2317      	movs	r3, #23
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	2208      	movs	r2, #8
 800215a:	701a      	strb	r2, [r3, #0]
 800215c:	e013      	b.n	8002186 <UART_SetConfig+0x106>
 800215e:	2317      	movs	r3, #23
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	2210      	movs	r2, #16
 8002164:	701a      	strb	r2, [r3, #0]
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	e00d      	b.n	8002186 <UART_SetConfig+0x106>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a7c      	ldr	r2, [pc, #496]	; (8002360 <UART_SetConfig+0x2e0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d104      	bne.n	800217e <UART_SetConfig+0xfe>
 8002174:	2317      	movs	r3, #23
 8002176:	18fb      	adds	r3, r7, r3
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
 800217c:	e003      	b.n	8002186 <UART_SetConfig+0x106>
 800217e:	2317      	movs	r3, #23
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	2210      	movs	r2, #16
 8002184:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69da      	ldr	r2, [r3, #28]
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	429a      	cmp	r2, r3
 8002190:	d000      	beq.n	8002194 <UART_SetConfig+0x114>
 8002192:	e077      	b.n	8002284 <UART_SetConfig+0x204>
  {
    switch (clocksource)
 8002194:	2317      	movs	r3, #23
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d01c      	beq.n	80021d8 <UART_SetConfig+0x158>
 800219e:	dc02      	bgt.n	80021a6 <UART_SetConfig+0x126>
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <UART_SetConfig+0x130>
 80021a4:	e04f      	b.n	8002246 <UART_SetConfig+0x1c6>
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d027      	beq.n	80021fa <UART_SetConfig+0x17a>
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d039      	beq.n	8002222 <UART_SetConfig+0x1a2>
 80021ae:	e04a      	b.n	8002246 <UART_SetConfig+0x1c6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80021b0:	f7ff fbc6 	bl	8001940 <HAL_RCC_GetPCLK1Freq>
 80021b4:	0003      	movs	r3, r0
 80021b6:	005a      	lsls	r2, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	085b      	lsrs	r3, r3, #1
 80021be:	18d2      	adds	r2, r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	0019      	movs	r1, r3
 80021c6:	0010      	movs	r0, r2
 80021c8:	f7fd ffa6 	bl	8000118 <__udivsi3>
 80021cc:	0003      	movs	r3, r0
 80021ce:	001a      	movs	r2, r3
 80021d0:	2314      	movs	r3, #20
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	801a      	strh	r2, [r3, #0]
        break;
 80021d6:	e03b      	b.n	8002250 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	085b      	lsrs	r3, r3, #1
 80021de:	4a61      	ldr	r2, [pc, #388]	; (8002364 <UART_SetConfig+0x2e4>)
 80021e0:	189a      	adds	r2, r3, r2
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	0019      	movs	r1, r3
 80021e8:	0010      	movs	r0, r2
 80021ea:	f7fd ff95 	bl	8000118 <__udivsi3>
 80021ee:	0003      	movs	r3, r0
 80021f0:	001a      	movs	r2, r3
 80021f2:	2314      	movs	r3, #20
 80021f4:	18fb      	adds	r3, r7, r3
 80021f6:	801a      	strh	r2, [r3, #0]
        break;
 80021f8:	e02a      	b.n	8002250 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80021fa:	f7ff fb33 	bl	8001864 <HAL_RCC_GetSysClockFreq>
 80021fe:	0003      	movs	r3, r0
 8002200:	005a      	lsls	r2, r3, #1
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	085b      	lsrs	r3, r3, #1
 8002208:	18d2      	adds	r2, r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	0019      	movs	r1, r3
 8002210:	0010      	movs	r0, r2
 8002212:	f7fd ff81 	bl	8000118 <__udivsi3>
 8002216:	0003      	movs	r3, r0
 8002218:	001a      	movs	r2, r3
 800221a:	2314      	movs	r3, #20
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	801a      	strh	r2, [r3, #0]
        break;
 8002220:	e016      	b.n	8002250 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	085b      	lsrs	r3, r3, #1
 8002228:	2280      	movs	r2, #128	; 0x80
 800222a:	0252      	lsls	r2, r2, #9
 800222c:	189a      	adds	r2, r3, r2
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	0019      	movs	r1, r3
 8002234:	0010      	movs	r0, r2
 8002236:	f7fd ff6f 	bl	8000118 <__udivsi3>
 800223a:	0003      	movs	r3, r0
 800223c:	001a      	movs	r2, r3
 800223e:	2314      	movs	r3, #20
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	801a      	strh	r2, [r3, #0]
        break;
 8002244:	e004      	b.n	8002250 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002246:	2313      	movs	r3, #19
 8002248:	18fb      	adds	r3, r7, r3
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
        break;
 800224e:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002250:	200a      	movs	r0, #10
 8002252:	183b      	adds	r3, r7, r0
 8002254:	2414      	movs	r4, #20
 8002256:	193a      	adds	r2, r7, r4
 8002258:	8812      	ldrh	r2, [r2, #0]
 800225a:	210f      	movs	r1, #15
 800225c:	438a      	bics	r2, r1
 800225e:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002260:	193b      	adds	r3, r7, r4
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	105b      	asrs	r3, r3, #1
 8002266:	b29b      	uxth	r3, r3
 8002268:	2207      	movs	r2, #7
 800226a:	4013      	ands	r3, r2
 800226c:	b299      	uxth	r1, r3
 800226e:	183b      	adds	r3, r7, r0
 8002270:	183a      	adds	r2, r7, r0
 8002272:	8812      	ldrh	r2, [r2, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	183a      	adds	r2, r7, r0
 800227e:	8812      	ldrh	r2, [r2, #0]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	e05b      	b.n	800233c <UART_SetConfig+0x2bc>
  }
  else
  {
    switch (clocksource)
 8002284:	2317      	movs	r3, #23
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d01b      	beq.n	80022c6 <UART_SetConfig+0x246>
 800228e:	dc02      	bgt.n	8002296 <UART_SetConfig+0x216>
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <UART_SetConfig+0x220>
 8002294:	e04d      	b.n	8002332 <UART_SetConfig+0x2b2>
 8002296:	2b04      	cmp	r3, #4
 8002298:	d026      	beq.n	80022e8 <UART_SetConfig+0x268>
 800229a:	2b08      	cmp	r3, #8
 800229c:	d037      	beq.n	800230e <UART_SetConfig+0x28e>
 800229e:	e048      	b.n	8002332 <UART_SetConfig+0x2b2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80022a0:	f7ff fb4e 	bl	8001940 <HAL_RCC_GetPCLK1Freq>
 80022a4:	0002      	movs	r2, r0
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	085b      	lsrs	r3, r3, #1
 80022ac:	18d2      	adds	r2, r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	0019      	movs	r1, r3
 80022b4:	0010      	movs	r0, r2
 80022b6:	f7fd ff2f 	bl	8000118 <__udivsi3>
 80022ba:	0003      	movs	r3, r0
 80022bc:	b29a      	uxth	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	60da      	str	r2, [r3, #12]
        break;
 80022c4:	e03a      	b.n	800233c <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	085b      	lsrs	r3, r3, #1
 80022cc:	4a26      	ldr	r2, [pc, #152]	; (8002368 <UART_SetConfig+0x2e8>)
 80022ce:	189a      	adds	r2, r3, r2
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	0019      	movs	r1, r3
 80022d6:	0010      	movs	r0, r2
 80022d8:	f7fd ff1e 	bl	8000118 <__udivsi3>
 80022dc:	0003      	movs	r3, r0
 80022de:	b29a      	uxth	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60da      	str	r2, [r3, #12]
        break;
 80022e6:	e029      	b.n	800233c <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80022e8:	f7ff fabc 	bl	8001864 <HAL_RCC_GetSysClockFreq>
 80022ec:	0002      	movs	r2, r0
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	085b      	lsrs	r3, r3, #1
 80022f4:	18d2      	adds	r2, r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	0019      	movs	r1, r3
 80022fc:	0010      	movs	r0, r2
 80022fe:	f7fd ff0b 	bl	8000118 <__udivsi3>
 8002302:	0003      	movs	r3, r0
 8002304:	b29a      	uxth	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	60da      	str	r2, [r3, #12]
        break;
 800230c:	e016      	b.n	800233c <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	085b      	lsrs	r3, r3, #1
 8002314:	2280      	movs	r2, #128	; 0x80
 8002316:	0212      	lsls	r2, r2, #8
 8002318:	189a      	adds	r2, r3, r2
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	0019      	movs	r1, r3
 8002320:	0010      	movs	r0, r2
 8002322:	f7fd fef9 	bl	8000118 <__udivsi3>
 8002326:	0003      	movs	r3, r0
 8002328:	b29a      	uxth	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	60da      	str	r2, [r3, #12]
        break;
 8002330:	e004      	b.n	800233c <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002332:	2313      	movs	r3, #19
 8002334:	18fb      	adds	r3, r7, r3
 8002336:	2201      	movs	r2, #1
 8002338:	701a      	strb	r2, [r3, #0]
        break;
 800233a:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 800233c:	2313      	movs	r3, #19
 800233e:	18fb      	adds	r3, r7, r3
 8002340:	781b      	ldrb	r3, [r3, #0]

}
 8002342:	0018      	movs	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	b007      	add	sp, #28
 8002348:	bd90      	pop	{r4, r7, pc}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	ffff69f3 	.word	0xffff69f3
 8002350:	ffffcfff 	.word	0xffffcfff
 8002354:	fffff4ff 	.word	0xfffff4ff
 8002358:	40013800 	.word	0x40013800
 800235c:	40021000 	.word	0x40021000
 8002360:	40004400 	.word	0x40004400
 8002364:	00f42400 	.word	0x00f42400
 8002368:	007a1200 	.word	0x007a1200

0800236c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	2201      	movs	r2, #1
 800237a:	4013      	ands	r3, r2
 800237c:	d00b      	beq.n	8002396 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	4a4a      	ldr	r2, [pc, #296]	; (80024b0 <UART_AdvFeatureConfig+0x144>)
 8002386:	4013      	ands	r3, r2
 8002388:	0019      	movs	r1, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	2202      	movs	r2, #2
 800239c:	4013      	ands	r3, r2
 800239e:	d00b      	beq.n	80023b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4a43      	ldr	r2, [pc, #268]	; (80024b4 <UART_AdvFeatureConfig+0x148>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	0019      	movs	r1, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	2204      	movs	r2, #4
 80023be:	4013      	ands	r3, r2
 80023c0:	d00b      	beq.n	80023da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4a3b      	ldr	r2, [pc, #236]	; (80024b8 <UART_AdvFeatureConfig+0x14c>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	0019      	movs	r1, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	2208      	movs	r2, #8
 80023e0:	4013      	ands	r3, r2
 80023e2:	d00b      	beq.n	80023fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4a34      	ldr	r2, [pc, #208]	; (80024bc <UART_AdvFeatureConfig+0x150>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	0019      	movs	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	2210      	movs	r2, #16
 8002402:	4013      	ands	r3, r2
 8002404:	d00b      	beq.n	800241e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	4a2c      	ldr	r2, [pc, #176]	; (80024c0 <UART_AdvFeatureConfig+0x154>)
 800240e:	4013      	ands	r3, r2
 8002410:	0019      	movs	r1, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	2220      	movs	r2, #32
 8002424:	4013      	ands	r3, r2
 8002426:	d00b      	beq.n	8002440 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	4a25      	ldr	r2, [pc, #148]	; (80024c4 <UART_AdvFeatureConfig+0x158>)
 8002430:	4013      	ands	r3, r2
 8002432:	0019      	movs	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	2240      	movs	r2, #64	; 0x40
 8002446:	4013      	ands	r3, r2
 8002448:	d01d      	beq.n	8002486 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	4a1d      	ldr	r2, [pc, #116]	; (80024c8 <UART_AdvFeatureConfig+0x15c>)
 8002452:	4013      	ands	r3, r2
 8002454:	0019      	movs	r1, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	035b      	lsls	r3, r3, #13
 800246a:	429a      	cmp	r2, r3
 800246c:	d10b      	bne.n	8002486 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4a15      	ldr	r2, [pc, #84]	; (80024cc <UART_AdvFeatureConfig+0x160>)
 8002476:	4013      	ands	r3, r2
 8002478:	0019      	movs	r1, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	2280      	movs	r2, #128	; 0x80
 800248c:	4013      	ands	r3, r2
 800248e:	d00b      	beq.n	80024a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <UART_AdvFeatureConfig+0x164>)
 8002498:	4013      	ands	r3, r2
 800249a:	0019      	movs	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	605a      	str	r2, [r3, #4]
  }
}
 80024a8:	46c0      	nop			; (mov r8, r8)
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b002      	add	sp, #8
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	fffdffff 	.word	0xfffdffff
 80024b4:	fffeffff 	.word	0xfffeffff
 80024b8:	fffbffff 	.word	0xfffbffff
 80024bc:	ffff7fff 	.word	0xffff7fff
 80024c0:	ffffefff 	.word	0xffffefff
 80024c4:	ffffdfff 	.word	0xffffdfff
 80024c8:	ffefffff 	.word	0xffefffff
 80024cc:	ff9fffff 	.word	0xff9fffff
 80024d0:	fff7ffff 	.word	0xfff7ffff

080024d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af02      	add	r7, sp, #8
 80024da:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80024e6:	f7fd fedf 	bl	80002a8 <HAL_GetTick>
 80024ea:	0003      	movs	r3, r0
 80024ec:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a1f      	ldr	r2, [pc, #124]	; (8002570 <UART_CheckIdleState+0x9c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d129      	bne.n	800254c <UART_CheckIdleState+0x78>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2208      	movs	r2, #8
 8002500:	4013      	ands	r3, r2
 8002502:	2b08      	cmp	r3, #8
 8002504:	d10d      	bne.n	8002522 <UART_CheckIdleState+0x4e>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	0399      	lsls	r1, r3, #14
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	4b19      	ldr	r3, [pc, #100]	; (8002574 <UART_CheckIdleState+0xa0>)
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	0013      	movs	r3, r2
 8002514:	2200      	movs	r2, #0
 8002516:	f000 f82f 	bl	8002578 <UART_WaitOnFlagUntilTimeout>
 800251a:	1e03      	subs	r3, r0, #0
 800251c:	d001      	beq.n	8002522 <UART_CheckIdleState+0x4e>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e021      	b.n	8002566 <UART_CheckIdleState+0x92>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2204      	movs	r2, #4
 800252a:	4013      	ands	r3, r2
 800252c:	2b04      	cmp	r3, #4
 800252e:	d10d      	bne.n	800254c <UART_CheckIdleState+0x78>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	03d9      	lsls	r1, r3, #15
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <UART_CheckIdleState+0xa0>)
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	0013      	movs	r3, r2
 800253e:	2200      	movs	r2, #0
 8002540:	f000 f81a 	bl	8002578 <UART_WaitOnFlagUntilTimeout>
 8002544:	1e03      	subs	r3, r0, #0
 8002546:	d001      	beq.n	800254c <UART_CheckIdleState+0x78>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e00c      	b.n	8002566 <UART_CheckIdleState+0x92>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2269      	movs	r2, #105	; 0x69
 8002550:	2120      	movs	r1, #32
 8002552:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	226a      	movs	r2, #106	; 0x6a
 8002558:	2120      	movs	r1, #32
 800255a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2268      	movs	r2, #104	; 0x68
 8002560:	2100      	movs	r1, #0
 8002562:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	0018      	movs	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	b004      	add	sp, #16
 800256c:	bd80      	pop	{r7, pc}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	40013800 	.word	0x40013800
 8002574:	01ffffff 	.word	0x01ffffff

08002578 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	1dfb      	adds	r3, r7, #7
 8002586:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002588:	e02b      	b.n	80025e2 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	3301      	adds	r3, #1
 800258e:	d028      	beq.n	80025e2 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d007      	beq.n	80025a6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002596:	f7fd fe87 	bl	80002a8 <HAL_GetTick>
 800259a:	0002      	movs	r2, r0
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d21d      	bcs.n	80025e2 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4916      	ldr	r1, [pc, #88]	; (800260c <UART_WaitOnFlagUntilTimeout+0x94>)
 80025b2:	400a      	ands	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2101      	movs	r1, #1
 80025c2:	438a      	bics	r2, r1
 80025c4:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2269      	movs	r2, #105	; 0x69
 80025ca:	2120      	movs	r1, #32
 80025cc:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	226a      	movs	r2, #106	; 0x6a
 80025d2:	2120      	movs	r1, #32
 80025d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2268      	movs	r2, #104	; 0x68
 80025da:	2100      	movs	r1, #0
 80025dc:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e00f      	b.n	8002602 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	4013      	ands	r3, r2
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	425a      	negs	r2, r3
 80025f2:	4153      	adcs	r3, r2
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	001a      	movs	r2, r3
 80025f8:	1dfb      	adds	r3, r7, #7
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d0c4      	beq.n	800258a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	0018      	movs	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	b004      	add	sp, #16
 8002608:	bd80      	pop	{r7, pc}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	fffffe5f 	.word	0xfffffe5f

08002610 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4909      	ldr	r1, [pc, #36]	; (8002648 <UART_EndRxTransfer+0x38>)
 8002624:	400a      	ands	r2, r1
 8002626:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2101      	movs	r1, #1
 8002634:	438a      	bics	r2, r1
 8002636:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	226a      	movs	r2, #106	; 0x6a
 800263c:	2120      	movs	r1, #32
 800263e:	5499      	strb	r1, [r3, r2]
}
 8002640:	46c0      	nop			; (mov r8, r8)
 8002642:	46bd      	mov	sp, r7
 8002644:	b002      	add	sp, #8
 8002646:	bd80      	pop	{r7, pc}
 8002648:	fffffedf 	.word	0xfffffedf

0800264c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	225a      	movs	r2, #90	; 0x5a
 800265e:	2100      	movs	r1, #0
 8002660:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2252      	movs	r2, #82	; 0x52
 8002666:	2100      	movs	r1, #0
 8002668:	5299      	strh	r1, [r3, r2]

  HAL_UART_ErrorCallback(huart);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	0018      	movs	r0, r3
 800266e:	f7ff fcff 	bl	8002070 <HAL_UART_ErrorCallback>
}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	46bd      	mov	sp, r7
 8002676:	b004      	add	sp, #16
 8002678:	bd80      	pop	{r7, pc}

0800267a <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2269      	movs	r2, #105	; 0x69
 8002686:	5c9b      	ldrb	r3, [r3, r2]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b21      	cmp	r3, #33	; 0x21
 800268c:	d147      	bne.n	800271e <UART_Transmit_IT+0xa4>
  {
    if(huart->TxXferCount == 0U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2252      	movs	r2, #82	; 0x52
 8002692:	5a9b      	ldrh	r3, [r3, r2]
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d111      	bne.n	80026be <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2180      	movs	r1, #128	; 0x80
 80026a6:	438a      	bics	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2140      	movs	r1, #64	; 0x40
 80026b6:	430a      	orrs	r2, r1
 80026b8:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e030      	b.n	8002720 <UART_Transmit_IT+0xa6>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	2380      	movs	r3, #128	; 0x80
 80026c4:	015b      	lsls	r3, r3, #5
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d114      	bne.n	80026f4 <UART_Transmit_IT+0x7a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d110      	bne.n	80026f4 <UART_Transmit_IT+0x7a>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d6:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	881a      	ldrh	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	05d2      	lsls	r2, r2, #23
 80026e2:	0dd2      	lsrs	r2, r2, #23
 80026e4:	b292      	uxth	r2, r2
 80026e6:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ec:	1c9a      	adds	r2, r3, #2
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80026f2:	e009      	b.n	8002708 <UART_Transmit_IT+0x8e>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f8:	1c59      	adds	r1, r3, #1
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	64d1      	str	r1, [r2, #76]	; 0x4c
 80026fe:	781a      	ldrb	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	b292      	uxth	r2, r2
 8002706:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      huart->TxXferCount--;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2252      	movs	r2, #82	; 0x52
 800270c:	5a9b      	ldrh	r3, [r3, r2]
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b299      	uxth	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2252      	movs	r2, #82	; 0x52
 8002718:	5299      	strh	r1, [r3, r2]

      return HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	e000      	b.n	8002720 <UART_Transmit_IT+0xa6>
    }
  }
  else
  {
    return HAL_BUSY;
 800271e:	2302      	movs	r3, #2
  }
}
 8002720:	0018      	movs	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	b004      	add	sp, #16
 8002726:	bd80      	pop	{r7, pc}

08002728 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2140      	movs	r1, #64	; 0x40
 800273c:	438a      	bics	r2, r1
 800273e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2269      	movs	r2, #105	; 0x69
 8002744:	2120      	movs	r1, #32
 8002746:	5499      	strb	r1, [r3, r2]

  HAL_UART_TxCpltCallback(huart);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	0018      	movs	r0, r3
 800274c:	f7ff fc88 	bl	8002060 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	0018      	movs	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	b002      	add	sp, #8
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800275c:	b590      	push	{r4, r7, lr}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8002764:	230e      	movs	r3, #14
 8002766:	18fb      	adds	r3, r7, r3
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	215c      	movs	r1, #92	; 0x5c
 800276c:	5a52      	ldrh	r2, [r2, r1]
 800276e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	226a      	movs	r2, #106	; 0x6a
 8002774:	5c9b      	ldrb	r3, [r3, r2]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b22      	cmp	r3, #34	; 0x22
 800277a:	d15b      	bne.n	8002834 <UART_Receive_IT+0xd8>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	230c      	movs	r3, #12
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002786:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	015b      	lsls	r3, r3, #5
 8002790:	429a      	cmp	r2, r3
 8002792:	d116      	bne.n	80027c2 <UART_Receive_IT+0x66>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d112      	bne.n	80027c2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a0:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 80027a2:	230c      	movs	r3, #12
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	220e      	movs	r2, #14
 80027a8:	18ba      	adds	r2, r7, r2
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	8812      	ldrh	r2, [r2, #0]
 80027ae:	4013      	ands	r3, r2
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ba:	1c9a      	adds	r2, r3, #2
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	655a      	str	r2, [r3, #84]	; 0x54
 80027c0:	e010      	b.n	80027e4 <UART_Receive_IT+0x88>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80027c2:	230c      	movs	r3, #12
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	b2d9      	uxtb	r1, r3
 80027ca:	230e      	movs	r3, #14
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	b2d8      	uxtb	r0, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d6:	1c5c      	adds	r4, r3, #1
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6554      	str	r4, [r2, #84]	; 0x54
 80027dc:	0002      	movs	r2, r0
 80027de:	400a      	ands	r2, r1
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	225a      	movs	r2, #90	; 0x5a
 80027e8:	5a9b      	ldrh	r3, [r3, r2]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	215a      	movs	r1, #90	; 0x5a
 80027f4:	1c18      	adds	r0, r3, #0
 80027f6:	5250      	strh	r0, [r2, r1]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d119      	bne.n	8002830 <UART_Receive_IT+0xd4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4912      	ldr	r1, [pc, #72]	; (8002850 <UART_Receive_IT+0xf4>)
 8002808:	400a      	ands	r2, r1
 800280a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2101      	movs	r1, #1
 8002818:	438a      	bics	r2, r1
 800281a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	226a      	movs	r2, #106	; 0x6a
 8002820:	2120      	movs	r1, #32
 8002822:	5499      	strb	r1, [r3, r2]

      HAL_UART_RxCpltCallback(huart);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	0018      	movs	r0, r3
 8002828:	f001 f9b0 	bl	8003b8c <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800282c:	2300      	movs	r3, #0
 800282e:	e00a      	b.n	8002846 <UART_Receive_IT+0xea>
    }

    return HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	e008      	b.n	8002846 <UART_Receive_IT+0xea>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699a      	ldr	r2, [r3, #24]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2108      	movs	r1, #8
 8002840:	430a      	orrs	r2, r1
 8002842:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8002844:	2302      	movs	r3, #2
  }
}
 8002846:	0018      	movs	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	b005      	add	sp, #20
 800284c:	bd90      	pop	{r4, r7, pc}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	fffffedf 	.word	0xfffffedf

08002854 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800285c:	46c0      	nop			; (mov r8, r8)
 800285e:	46bd      	mov	sp, r7
 8002860:	b002      	add	sp, #8
 8002862:	bd80      	pop	{r7, pc}

08002864 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800286a:	1d3b      	adds	r3, r7, #4
 800286c:	0018      	movs	r0, r3
 800286e:	230c      	movs	r3, #12
 8002870:	001a      	movs	r2, r3
 8002872:	2100      	movs	r1, #0
 8002874:	f001 fe73 	bl	800455e <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8002878:	4b2b      	ldr	r3, [pc, #172]	; (8002928 <MX_ADC_Init+0xc4>)
 800287a:	4a2c      	ldr	r2, [pc, #176]	; (800292c <MX_ADC_Init+0xc8>)
 800287c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800287e:	4b2a      	ldr	r3, [pc, #168]	; (8002928 <MX_ADC_Init+0xc4>)
 8002880:	2200      	movs	r2, #0
 8002882:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002884:	4b28      	ldr	r3, [pc, #160]	; (8002928 <MX_ADC_Init+0xc4>)
 8002886:	2200      	movs	r2, #0
 8002888:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800288a:	4b27      	ldr	r3, [pc, #156]	; (8002928 <MX_ADC_Init+0xc4>)
 800288c:	2200      	movs	r2, #0
 800288e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002890:	4b25      	ldr	r3, [pc, #148]	; (8002928 <MX_ADC_Init+0xc4>)
 8002892:	2201      	movs	r2, #1
 8002894:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002896:	4b24      	ldr	r3, [pc, #144]	; (8002928 <MX_ADC_Init+0xc4>)
 8002898:	2204      	movs	r2, #4
 800289a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800289c:	4b22      	ldr	r3, [pc, #136]	; (8002928 <MX_ADC_Init+0xc4>)
 800289e:	2200      	movs	r2, #0
 80028a0:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80028a2:	4b21      	ldr	r3, [pc, #132]	; (8002928 <MX_ADC_Init+0xc4>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	61da      	str	r2, [r3, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 80028a8:	4b1f      	ldr	r3, [pc, #124]	; (8002928 <MX_ADC_Init+0xc4>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	621a      	str	r2, [r3, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80028ae:	4b1e      	ldr	r3, [pc, #120]	; (8002928 <MX_ADC_Init+0xc4>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028b4:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <MX_ADC_Init+0xc4>)
 80028b6:	22c2      	movs	r2, #194	; 0xc2
 80028b8:	32ff      	adds	r2, #255	; 0xff
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028bc:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <MX_ADC_Init+0xc4>)
 80028be:	2200      	movs	r2, #0
 80028c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 80028c2:	4b19      	ldr	r3, [pc, #100]	; (8002928 <MX_ADC_Init+0xc4>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80028c8:	4b17      	ldr	r3, [pc, #92]	; (8002928 <MX_ADC_Init+0xc4>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80028ce:	4b16      	ldr	r3, [pc, #88]	; (8002928 <MX_ADC_Init+0xc4>)
 80028d0:	0018      	movs	r0, r3
 80028d2:	f7fd fd11 	bl	80002f8 <HAL_ADC_Init>
 80028d6:	1e03      	subs	r3, r0, #0
 80028d8:	d001      	beq.n	80028de <MX_ADC_Init+0x7a>
  {
    Error_Handler();
 80028da:	f001 fc14 	bl	8004106 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80028de:	1d3b      	adds	r3, r7, #4
 80028e0:	220f      	movs	r2, #15
 80028e2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80028e4:	1d3b      	adds	r3, r7, #4
 80028e6:	2280      	movs	r2, #128	; 0x80
 80028e8:	0152      	lsls	r2, r2, #5
 80028ea:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	2203      	movs	r2, #3
 80028f0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80028f2:	1d3a      	adds	r2, r7, #4
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <MX_ADC_Init+0xc4>)
 80028f6:	0011      	movs	r1, r2
 80028f8:	0018      	movs	r0, r3
 80028fa:	f7fd ff7f 	bl	80007fc <HAL_ADC_ConfigChannel>
 80028fe:	1e03      	subs	r3, r0, #0
 8002900:	d001      	beq.n	8002906 <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 8002902:	f001 fc00 	bl	8004106 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	2211      	movs	r2, #17
 800290a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800290c:	1d3a      	adds	r2, r7, #4
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <MX_ADC_Init+0xc4>)
 8002910:	0011      	movs	r1, r2
 8002912:	0018      	movs	r0, r3
 8002914:	f7fd ff72 	bl	80007fc <HAL_ADC_ConfigChannel>
 8002918:	1e03      	subs	r3, r0, #0
 800291a:	d001      	beq.n	8002920 <MX_ADC_Init+0xbc>
  {
    Error_Handler();
 800291c:	f001 fbf3 	bl	8004106 <Error_Handler>
  }

}
 8002920:	46c0      	nop			; (mov r8, r8)
 8002922:	46bd      	mov	sp, r7
 8002924:	b004      	add	sp, #16
 8002926:	bd80      	pop	{r7, pc}
 8002928:	200000ec 	.word	0x200000ec
 800292c:	40012400 	.word	0x40012400

08002930 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08a      	sub	sp, #40	; 0x28
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002938:	2314      	movs	r3, #20
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	0018      	movs	r0, r3
 800293e:	2314      	movs	r3, #20
 8002940:	001a      	movs	r2, r3
 8002942:	2100      	movs	r1, #0
 8002944:	f001 fe0b 	bl	800455e <memset>
  if(adcHandle->Instance==ADC1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1d      	ldr	r2, [pc, #116]	; (80029c4 <HAL_ADC_MspInit+0x94>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d133      	bne.n	80029ba <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002952:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <HAL_ADC_MspInit+0x98>)
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <HAL_ADC_MspInit+0x98>)
 8002958:	2180      	movs	r1, #128	; 0x80
 800295a:	0089      	lsls	r1, r1, #2
 800295c:	430a      	orrs	r2, r1
 800295e:	619a      	str	r2, [r3, #24]
 8002960:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <HAL_ADC_MspInit+0x98>)
 8002962:	699a      	ldr	r2, [r3, #24]
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4013      	ands	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800296e:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <HAL_ADC_MspInit+0x98>)
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <HAL_ADC_MspInit+0x98>)
 8002974:	2180      	movs	r1, #128	; 0x80
 8002976:	0309      	lsls	r1, r1, #12
 8002978:	430a      	orrs	r2, r1
 800297a:	615a      	str	r2, [r3, #20]
 800297c:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <HAL_ADC_MspInit+0x98>)
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	031b      	lsls	r3, r3, #12
 8002984:	4013      	ands	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PC5     ------> ADC_IN15 
    */
    GPIO_InitStruct.Pin = IR_SEND_Pin;
 800298a:	2114      	movs	r1, #20
 800298c:	187b      	adds	r3, r7, r1
 800298e:	2220      	movs	r2, #32
 8002990:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002992:	187b      	adds	r3, r7, r1
 8002994:	2203      	movs	r2, #3
 8002996:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	187b      	adds	r3, r7, r1
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(IR_SEND_GPIO_Port, &GPIO_InitStruct);
 800299e:	187b      	adds	r3, r7, r1
 80029a0:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <HAL_ADC_MspInit+0x9c>)
 80029a2:	0019      	movs	r1, r3
 80029a4:	0010      	movs	r0, r2
 80029a6:	f7fe f9d3 	bl	8000d50 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80029aa:	2200      	movs	r2, #0
 80029ac:	2100      	movs	r1, #0
 80029ae:	200c      	movs	r0, #12
 80029b0:	f7fe f956 	bl	8000c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80029b4:	200c      	movs	r0, #12
 80029b6:	f7fe f968 	bl	8000c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	46bd      	mov	sp, r7
 80029be:	b00a      	add	sp, #40	; 0x28
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	40012400 	.word	0x40012400
 80029c8:	40021000 	.word	0x40021000
 80029cc:	48000800 	.word	0x48000800

080029d0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80029d0:	b590      	push	{r4, r7, lr}
 80029d2:	b089      	sub	sp, #36	; 0x24
 80029d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d6:	240c      	movs	r4, #12
 80029d8:	193b      	adds	r3, r7, r4
 80029da:	0018      	movs	r0, r3
 80029dc:	2314      	movs	r3, #20
 80029de:	001a      	movs	r2, r3
 80029e0:	2100      	movs	r1, #0
 80029e2:	f001 fdbc 	bl	800455e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e6:	4b4d      	ldr	r3, [pc, #308]	; (8002b1c <MX_GPIO_Init+0x14c>)
 80029e8:	695a      	ldr	r2, [r3, #20]
 80029ea:	4b4c      	ldr	r3, [pc, #304]	; (8002b1c <MX_GPIO_Init+0x14c>)
 80029ec:	2180      	movs	r1, #128	; 0x80
 80029ee:	0309      	lsls	r1, r1, #12
 80029f0:	430a      	orrs	r2, r1
 80029f2:	615a      	str	r2, [r3, #20]
 80029f4:	4b49      	ldr	r3, [pc, #292]	; (8002b1c <MX_GPIO_Init+0x14c>)
 80029f6:	695a      	ldr	r2, [r3, #20]
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	031b      	lsls	r3, r3, #12
 80029fc:	4013      	ands	r3, r2
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a02:	4b46      	ldr	r3, [pc, #280]	; (8002b1c <MX_GPIO_Init+0x14c>)
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	4b45      	ldr	r3, [pc, #276]	; (8002b1c <MX_GPIO_Init+0x14c>)
 8002a08:	2180      	movs	r1, #128	; 0x80
 8002a0a:	0289      	lsls	r1, r1, #10
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	615a      	str	r2, [r3, #20]
 8002a10:	4b42      	ldr	r3, [pc, #264]	; (8002b1c <MX_GPIO_Init+0x14c>)
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	029b      	lsls	r3, r3, #10
 8002a18:	4013      	ands	r3, r2
 8002a1a:	607b      	str	r3, [r7, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a1e:	4b3f      	ldr	r3, [pc, #252]	; (8002b1c <MX_GPIO_Init+0x14c>)
 8002a20:	695a      	ldr	r2, [r3, #20]
 8002a22:	4b3e      	ldr	r3, [pc, #248]	; (8002b1c <MX_GPIO_Init+0x14c>)
 8002a24:	2180      	movs	r1, #128	; 0x80
 8002a26:	02c9      	lsls	r1, r1, #11
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	615a      	str	r2, [r3, #20]
 8002a2c:	4b3b      	ldr	r3, [pc, #236]	; (8002b1c <MX_GPIO_Init+0x14c>)
 8002a2e:	695a      	ldr	r2, [r3, #20]
 8002a30:	2380      	movs	r3, #128	; 0x80
 8002a32:	02db      	lsls	r3, r3, #11
 8002a34:	4013      	ands	r3, r2
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SOLENOID_ENABLE_Pin|ELECTROMAGNET_Pin|SOLENOID_Pin|BRD_BLUE_LED_Pin, GPIO_PIN_RESET);
 8002a3a:	2387      	movs	r3, #135	; 0x87
 8002a3c:	019b      	lsls	r3, r3, #6
 8002a3e:	4838      	ldr	r0, [pc, #224]	; (8002b20 <MX_GPIO_Init+0x150>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	0019      	movs	r1, r3
 8002a44:	f7fe fb15 	bl	8001072 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|ELECTRO_ENABLE_Pin|IR_RECIEVE_Pin 
 8002a48:	4936      	ldr	r1, [pc, #216]	; (8002b24 <MX_GPIO_Init+0x154>)
 8002a4a:	2390      	movs	r3, #144	; 0x90
 8002a4c:	05db      	lsls	r3, r3, #23
 8002a4e:	2200      	movs	r2, #0
 8002a50:	0018      	movs	r0, r3
 8002a52:	f7fe fb0e 	bl	8001072 <HAL_GPIO_WritePin>
                          |BCK_GRN_LED_Pin|BCK_RED_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ELECTROMAGNET_INVERT_Pin|SOLENOID_INVERT_Pin|FRT_GRN_LED_Pin|FRT_RED_LED_Pin, GPIO_PIN_RESET);
 8002a56:	4934      	ldr	r1, [pc, #208]	; (8002b28 <MX_GPIO_Init+0x158>)
 8002a58:	4b34      	ldr	r3, [pc, #208]	; (8002b2c <MX_GPIO_Init+0x15c>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f7fe fb08 	bl	8001072 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SOLENOID_ENABLE_Pin|ELECTROMAGNET_Pin|SOLENOID_Pin|BRD_BLUE_LED_Pin;
 8002a62:	193b      	adds	r3, r7, r4
 8002a64:	2287      	movs	r2, #135	; 0x87
 8002a66:	0192      	lsls	r2, r2, #6
 8002a68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a6a:	193b      	adds	r3, r7, r4
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	193b      	adds	r3, r7, r4
 8002a72:	2200      	movs	r2, #0
 8002a74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a76:	193b      	adds	r3, r7, r4
 8002a78:	2200      	movs	r2, #0
 8002a7a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a7c:	193b      	adds	r3, r7, r4
 8002a7e:	4a28      	ldr	r2, [pc, #160]	; (8002b20 <MX_GPIO_Init+0x150>)
 8002a80:	0019      	movs	r1, r3
 8002a82:	0010      	movs	r0, r2
 8002a84:	f7fe f964 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SIDE_DOOROPEN_BTN_Pin|BTM_KEYUSED_BTN_Pin|FINGERPRINT_SENSE_Pin;
 8002a88:	193b      	adds	r3, r7, r4
 8002a8a:	4a29      	ldr	r2, [pc, #164]	; (8002b30 <MX_GPIO_Init+0x160>)
 8002a8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a8e:	193b      	adds	r3, r7, r4
 8002a90:	2200      	movs	r2, #0
 8002a92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	193b      	adds	r3, r7, r4
 8002a96:	2200      	movs	r2, #0
 8002a98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a9a:	193b      	adds	r3, r7, r4
 8002a9c:	4a20      	ldr	r2, [pc, #128]	; (8002b20 <MX_GPIO_Init+0x150>)
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	0010      	movs	r0, r2
 8002aa2:	f7fe f955 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BCK_RESET_BTN_Pin|BCK_NEWUSER_BTN_Pin;
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aac:	193b      	adds	r3, r7, r4
 8002aae:	2200      	movs	r2, #0
 8002ab0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	193b      	adds	r3, r7, r4
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab8:	193a      	adds	r2, r7, r4
 8002aba:	2390      	movs	r3, #144	; 0x90
 8002abc:	05db      	lsls	r3, r3, #23
 8002abe:	0011      	movs	r1, r2
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f7fe f945 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PAPin PAPin 
                           PAPin PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|ELECTRO_ENABLE_Pin|IR_RECIEVE_Pin 
 8002ac6:	193b      	adds	r3, r7, r4
 8002ac8:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <MX_GPIO_Init+0x154>)
 8002aca:	601a      	str	r2, [r3, #0]
                          |BCK_GRN_LED_Pin|BCK_RED_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002acc:	193b      	adds	r3, r7, r4
 8002ace:	2201      	movs	r2, #1
 8002ad0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	193b      	adds	r3, r7, r4
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad8:	193b      	adds	r3, r7, r4
 8002ada:	2200      	movs	r2, #0
 8002adc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ade:	193a      	adds	r2, r7, r4
 8002ae0:	2390      	movs	r3, #144	; 0x90
 8002ae2:	05db      	lsls	r3, r3, #23
 8002ae4:	0011      	movs	r1, r2
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f7fe f932 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ELECTROMAGNET_INVERT_Pin|SOLENOID_INVERT_Pin|FRT_GRN_LED_Pin|FRT_RED_LED_Pin;
 8002aec:	0021      	movs	r1, r4
 8002aee:	187b      	adds	r3, r7, r1
 8002af0:	4a0d      	ldr	r2, [pc, #52]	; (8002b28 <MX_GPIO_Init+0x158>)
 8002af2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af4:	187b      	adds	r3, r7, r1
 8002af6:	2201      	movs	r2, #1
 8002af8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	187b      	adds	r3, r7, r1
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b00:	187b      	adds	r3, r7, r1
 8002b02:	2200      	movs	r2, #0
 8002b04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b06:	187b      	adds	r3, r7, r1
 8002b08:	4a08      	ldr	r2, [pc, #32]	; (8002b2c <MX_GPIO_Init+0x15c>)
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	0010      	movs	r0, r2
 8002b0e:	f7fe f91f 	bl	8000d50 <HAL_GPIO_Init>

}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b009      	add	sp, #36	; 0x24
 8002b18:	bd90      	pop	{r4, r7, pc}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	48000800 	.word	0x48000800
 8002b24:	00001970 	.word	0x00001970
 8002b28:	0000c018 	.word	0x0000c018
 8002b2c:	48000400 	.word	0x48000400
 8002b30:	00000206 	.word	0x00000206

08002b34 <NVIC_SystemReset>:
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b38:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b3c:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <NVIC_SystemReset+0x18>)
 8002b3e:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <NVIC_SystemReset+0x1c>)
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8002b46:	46c0      	nop			; (mov r8, r8)
    __NOP();
 8002b48:	e7fd      	b.n	8002b46 <NVIC_SystemReset+0x12>
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	e000ed00 	.word	0xe000ed00
 8002b50:	05fa0004 	.word	0x05fa0004

08002b54 <Init_packet>:
	WORD data_checksum;
}data_packet;
//=============================

//========== FUNCTIONS ==========
struct packet Init_packet(){
 8002b54:	b590      	push	{r4, r7, lr}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
	packet Pack;
	Pack.start_code1 = 0x55;
 8002b5c:	210c      	movs	r1, #12
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	2255      	movs	r2, #85	; 0x55
 8002b62:	701a      	strb	r2, [r3, #0]
	Pack.start_code2 = 0xAA;
 8002b64:	187b      	adds	r3, r7, r1
 8002b66:	22aa      	movs	r2, #170	; 0xaa
 8002b68:	705a      	strb	r2, [r3, #1]
	Pack.device_id = 0x0001;
 8002b6a:	187b      	adds	r3, r7, r1
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	805a      	strh	r2, [r3, #2]
	return Pack;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	187a      	adds	r2, r7, r1
 8002b74:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002b76:	c313      	stmia	r3!, {r0, r1, r4}
}
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b007      	add	sp, #28
 8002b7e:	bd90      	pop	{r4, r7, pc}

08002b80 <Check_Response>:
int Check_Response(char response[12]){
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	responseParam[0] = 0;
 8002b88:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <Check_Response+0x7c>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
	responseParam[1] = 0;
 8002b8e:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <Check_Response+0x7c>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	705a      	strb	r2, [r3, #1]
	responseParam[2] = 0;
 8002b94:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <Check_Response+0x7c>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	709a      	strb	r2, [r3, #2]
	responseParam[3] = 0;
 8002b9a:	4b18      	ldr	r3, [pc, #96]	; (8002bfc <Check_Response+0x7c>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	70da      	strb	r2, [r3, #3]
	if(response[0] == 0x55 && response[1] == 0xAA && response[8] == 0x30){//ACK
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b55      	cmp	r3, #85	; 0x55
 8002ba6:	d11b      	bne.n	8002be0 <Check_Response+0x60>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3301      	adds	r3, #1
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2baa      	cmp	r3, #170	; 0xaa
 8002bb0:	d116      	bne.n	8002be0 <Check_Response+0x60>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3308      	adds	r3, #8
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b30      	cmp	r3, #48	; 0x30
 8002bba:	d111      	bne.n	8002be0 <Check_Response+0x60>
	//if((response >> 8 == 0x55AA0100) && ((response & 0xFFFFFFFF) == 0x30003001)){//ACK
		responseParam[0] = response[4]; // save these values for checking
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	791a      	ldrb	r2, [r3, #4]
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <Check_Response+0x7c>)
 8002bc2:	701a      	strb	r2, [r3, #0]
		responseParam[1] = response[5];
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	795a      	ldrb	r2, [r3, #5]
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <Check_Response+0x7c>)
 8002bca:	705a      	strb	r2, [r3, #1]
		responseParam[2] = response[6];
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	799a      	ldrb	r2, [r3, #6]
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <Check_Response+0x7c>)
 8002bd2:	709a      	strb	r2, [r3, #2]
		responseParam[3] = response[7];
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	79da      	ldrb	r2, [r3, #7]
 8002bd8:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <Check_Response+0x7c>)
 8002bda:	70da      	strb	r2, [r3, #3]
		return 1;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e008      	b.n	8002bf2 <Check_Response+0x72>
	} else if(response[8] == 0x31){
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3308      	adds	r3, #8
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b31      	cmp	r3, #49	; 0x31
 8002be8:	d102      	bne.n	8002bf0 <Check_Response+0x70>
		return -1;
 8002bea:	2301      	movs	r3, #1
 8002bec:	425b      	negs	r3, r3
 8002bee:	e000      	b.n	8002bf2 <Check_Response+0x72>
	} else { // ERROR
		return 0;
 8002bf0:	2300      	movs	r3, #0
	}
}
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b002      	add	sp, #8
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	200003ac 	.word	0x200003ac

08002c00 <calc_Checksum>:
	check = false;
	if(timer >= 200){ return 0; }
	else { return 1; }
	return 0;
}
WORD calc_Checksum(struct packet pkt){
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	1d3b      	adds	r3, r7, #4
 8002c08:	6018      	str	r0, [r3, #0]
 8002c0a:	6059      	str	r1, [r3, #4]
 8002c0c:	609a      	str	r2, [r3, #8]
	WORD chksm = 0;
 8002c0e:	2116      	movs	r1, #22
 8002c10:	187b      	adds	r3, r7, r1
 8002c12:	2200      	movs	r2, #0
 8002c14:	801a      	strh	r2, [r3, #0]
	chksm += 0x55;
 8002c16:	187b      	adds	r3, r7, r1
 8002c18:	187a      	adds	r2, r7, r1
 8002c1a:	8812      	ldrh	r2, [r2, #0]
 8002c1c:	3255      	adds	r2, #85	; 0x55
 8002c1e:	801a      	strh	r2, [r3, #0]
	chksm += 0xAA;
 8002c20:	187b      	adds	r3, r7, r1
 8002c22:	187a      	adds	r2, r7, r1
 8002c24:	8812      	ldrh	r2, [r2, #0]
 8002c26:	32aa      	adds	r2, #170	; 0xaa
 8002c28:	801a      	strh	r2, [r3, #0]
	chksm += DEVICE_ID_1; // first byte
 8002c2a:	187b      	adds	r3, r7, r1
 8002c2c:	187a      	adds	r2, r7, r1
 8002c2e:	8812      	ldrh	r2, [r2, #0]
 8002c30:	801a      	strh	r2, [r3, #0]
	chksm += DEVICE_ID_2; // second byte
 8002c32:	187b      	adds	r3, r7, r1
 8002c34:	0008      	movs	r0, r1
 8002c36:	187a      	adds	r2, r7, r1
 8002c38:	8812      	ldrh	r2, [r2, #0]
 8002c3a:	3201      	adds	r2, #1
 8002c3c:	801a      	strh	r2, [r3, #0]
	chksm += (pkt.parameter) & 0xFF; //first byte
 8002c3e:	1d3b      	adds	r3, r7, #4
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	22ff      	movs	r2, #255	; 0xff
 8002c46:	4013      	ands	r3, r2
 8002c48:	b299      	uxth	r1, r3
 8002c4a:	183b      	adds	r3, r7, r0
 8002c4c:	183a      	adds	r2, r7, r0
 8002c4e:	8812      	ldrh	r2, [r2, #0]
 8002c50:	188a      	adds	r2, r1, r2
 8002c52:	801a      	strh	r2, [r3, #0]
	chksm += (pkt.parameter >> 8) & 0xFF; // second byte
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	0a1b      	lsrs	r3, r3, #8
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	22ff      	movs	r2, #255	; 0xff
 8002c5e:	4013      	ands	r3, r2
 8002c60:	b299      	uxth	r1, r3
 8002c62:	183b      	adds	r3, r7, r0
 8002c64:	183a      	adds	r2, r7, r0
 8002c66:	8812      	ldrh	r2, [r2, #0]
 8002c68:	188a      	adds	r2, r1, r2
 8002c6a:	801a      	strh	r2, [r3, #0]
	chksm += (pkt.parameter >> 16) & 0xFF; // third byte
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	0c1b      	lsrs	r3, r3, #16
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	22ff      	movs	r2, #255	; 0xff
 8002c76:	4013      	ands	r3, r2
 8002c78:	b299      	uxth	r1, r3
 8002c7a:	183b      	adds	r3, r7, r0
 8002c7c:	183a      	adds	r2, r7, r0
 8002c7e:	8812      	ldrh	r2, [r2, #0]
 8002c80:	188a      	adds	r2, r1, r2
 8002c82:	801a      	strh	r2, [r3, #0]
	chksm += (pkt.parameter >> 24) & 0xFF; // fourth byte
 8002c84:	1d3b      	adds	r3, r7, #4
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	0e1b      	lsrs	r3, r3, #24
 8002c8a:	b299      	uxth	r1, r3
 8002c8c:	183b      	adds	r3, r7, r0
 8002c8e:	183a      	adds	r2, r7, r0
 8002c90:	8812      	ldrh	r2, [r2, #0]
 8002c92:	188a      	adds	r2, r1, r2
 8002c94:	801a      	strh	r2, [r3, #0]
	chksm += (pkt.command) & 0xFF; //first byte
 8002c96:	1d3b      	adds	r3, r7, #4
 8002c98:	891b      	ldrh	r3, [r3, #8]
 8002c9a:	22ff      	movs	r2, #255	; 0xff
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	b299      	uxth	r1, r3
 8002ca0:	183b      	adds	r3, r7, r0
 8002ca2:	183a      	adds	r2, r7, r0
 8002ca4:	8812      	ldrh	r2, [r2, #0]
 8002ca6:	188a      	adds	r2, r1, r2
 8002ca8:	801a      	strh	r2, [r3, #0]
	chksm += (pkt.command >> 8) & 0xFF; //second byte
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	891b      	ldrh	r3, [r3, #8]
 8002cae:	0a1b      	lsrs	r3, r3, #8
 8002cb0:	b299      	uxth	r1, r3
 8002cb2:	183b      	adds	r3, r7, r0
 8002cb4:	183a      	adds	r2, r7, r0
 8002cb6:	8812      	ldrh	r2, [r2, #0]
 8002cb8:	188a      	adds	r2, r1, r2
 8002cba:	801a      	strh	r2, [r3, #0]
	return chksm;
 8002cbc:	183b      	adds	r3, r7, r0
 8002cbe:	881b      	ldrh	r3, [r3, #0]
}
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b006      	add	sp, #24
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <SendtoFP>:
void SendtoFP(struct packet pkt){
 8002cc8:	b590      	push	{r4, r7, lr}
 8002cca:	b08b      	sub	sp, #44	; 0x2c
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	6018      	str	r0, [r3, #0]
 8002cd2:	6059      	str	r1, [r3, #4]
 8002cd4:	609a      	str	r2, [r3, #8]
	char output[20];
	output[0] = pkt.start_code1; //point the beginning of output to the beginning of packet
 8002cd6:	1d3b      	adds	r3, r7, #4
 8002cd8:	781a      	ldrb	r2, [r3, #0]
 8002cda:	2114      	movs	r1, #20
 8002cdc:	187b      	adds	r3, r7, r1
 8002cde:	701a      	strb	r2, [r3, #0]
	output[1] = pkt.start_code2;
 8002ce0:	1d3b      	adds	r3, r7, #4
 8002ce2:	785a      	ldrb	r2, [r3, #1]
 8002ce4:	187b      	adds	r3, r7, r1
 8002ce6:	705a      	strb	r2, [r3, #1]
	output[2] = pkt.device_id & 0xFF;
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	885b      	ldrh	r3, [r3, #2]
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	187b      	adds	r3, r7, r1
 8002cf0:	709a      	strb	r2, [r3, #2]
	output[3] = (pkt.device_id >> 8) & 0xFF;
 8002cf2:	1d3b      	adds	r3, r7, #4
 8002cf4:	885b      	ldrh	r3, [r3, #2]
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	187b      	adds	r3, r7, r1
 8002cfe:	70da      	strb	r2, [r3, #3]
	output[4] = (pkt.parameter) & 0xFF; //first byte
 8002d00:	1d3b      	adds	r3, r7, #4
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	187b      	adds	r3, r7, r1
 8002d08:	711a      	strb	r2, [r3, #4]
	output[5] = (pkt.parameter >> 8) & 0xFF; // second byte
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	187b      	adds	r3, r7, r1
 8002d14:	715a      	strb	r2, [r3, #5]
	output[6] = (pkt.parameter >> 16) & 0xFF; // third byte
 8002d16:	1d3b      	adds	r3, r7, #4
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	0c1b      	lsrs	r3, r3, #16
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	187b      	adds	r3, r7, r1
 8002d20:	719a      	strb	r2, [r3, #6]
	output[7] = (pkt.parameter >> 24) & 0xFF; // fourth byte
 8002d22:	1d3b      	adds	r3, r7, #4
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	0e1b      	lsrs	r3, r3, #24
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	187b      	adds	r3, r7, r1
 8002d2c:	71da      	strb	r2, [r3, #7]
	output[8] = (pkt.command) & 0xFF; //first byte
 8002d2e:	1d3b      	adds	r3, r7, #4
 8002d30:	891b      	ldrh	r3, [r3, #8]
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	187b      	adds	r3, r7, r1
 8002d36:	721a      	strb	r2, [r3, #8]
	output[9] = (pkt.command >> 8);// & 0xFF; //second byte
 8002d38:	1d3b      	adds	r3, r7, #4
 8002d3a:	891b      	ldrh	r3, [r3, #8]
 8002d3c:	0a1b      	lsrs	r3, r3, #8
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	187b      	adds	r3, r7, r1
 8002d44:	725a      	strb	r2, [r3, #9]
	output[10] = (pkt.checksum) & 0xFF; //first byte
 8002d46:	1d3b      	adds	r3, r7, #4
 8002d48:	895b      	ldrh	r3, [r3, #10]
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	187b      	adds	r3, r7, r1
 8002d4e:	729a      	strb	r2, [r3, #10]
	output[11] = (pkt.checksum >> 8);// & 0xFF; //second byte
 8002d50:	1d3b      	adds	r3, r7, #4
 8002d52:	895b      	ldrh	r3, [r3, #10]
 8002d54:	0a1b      	lsrs	r3, r3, #8
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	000c      	movs	r4, r1
 8002d5c:	187b      	adds	r3, r7, r1
 8002d5e:	72da      	strb	r2, [r3, #11]
	HAL_UART_Receive_IT (&huart2, Rx_data2, 12);
 8002d60:	4908      	ldr	r1, [pc, #32]	; (8002d84 <SendtoFP+0xbc>)
 8002d62:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <SendtoFP+0xc0>)
 8002d64:	220c      	movs	r2, #12
 8002d66:	0018      	movs	r0, r3
 8002d68:	f7fe ffda 	bl	8001d20 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2,(uint8_t *)output,sizeof(output),1000);
 8002d6c:	23fa      	movs	r3, #250	; 0xfa
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	0021      	movs	r1, r4
 8002d72:	1879      	adds	r1, r7, r1
 8002d74:	4804      	ldr	r0, [pc, #16]	; (8002d88 <SendtoFP+0xc0>)
 8002d76:	2214      	movs	r2, #20
 8002d78:	f7fe ff2e 	bl	8001bd8 <HAL_UART_Transmit>
}
 8002d7c:	46c0      	nop			; (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b00b      	add	sp, #44	; 0x2c
 8002d82:	bd90      	pop	{r4, r7, pc}
 8002d84:	20000138 	.word	0x20000138
 8002d88:	20000414 	.word	0x20000414

08002d8c <CMOSLED_packet>:
	close_packet.parameter = ZERO;
	close_packet.command = CMD_CLOSE;
	close_packet.checksum = calc_Checksum(close_packet);
	return(close_packet);
}
struct packet CMOSLED_packet (bool LED){
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	000a      	movs	r2, r1
 8002d96:	1cfb      	adds	r3, r7, #3
 8002d98:	701a      	strb	r2, [r3, #0]
	packet cmosled_packet = Init_packet();
 8002d9a:	230c      	movs	r3, #12
 8002d9c:	18fb      	adds	r3, r7, r3
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f7ff fed8 	bl	8002b54 <Init_packet>
	if(LED){
 8002da4:	1cfb      	adds	r3, r7, #3
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d004      	beq.n	8002db6 <CMOSLED_packet+0x2a>
		cmosled_packet.parameter = 0x1; // TURN ON LED
 8002dac:	230c      	movs	r3, #12
 8002dae:	18fb      	adds	r3, r7, r3
 8002db0:	2201      	movs	r2, #1
 8002db2:	605a      	str	r2, [r3, #4]
 8002db4:	e003      	b.n	8002dbe <CMOSLED_packet+0x32>
	}else{
		cmosled_packet.parameter = 0x0; // TURN OFF LED
 8002db6:	230c      	movs	r3, #12
 8002db8:	18fb      	adds	r3, r7, r3
 8002dba:	2200      	movs	r2, #0
 8002dbc:	605a      	str	r2, [r3, #4]
	}
	cmosled_packet.command = CMD_CMOSLED;
 8002dbe:	240c      	movs	r4, #12
 8002dc0:	193b      	adds	r3, r7, r4
 8002dc2:	2212      	movs	r2, #18
 8002dc4:	811a      	strh	r2, [r3, #8]
	cmosled_packet.checksum = calc_Checksum(cmosled_packet);
 8002dc6:	193b      	adds	r3, r7, r4
 8002dc8:	6818      	ldr	r0, [r3, #0]
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	f7ff ff17 	bl	8002c00 <calc_Checksum>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	001a      	movs	r2, r3
 8002dd6:	193b      	adds	r3, r7, r4
 8002dd8:	815a      	strh	r2, [r3, #10]
	return(cmosled_packet);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	193a      	adds	r2, r7, r4
 8002dde:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002de0:	c313      	stmia	r3!, {r0, r1, r4}
}
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b007      	add	sp, #28
 8002de8:	bd90      	pop	{r4, r7, pc}

08002dea <Getenrolled_packet>:
struct packet Getenrolled_packet (void){
 8002dea:	b590      	push	{r4, r7, lr}
 8002dec:	b087      	sub	sp, #28
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
	packet getenrolled_packet = Init_packet();
 8002df2:	240c      	movs	r4, #12
 8002df4:	193b      	adds	r3, r7, r4
 8002df6:	0018      	movs	r0, r3
 8002df8:	f7ff feac 	bl	8002b54 <Init_packet>
	getenrolled_packet.parameter = ZERO;
 8002dfc:	193b      	adds	r3, r7, r4
 8002dfe:	2200      	movs	r2, #0
 8002e00:	605a      	str	r2, [r3, #4]
	getenrolled_packet.command = CMD_ENROLLCNT;
 8002e02:	193b      	adds	r3, r7, r4
 8002e04:	2220      	movs	r2, #32
 8002e06:	811a      	strh	r2, [r3, #8]
	getenrolled_packet.checksum = calc_Checksum(getenrolled_packet);
 8002e08:	193b      	adds	r3, r7, r4
 8002e0a:	6818      	ldr	r0, [r3, #0]
 8002e0c:	6859      	ldr	r1, [r3, #4]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	f7ff fef6 	bl	8002c00 <calc_Checksum>
 8002e14:	0003      	movs	r3, r0
 8002e16:	001a      	movs	r2, r3
 8002e18:	193b      	adds	r3, r7, r4
 8002e1a:	815a      	strh	r2, [r3, #10]
	return(getenrolled_packet);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	193a      	adds	r2, r7, r4
 8002e20:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002e22:	c313      	stmia	r3!, {r0, r1, r4}
}
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b007      	add	sp, #28
 8002e2a:	bd90      	pop	{r4, r7, pc}

08002e2c <Checkenrll_packet>:
struct packet Checkenrll_packet (int ID){
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
	packet checkenrll_packet = Init_packet();
 8002e36:	240c      	movs	r4, #12
 8002e38:	193b      	adds	r3, r7, r4
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f7ff fe8a 	bl	8002b54 <Init_packet>
	checkenrll_packet.parameter = (char)ID;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	001a      	movs	r2, r3
 8002e46:	193b      	adds	r3, r7, r4
 8002e48:	605a      	str	r2, [r3, #4]
	checkenrll_packet.command = CMD_CHKENROLLED;
 8002e4a:	193b      	adds	r3, r7, r4
 8002e4c:	2221      	movs	r2, #33	; 0x21
 8002e4e:	811a      	strh	r2, [r3, #8]
	checkenrll_packet.checksum = calc_Checksum(checkenrll_packet);
 8002e50:	193b      	adds	r3, r7, r4
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	6859      	ldr	r1, [r3, #4]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	f7ff fed2 	bl	8002c00 <calc_Checksum>
 8002e5c:	0003      	movs	r3, r0
 8002e5e:	001a      	movs	r2, r3
 8002e60:	193b      	adds	r3, r7, r4
 8002e62:	815a      	strh	r2, [r3, #10]
	return(checkenrll_packet);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	193a      	adds	r2, r7, r4
 8002e68:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002e6a:	c313      	stmia	r3!, {r0, r1, r4}
}
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b007      	add	sp, #28
 8002e72:	bd90      	pop	{r4, r7, pc}

08002e74 <Enroll_packet>:
struct packet Enroll_packet (int ID){
 8002e74:	b590      	push	{r4, r7, lr}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
	packet enroll_packet = Init_packet();
 8002e7e:	240c      	movs	r4, #12
 8002e80:	193b      	adds	r3, r7, r4
 8002e82:	0018      	movs	r0, r3
 8002e84:	f7ff fe66 	bl	8002b54 <Init_packet>
	enroll_packet.parameter = (char)ID;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	001a      	movs	r2, r3
 8002e8e:	193b      	adds	r3, r7, r4
 8002e90:	605a      	str	r2, [r3, #4]
	enroll_packet.command = CMD_START_ENROLL;
 8002e92:	193b      	adds	r3, r7, r4
 8002e94:	2222      	movs	r2, #34	; 0x22
 8002e96:	811a      	strh	r2, [r3, #8]
	enroll_packet.checksum = calc_Checksum(enroll_packet);
 8002e98:	193b      	adds	r3, r7, r4
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	6859      	ldr	r1, [r3, #4]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	f7ff feae 	bl	8002c00 <calc_Checksum>
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	001a      	movs	r2, r3
 8002ea8:	193b      	adds	r3, r7, r4
 8002eaa:	815a      	strh	r2, [r3, #10]
	return(enroll_packet);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	193a      	adds	r2, r7, r4
 8002eb0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002eb2:	c313      	stmia	r3!, {r0, r1, r4}
}
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b007      	add	sp, #28
 8002eba:	bd90      	pop	{r4, r7, pc}

08002ebc <Enroll1_packet>:
struct packet Enroll1_packet (void){
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
	packet enroll1_packet = Init_packet();
 8002ec4:	240c      	movs	r4, #12
 8002ec6:	193b      	adds	r3, r7, r4
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f7ff fe43 	bl	8002b54 <Init_packet>
	enroll1_packet.parameter = ZERO;
 8002ece:	193b      	adds	r3, r7, r4
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	605a      	str	r2, [r3, #4]
	enroll1_packet.command = CMD_ENROLL1;
 8002ed4:	193b      	adds	r3, r7, r4
 8002ed6:	2223      	movs	r2, #35	; 0x23
 8002ed8:	811a      	strh	r2, [r3, #8]
	enroll1_packet.checksum = calc_Checksum(enroll1_packet);
 8002eda:	193b      	adds	r3, r7, r4
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	6859      	ldr	r1, [r3, #4]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	f7ff fe8d 	bl	8002c00 <calc_Checksum>
 8002ee6:	0003      	movs	r3, r0
 8002ee8:	001a      	movs	r2, r3
 8002eea:	193b      	adds	r3, r7, r4
 8002eec:	815a      	strh	r2, [r3, #10]
	return(enroll1_packet);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	193a      	adds	r2, r7, r4
 8002ef2:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ef4:	c313      	stmia	r3!, {r0, r1, r4}
}
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	b007      	add	sp, #28
 8002efc:	bd90      	pop	{r4, r7, pc}

08002efe <Enroll2_packet>:
struct packet Enroll2_packet (void){
 8002efe:	b590      	push	{r4, r7, lr}
 8002f00:	b087      	sub	sp, #28
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
	packet enroll2_packet = Init_packet();
 8002f06:	240c      	movs	r4, #12
 8002f08:	193b      	adds	r3, r7, r4
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f7ff fe22 	bl	8002b54 <Init_packet>
	enroll2_packet.parameter = ZERO;
 8002f10:	193b      	adds	r3, r7, r4
 8002f12:	2200      	movs	r2, #0
 8002f14:	605a      	str	r2, [r3, #4]
	enroll2_packet.command = CMD_ENROLL2;
 8002f16:	193b      	adds	r3, r7, r4
 8002f18:	2224      	movs	r2, #36	; 0x24
 8002f1a:	811a      	strh	r2, [r3, #8]
	enroll2_packet.checksum = calc_Checksum(enroll2_packet);
 8002f1c:	193b      	adds	r3, r7, r4
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	6859      	ldr	r1, [r3, #4]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	f7ff fe6c 	bl	8002c00 <calc_Checksum>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	001a      	movs	r2, r3
 8002f2c:	193b      	adds	r3, r7, r4
 8002f2e:	815a      	strh	r2, [r3, #10]
	return(enroll2_packet);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	193a      	adds	r2, r7, r4
 8002f34:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f36:	c313      	stmia	r3!, {r0, r1, r4}
}
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b007      	add	sp, #28
 8002f3e:	bd90      	pop	{r4, r7, pc}

08002f40 <Enroll3_packet>:
struct packet Enroll3_packet (void){
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	packet enroll3_packet = Init_packet();
 8002f48:	240c      	movs	r4, #12
 8002f4a:	193b      	adds	r3, r7, r4
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f7ff fe01 	bl	8002b54 <Init_packet>
	enroll3_packet.parameter = ZERO;
 8002f52:	193b      	adds	r3, r7, r4
 8002f54:	2200      	movs	r2, #0
 8002f56:	605a      	str	r2, [r3, #4]
	enroll3_packet.command = CMD_ENROLL3;
 8002f58:	193b      	adds	r3, r7, r4
 8002f5a:	2225      	movs	r2, #37	; 0x25
 8002f5c:	811a      	strh	r2, [r3, #8]
	enroll3_packet.checksum = calc_Checksum(enroll3_packet);
 8002f5e:	193b      	adds	r3, r7, r4
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	6859      	ldr	r1, [r3, #4]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	f7ff fe4b 	bl	8002c00 <calc_Checksum>
 8002f6a:	0003      	movs	r3, r0
 8002f6c:	001a      	movs	r2, r3
 8002f6e:	193b      	adds	r3, r7, r4
 8002f70:	815a      	strh	r2, [r3, #10]
	return(enroll3_packet);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	193a      	adds	r2, r7, r4
 8002f76:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f78:	c313      	stmia	r3!, {r0, r1, r4}
}
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b007      	add	sp, #28
 8002f80:	bd90      	pop	{r4, r7, pc}

08002f82 <Delete_packet>:
	fingerpress_packet.parameter = ZERO;
	fingerpress_packet.command = CMD_ISFINGER;
	fingerpress_packet.checksum = calc_Checksum(fingerpress_packet);
	return(fingerpress_packet);
}
struct packet Delete_packet (int ID){
 8002f82:	b590      	push	{r4, r7, lr}
 8002f84:	b087      	sub	sp, #28
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
	packet delete_packet = Init_packet();
 8002f8c:	240c      	movs	r4, #12
 8002f8e:	193b      	adds	r3, r7, r4
 8002f90:	0018      	movs	r0, r3
 8002f92:	f7ff fddf 	bl	8002b54 <Init_packet>
	delete_packet.parameter = ID;
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	193b      	adds	r3, r7, r4
 8002f9a:	605a      	str	r2, [r3, #4]
	delete_packet.command = CMD_DEL_ID;
 8002f9c:	193b      	adds	r3, r7, r4
 8002f9e:	2240      	movs	r2, #64	; 0x40
 8002fa0:	811a      	strh	r2, [r3, #8]
	delete_packet.checksum = calc_Checksum(delete_packet);
 8002fa2:	193b      	adds	r3, r7, r4
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	6859      	ldr	r1, [r3, #4]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	f7ff fe29 	bl	8002c00 <calc_Checksum>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	001a      	movs	r2, r3
 8002fb2:	193b      	adds	r3, r7, r4
 8002fb4:	815a      	strh	r2, [r3, #10]
	return(delete_packet);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	193a      	adds	r2, r7, r4
 8002fba:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002fbc:	c313      	stmia	r3!, {r0, r1, r4}
}
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b007      	add	sp, #28
 8002fc4:	bd90      	pop	{r4, r7, pc}

08002fc6 <Deleteall_packet>:
struct packet Deleteall_packet (void){
 8002fc6:	b590      	push	{r4, r7, lr}
 8002fc8:	b087      	sub	sp, #28
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
	packet deleteall_packet = Init_packet();
 8002fce:	240c      	movs	r4, #12
 8002fd0:	193b      	adds	r3, r7, r4
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f7ff fdbe 	bl	8002b54 <Init_packet>
	deleteall_packet.parameter = ZERO;
 8002fd8:	193b      	adds	r3, r7, r4
 8002fda:	2200      	movs	r2, #0
 8002fdc:	605a      	str	r2, [r3, #4]
	deleteall_packet.command = CMD_DEL_ALL;
 8002fde:	193b      	adds	r3, r7, r4
 8002fe0:	2241      	movs	r2, #65	; 0x41
 8002fe2:	811a      	strh	r2, [r3, #8]
	deleteall_packet.checksum = calc_Checksum(deleteall_packet);
 8002fe4:	193b      	adds	r3, r7, r4
 8002fe6:	6818      	ldr	r0, [r3, #0]
 8002fe8:	6859      	ldr	r1, [r3, #4]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	f7ff fe08 	bl	8002c00 <calc_Checksum>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	001a      	movs	r2, r3
 8002ff4:	193b      	adds	r3, r7, r4
 8002ff6:	815a      	strh	r2, [r3, #10]
	return(deleteall_packet);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	193a      	adds	r2, r7, r4
 8002ffc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ffe:	c313      	stmia	r3!, {r0, r1, r4}
}
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	46bd      	mov	sp, r7
 8003004:	b007      	add	sp, #28
 8003006:	bd90      	pop	{r4, r7, pc}

08003008 <Ident_packet>:
	verify_packet.parameter = ID;
	verify_packet.command = CMD_VERIFY;
	verify_packet.checksum = calc_Checksum(verify_packet);
	return(verify_packet);
}
struct packet Ident_packet (void){
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
	packet ident_packet = Init_packet();
 8003010:	240c      	movs	r4, #12
 8003012:	193b      	adds	r3, r7, r4
 8003014:	0018      	movs	r0, r3
 8003016:	f7ff fd9d 	bl	8002b54 <Init_packet>
	ident_packet.parameter = ZERO;
 800301a:	193b      	adds	r3, r7, r4
 800301c:	2200      	movs	r2, #0
 800301e:	605a      	str	r2, [r3, #4]
	ident_packet.command = CMD_IDENTIFY;
 8003020:	193b      	adds	r3, r7, r4
 8003022:	2251      	movs	r2, #81	; 0x51
 8003024:	811a      	strh	r2, [r3, #8]
	ident_packet.checksum = calc_Checksum(ident_packet);
 8003026:	193b      	adds	r3, r7, r4
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	f7ff fde7 	bl	8002c00 <calc_Checksum>
 8003032:	0003      	movs	r3, r0
 8003034:	001a      	movs	r2, r3
 8003036:	193b      	adds	r3, r7, r4
 8003038:	815a      	strh	r2, [r3, #10]
	return(ident_packet);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	193a      	adds	r2, r7, r4
 800303e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003040:	c313      	stmia	r3!, {r0, r1, r4}
}
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	46bd      	mov	sp, r7
 8003046:	b007      	add	sp, #28
 8003048:	bd90      	pop	{r4, r7, pc}

0800304a <Capture_packet>:
	standby_packet.parameter = ZERO;
	standby_packet.command = CMD_STANDBY;
	standby_packet.checksum = calc_Checksum(standby_packet);
	return(standby_packet);
}
struct packet Capture_packet (bool QUALITY){
 800304a:	b590      	push	{r4, r7, lr}
 800304c:	b087      	sub	sp, #28
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	000a      	movs	r2, r1
 8003054:	1cfb      	adds	r3, r7, #3
 8003056:	701a      	strb	r2, [r3, #0]
	packet capture_packet = Init_packet();
 8003058:	230c      	movs	r3, #12
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	0018      	movs	r0, r3
 800305e:	f7ff fd79 	bl	8002b54 <Init_packet>
	if(QUALITY){
 8003062:	1cfb      	adds	r3, r7, #3
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d004      	beq.n	8003074 <Capture_packet+0x2a>
		capture_packet.parameter = 0x00000001;
 800306a:	230c      	movs	r3, #12
 800306c:	18fb      	adds	r3, r7, r3
 800306e:	2201      	movs	r2, #1
 8003070:	605a      	str	r2, [r3, #4]
 8003072:	e003      	b.n	800307c <Capture_packet+0x32>
	}else{
		capture_packet.parameter = ZERO;
 8003074:	230c      	movs	r3, #12
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	2200      	movs	r2, #0
 800307a:	605a      	str	r2, [r3, #4]
	}
	capture_packet.command = CMD_CAPTURE;
 800307c:	240c      	movs	r4, #12
 800307e:	193b      	adds	r3, r7, r4
 8003080:	2260      	movs	r2, #96	; 0x60
 8003082:	811a      	strh	r2, [r3, #8]
	capture_packet.checksum = calc_Checksum(capture_packet);
 8003084:	193b      	adds	r3, r7, r4
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	6859      	ldr	r1, [r3, #4]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	f7ff fdb8 	bl	8002c00 <calc_Checksum>
 8003090:	0003      	movs	r3, r0
 8003092:	001a      	movs	r2, r3
 8003094:	193b      	adds	r3, r7, r4
 8003096:	815a      	strh	r2, [r3, #10]
	return(capture_packet);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	193a      	adds	r2, r7, r4
 800309c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800309e:	c313      	stmia	r3!, {r0, r1, r4}
}
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b007      	add	sp, #28
 80030a6:	bd90      	pop	{r4, r7, pc}

080030a8 <LED_FP>:
	check = 0; // RESET CHECK FLAG FOR NEXT TRANSMISSION NO MATTER WHAT
	return 0;
}

//TURN ON LED
bool LED_FP(int control){
 80030a8:	b590      	push	{r4, r7, lr}
 80030aa:	b08b      	sub	sp, #44	; 0x2c
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
	int timeout_counter;
	timeout_counter = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24

	if(control == 1){ SendtoFP(CMOSLED_packet(1)); }
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d10c      	bne.n	80030d4 <LED_FP+0x2c>
 80030ba:	240c      	movs	r4, #12
 80030bc:	193b      	adds	r3, r7, r4
 80030be:	2101      	movs	r1, #1
 80030c0:	0018      	movs	r0, r3
 80030c2:	f7ff fe63 	bl	8002d8c <CMOSLED_packet>
 80030c6:	193b      	adds	r3, r7, r4
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	f7ff fdfb 	bl	8002cc8 <SendtoFP>
 80030d2:	e012      	b.n	80030fa <LED_FP+0x52>
	else{ SendtoFP(CMOSLED_packet(0)); }
 80030d4:	2418      	movs	r4, #24
 80030d6:	193b      	adds	r3, r7, r4
 80030d8:	2100      	movs	r1, #0
 80030da:	0018      	movs	r0, r3
 80030dc:	f7ff fe56 	bl	8002d8c <CMOSLED_packet>
 80030e0:	193b      	adds	r3, r7, r4
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	6859      	ldr	r1, [r3, #4]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	f7ff fdee 	bl	8002cc8 <SendtoFP>

	//if(!(Wait_Response)){ return 0; }
	//return 1;
	while(check == 0 && timeout_counter < 5000){
 80030ec:	e005      	b.n	80030fa <LED_FP+0x52>
		HAL_Delay(10);
 80030ee:	200a      	movs	r0, #10
 80030f0:	f7fd f8e4 	bl	80002bc <HAL_Delay>
		timeout_counter++;
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	3301      	adds	r3, #1
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
	while(check == 0 && timeout_counter < 5000){
 80030fa:	4b08      	ldr	r3, [pc, #32]	; (800311c <LED_FP+0x74>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d103      	bne.n	800310a <LED_FP+0x62>
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	4a06      	ldr	r2, [pc, #24]	; (8003120 <LED_FP+0x78>)
 8003106:	4293      	cmp	r3, r2
 8003108:	ddf1      	ble.n	80030ee <LED_FP+0x46>
	}
	//if(timeout_counter < 200){
	//	return 1;
	//}
	check = 0; // RESET CHECK FLAG FOR NEXT TRANSMISSION NO MATTER WHAT
 800310a:	4b04      	ldr	r3, [pc, #16]	; (800311c <LED_FP+0x74>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
	return 0;
 8003110:	2300      	movs	r3, #0
}
 8003112:	0018      	movs	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	b00b      	add	sp, #44	; 0x2c
 8003118:	bd90      	pop	{r4, r7, pc}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	200000c8 	.word	0x200000c8
 8003120:	00001387 	.word	0x00001387

08003124 <Flash_LED>:

//FLASH LED
void Flash_LED(void){
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
	LED_FP(0);
 8003128:	2000      	movs	r0, #0
 800312a:	f7ff ffbd 	bl	80030a8 <LED_FP>
	HAL_Delay(100);
 800312e:	2064      	movs	r0, #100	; 0x64
 8003130:	f7fd f8c4 	bl	80002bc <HAL_Delay>
	LED_FP(1);
 8003134:	2001      	movs	r0, #1
 8003136:	f7ff ffb7 	bl	80030a8 <LED_FP>
}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <Enroll_finger>:
		return true;
	}
}

//ENROL FINGER
int Enroll_finger (void){
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b09b      	sub	sp, #108	; 0x6c
 8003144:	af00      	add	r7, sp, #0

	//DETERMINE VALID ID
	int id = 3;
 8003146:	2303      	movs	r3, #3
 8003148:	667b      	str	r3, [r7, #100]	; 0x64
	while(id < 200){
 800314a:	e01e      	b.n	800318a <Enroll_finger+0x4a>
		SendtoFP(Checkenrll_packet(id));
 800314c:	1d3b      	adds	r3, r7, #4
 800314e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003150:	0011      	movs	r1, r2
 8003152:	0018      	movs	r0, r3
 8003154:	f7ff fe6a 	bl	8002e2c <Checkenrll_packet>
 8003158:	1d3b      	adds	r3, r7, #4
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	6859      	ldr	r1, [r3, #4]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	f7ff fdb2 	bl	8002cc8 <SendtoFP>
		while(check == 0);
 8003164:	46c0      	nop			; (mov r8, r8)
 8003166:	4b83      	ldr	r3, [pc, #524]	; (8003374 <Enroll_finger+0x234>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0fb      	beq.n	8003166 <Enroll_finger+0x26>
		if(check == -1){
 800316e:	4b81      	ldr	r3, [pc, #516]	; (8003374 <Enroll_finger+0x234>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	3301      	adds	r3, #1
 8003174:	d103      	bne.n	800317e <Enroll_finger+0x3e>
			check = 0;
 8003176:	4b7f      	ldr	r3, [pc, #508]	; (8003374 <Enroll_finger+0x234>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
			break;
 800317c:	e008      	b.n	8003190 <Enroll_finger+0x50>
		}
		check = 0;
 800317e:	4b7d      	ldr	r3, [pc, #500]	; (8003374 <Enroll_finger+0x234>)
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
		//else if(check == 1){
			//return -1;
		//}
		id++;
 8003184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003186:	3301      	adds	r3, #1
 8003188:	667b      	str	r3, [r7, #100]	; 0x64
	while(id < 200){
 800318a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800318c:	2bc7      	cmp	r3, #199	; 0xc7
 800318e:	dddd      	ble.n	800314c <Enroll_finger+0xc>
	}
	if (id == 200){ return -2;} //return that we need to delete people
 8003190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003192:	2bc8      	cmp	r3, #200	; 0xc8
 8003194:	d102      	bne.n	800319c <Enroll_finger+0x5c>
 8003196:	2302      	movs	r3, #2
 8003198:	425b      	negs	r3, r3
 800319a:	e0e6      	b.n	800336a <Enroll_finger+0x22a>
	LED_FP(1);
 800319c:	2001      	movs	r0, #1
 800319e:	f7ff ff83 	bl	80030a8 <LED_FP>
	//ENROLL START
	SendtoFP(Enroll_packet(id));
 80031a2:	2410      	movs	r4, #16
 80031a4:	193b      	adds	r3, r7, r4
 80031a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80031a8:	0011      	movs	r1, r2
 80031aa:	0018      	movs	r0, r3
 80031ac:	f7ff fe62 	bl	8002e74 <Enroll_packet>
 80031b0:	193b      	adds	r3, r7, r4
 80031b2:	6818      	ldr	r0, [r3, #0]
 80031b4:	6859      	ldr	r1, [r3, #4]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	f7ff fd86 	bl	8002cc8 <SendtoFP>
	while(check == 0);	//check for ACK
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	4b6d      	ldr	r3, [pc, #436]	; (8003374 <Enroll_finger+0x234>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0fb      	beq.n	80031be <Enroll_finger+0x7e>
	if(check == 1){
 80031c6:	4b6b      	ldr	r3, [pc, #428]	; (8003374 <Enroll_finger+0x234>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d103      	bne.n	80031d6 <Enroll_finger+0x96>
		check = 0;
 80031ce:	4b69      	ldr	r3, [pc, #420]	; (8003374 <Enroll_finger+0x234>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	e006      	b.n	80031e4 <Enroll_finger+0xa4>
	}
	else if(check == -1){return -1;}
 80031d6:	4b67      	ldr	r3, [pc, #412]	; (8003374 <Enroll_finger+0x234>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3301      	adds	r3, #1
 80031dc:	d102      	bne.n	80031e4 <Enroll_finger+0xa4>
 80031de:	2301      	movs	r3, #1
 80031e0:	425b      	negs	r3, r3
 80031e2:	e0c2      	b.n	800336a <Enroll_finger+0x22a>

	//while(IsFingerPress()); //wait for finger to be placed

	//CAPTURE FINGER
	SendtoFP(Capture_packet(1));
 80031e4:	241c      	movs	r4, #28
 80031e6:	193b      	adds	r3, r7, r4
 80031e8:	2101      	movs	r1, #1
 80031ea:	0018      	movs	r0, r3
 80031ec:	f7ff ff2d 	bl	800304a <Capture_packet>
 80031f0:	193b      	adds	r3, r7, r4
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	6859      	ldr	r1, [r3, #4]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	f7ff fd66 	bl	8002cc8 <SendtoFP>
	while(check == 0);	//check for ACK
 80031fc:	46c0      	nop			; (mov r8, r8)
 80031fe:	4b5d      	ldr	r3, [pc, #372]	; (8003374 <Enroll_finger+0x234>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0fb      	beq.n	80031fe <Enroll_finger+0xbe>
	if(check == 1){
 8003206:	4b5b      	ldr	r3, [pc, #364]	; (8003374 <Enroll_finger+0x234>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d103      	bne.n	8003216 <Enroll_finger+0xd6>
		check = 0;
 800320e:	4b59      	ldr	r3, [pc, #356]	; (8003374 <Enroll_finger+0x234>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	e006      	b.n	8003224 <Enroll_finger+0xe4>
	}
	else if(check == -1){return -1;}
 8003216:	4b57      	ldr	r3, [pc, #348]	; (8003374 <Enroll_finger+0x234>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	3301      	adds	r3, #1
 800321c:	d102      	bne.n	8003224 <Enroll_finger+0xe4>
 800321e:	2301      	movs	r3, #1
 8003220:	425b      	negs	r3, r3
 8003222:	e0a2      	b.n	800336a <Enroll_finger+0x22a>

	//ENROLL1
	SendtoFP(Enroll1_packet());
 8003224:	2428      	movs	r4, #40	; 0x28
 8003226:	193b      	adds	r3, r7, r4
 8003228:	0018      	movs	r0, r3
 800322a:	f7ff fe47 	bl	8002ebc <Enroll1_packet>
 800322e:	193b      	adds	r3, r7, r4
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	6859      	ldr	r1, [r3, #4]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	f7ff fd47 	bl	8002cc8 <SendtoFP>
	while(check == 0);	//check for ACK
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	4b4d      	ldr	r3, [pc, #308]	; (8003374 <Enroll_finger+0x234>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0fb      	beq.n	800323c <Enroll_finger+0xfc>
	if(check == 1){
 8003244:	4b4b      	ldr	r3, [pc, #300]	; (8003374 <Enroll_finger+0x234>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d103      	bne.n	8003254 <Enroll_finger+0x114>
		check = 0;
 800324c:	4b49      	ldr	r3, [pc, #292]	; (8003374 <Enroll_finger+0x234>)
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	e006      	b.n	8003262 <Enroll_finger+0x122>
	}
	else if(check == -1){return -1;}
 8003254:	4b47      	ldr	r3, [pc, #284]	; (8003374 <Enroll_finger+0x234>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3301      	adds	r3, #1
 800325a:	d102      	bne.n	8003262 <Enroll_finger+0x122>
 800325c:	2301      	movs	r3, #1
 800325e:	425b      	negs	r3, r3
 8003260:	e083      	b.n	800336a <Enroll_finger+0x22a>
	//while(!IsFingerPress()); //wait for finger to be lifted off
	//HAL_Delay(1000);
	//while(!HAL_GPIO_ReadPin(GPIOA, BCK_RESET_BTN_Pin)); // TEMP USING BUTTON

	//CAPTURE FINGER
	SendtoFP(Capture_packet(1));
 8003262:	2434      	movs	r4, #52	; 0x34
 8003264:	193b      	adds	r3, r7, r4
 8003266:	2101      	movs	r1, #1
 8003268:	0018      	movs	r0, r3
 800326a:	f7ff feee 	bl	800304a <Capture_packet>
 800326e:	193b      	adds	r3, r7, r4
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	6859      	ldr	r1, [r3, #4]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	f7ff fd27 	bl	8002cc8 <SendtoFP>
	while(check == 0);	//check for ACK
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	4b3d      	ldr	r3, [pc, #244]	; (8003374 <Enroll_finger+0x234>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0fb      	beq.n	800327c <Enroll_finger+0x13c>
	if(check == 1){
 8003284:	4b3b      	ldr	r3, [pc, #236]	; (8003374 <Enroll_finger+0x234>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d103      	bne.n	8003294 <Enroll_finger+0x154>
		check = 0;
 800328c:	4b39      	ldr	r3, [pc, #228]	; (8003374 <Enroll_finger+0x234>)
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	e006      	b.n	80032a2 <Enroll_finger+0x162>
	}
	else if(check == -1){return -1;}
 8003294:	4b37      	ldr	r3, [pc, #220]	; (8003374 <Enroll_finger+0x234>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3301      	adds	r3, #1
 800329a:	d102      	bne.n	80032a2 <Enroll_finger+0x162>
 800329c:	2301      	movs	r3, #1
 800329e:	425b      	negs	r3, r3
 80032a0:	e063      	b.n	800336a <Enroll_finger+0x22a>

	//ENROLL2
	SendtoFP(Enroll2_packet());
 80032a2:	2440      	movs	r4, #64	; 0x40
 80032a4:	193b      	adds	r3, r7, r4
 80032a6:	0018      	movs	r0, r3
 80032a8:	f7ff fe29 	bl	8002efe <Enroll2_packet>
 80032ac:	193b      	adds	r3, r7, r4
 80032ae:	6818      	ldr	r0, [r3, #0]
 80032b0:	6859      	ldr	r1, [r3, #4]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	f7ff fd08 	bl	8002cc8 <SendtoFP>
	while(check == 0);	//check for ACK
 80032b8:	46c0      	nop			; (mov r8, r8)
 80032ba:	4b2e      	ldr	r3, [pc, #184]	; (8003374 <Enroll_finger+0x234>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0fb      	beq.n	80032ba <Enroll_finger+0x17a>
	if(check == 1){
 80032c2:	4b2c      	ldr	r3, [pc, #176]	; (8003374 <Enroll_finger+0x234>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d103      	bne.n	80032d2 <Enroll_finger+0x192>
		check = 0;
 80032ca:	4b2a      	ldr	r3, [pc, #168]	; (8003374 <Enroll_finger+0x234>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	e006      	b.n	80032e0 <Enroll_finger+0x1a0>
	}
	else if(check == -1){return -1;}
 80032d2:	4b28      	ldr	r3, [pc, #160]	; (8003374 <Enroll_finger+0x234>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3301      	adds	r3, #1
 80032d8:	d102      	bne.n	80032e0 <Enroll_finger+0x1a0>
 80032da:	2301      	movs	r3, #1
 80032dc:	425b      	negs	r3, r3
 80032de:	e044      	b.n	800336a <Enroll_finger+0x22a>
	//Flash_LED();
	//HAL_Delay(1000);
	//while(!HAL_GPIO_ReadPin(GPIOA, BCK_RESET_BTN_Pin));

	//CAPTURE FINGER
	SendtoFP(Capture_packet(1));
 80032e0:	244c      	movs	r4, #76	; 0x4c
 80032e2:	193b      	adds	r3, r7, r4
 80032e4:	2101      	movs	r1, #1
 80032e6:	0018      	movs	r0, r3
 80032e8:	f7ff feaf 	bl	800304a <Capture_packet>
 80032ec:	193b      	adds	r3, r7, r4
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	6859      	ldr	r1, [r3, #4]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	f7ff fce8 	bl	8002cc8 <SendtoFP>
	while(check == 0);	//check for ACK
 80032f8:	46c0      	nop			; (mov r8, r8)
 80032fa:	4b1e      	ldr	r3, [pc, #120]	; (8003374 <Enroll_finger+0x234>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0fb      	beq.n	80032fa <Enroll_finger+0x1ba>
	if(check == 1){
 8003302:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <Enroll_finger+0x234>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d103      	bne.n	8003312 <Enroll_finger+0x1d2>
		check = 0;
 800330a:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <Enroll_finger+0x234>)
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	e006      	b.n	8003320 <Enroll_finger+0x1e0>
	}
	else if(check == -1){return -1;}
 8003312:	4b18      	ldr	r3, [pc, #96]	; (8003374 <Enroll_finger+0x234>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3301      	adds	r3, #1
 8003318:	d102      	bne.n	8003320 <Enroll_finger+0x1e0>
 800331a:	2301      	movs	r3, #1
 800331c:	425b      	negs	r3, r3
 800331e:	e024      	b.n	800336a <Enroll_finger+0x22a>

	//ENROLL3
	SendtoFP(Enroll3_packet());
 8003320:	2458      	movs	r4, #88	; 0x58
 8003322:	193b      	adds	r3, r7, r4
 8003324:	0018      	movs	r0, r3
 8003326:	f7ff fe0b 	bl	8002f40 <Enroll3_packet>
 800332a:	193b      	adds	r3, r7, r4
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	6859      	ldr	r1, [r3, #4]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	f7ff fcc9 	bl	8002cc8 <SendtoFP>
	while(check == 0);	//check for ACK
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <Enroll_finger+0x234>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0fb      	beq.n	8003338 <Enroll_finger+0x1f8>
	if(check == 1){
 8003340:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <Enroll_finger+0x234>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d103      	bne.n	8003350 <Enroll_finger+0x210>
		check = 0;
 8003348:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <Enroll_finger+0x234>)
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	e006      	b.n	800335e <Enroll_finger+0x21e>
	}
	else if(check == -1){return -1;}
 8003350:	4b08      	ldr	r3, [pc, #32]	; (8003374 <Enroll_finger+0x234>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3301      	adds	r3, #1
 8003356:	d102      	bne.n	800335e <Enroll_finger+0x21e>
 8003358:	2301      	movs	r3, #1
 800335a:	425b      	negs	r3, r3
 800335c:	e005      	b.n	800336a <Enroll_finger+0x22a>

	Flash_LED();
 800335e:	f7ff fee1 	bl	8003124 <Flash_LED>
	LED_FP(0);
 8003362:	2000      	movs	r0, #0
 8003364:	f7ff fea0 	bl	80030a8 <LED_FP>
	return(id);
 8003368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 800336a:	0018      	movs	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	b01b      	add	sp, #108	; 0x6c
 8003370:	bd90      	pop	{r4, r7, pc}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	200000c8 	.word	0x200000c8

08003378 <Identify_finger>:

int Identify_finger (void){
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	b089      	sub	sp, #36	; 0x24
 800337c:	af00      	add	r7, sp, #0
	int id = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
	LED_FP(1);
 8003382:	2001      	movs	r0, #1
 8003384:	f7ff fe90 	bl	80030a8 <LED_FP>
	SendtoFP(Capture_packet(1));
 8003388:	1d3b      	adds	r3, r7, #4
 800338a:	2101      	movs	r1, #1
 800338c:	0018      	movs	r0, r3
 800338e:	f7ff fe5c 	bl	800304a <Capture_packet>
 8003392:	1d3b      	adds	r3, r7, #4
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	6859      	ldr	r1, [r3, #4]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	f7ff fc95 	bl	8002cc8 <SendtoFP>
	while(check == 0);	//check for ACK
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	4b2b      	ldr	r3, [pc, #172]	; (8003450 <Identify_finger+0xd8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0fb      	beq.n	80033a0 <Identify_finger+0x28>
	if(check == 1){
 80033a8:	4b29      	ldr	r3, [pc, #164]	; (8003450 <Identify_finger+0xd8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d102      	bne.n	80033b6 <Identify_finger+0x3e>
		check = 0;
 80033b0:	4b27      	ldr	r3, [pc, #156]	; (8003450 <Identify_finger+0xd8>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
	}
	LED_FP(0);
 80033b6:	2000      	movs	r0, #0
 80033b8:	f7ff fe76 	bl	80030a8 <LED_FP>
	SendtoFP(Ident_packet());
 80033bc:	2410      	movs	r4, #16
 80033be:	193b      	adds	r3, r7, r4
 80033c0:	0018      	movs	r0, r3
 80033c2:	f7ff fe21 	bl	8003008 <Ident_packet>
 80033c6:	193b      	adds	r3, r7, r4
 80033c8:	6818      	ldr	r0, [r3, #0]
 80033ca:	6859      	ldr	r1, [r3, #4]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	f7ff fc7b 	bl	8002cc8 <SendtoFP>
	while(check == 0);	//check for ACK
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	4b1e      	ldr	r3, [pc, #120]	; (8003450 <Identify_finger+0xd8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0fb      	beq.n	80033d4 <Identify_finger+0x5c>
	if(check == 1){
 80033dc:	4b1c      	ldr	r3, [pc, #112]	; (8003450 <Identify_finger+0xd8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d102      	bne.n	80033ea <Identify_finger+0x72>
		check = 0;
 80033e4:	4b1a      	ldr	r3, [pc, #104]	; (8003450 <Identify_finger+0xd8>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
	}
	//Convert hex response to int
	id = id + (int)responseParam[0];
 80033ea:	4b1a      	ldr	r3, [pc, #104]	; (8003454 <Identify_finger+0xdc>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	001a      	movs	r2, r3
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	189b      	adds	r3, r3, r2
 80033f4:	61fb      	str	r3, [r7, #28]
	id = id + ((int)responseParam[1] * 16);
 80033f6:	4b17      	ldr	r3, [pc, #92]	; (8003454 <Identify_finger+0xdc>)
 80033f8:	785b      	ldrb	r3, [r3, #1]
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	18d3      	adds	r3, r2, r3
 8003400:	61fb      	str	r3, [r7, #28]
	id = id + ((int)responseParam[2] * 24);
 8003402:	4b14      	ldr	r3, [pc, #80]	; (8003454 <Identify_finger+0xdc>)
 8003404:	789b      	ldrb	r3, [r3, #2]
 8003406:	001a      	movs	r2, r3
 8003408:	0013      	movs	r3, r2
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	189b      	adds	r3, r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	001a      	movs	r2, r3
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	189b      	adds	r3, r3, r2
 8003416:	61fb      	str	r3, [r7, #28]
	id = id + ((int)responseParam[3] * 32);
 8003418:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <Identify_finger+0xdc>)
 800341a:	78db      	ldrb	r3, [r3, #3]
 800341c:	015b      	lsls	r3, r3, #5
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	18d3      	adds	r3, r2, r3
 8003422:	61fb      	str	r3, [r7, #28]
	//if(id > 0){
	//	for(int i = 0; i < id; i++){
	//		Flash_LED();
	//	}
	//}
	HAL_GPIO_WritePin(GPIOA, BCK_RED_LED_Pin, GPIO_PIN_RESET);
 8003424:	2380      	movs	r3, #128	; 0x80
 8003426:	0159      	lsls	r1, r3, #5
 8003428:	2390      	movs	r3, #144	; 0x90
 800342a:	05db      	lsls	r3, r3, #23
 800342c:	2200      	movs	r2, #0
 800342e:	0018      	movs	r0, r3
 8003430:	f7fd fe1f 	bl	8001072 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BCK_GRN_LED_Pin, GPIO_PIN_RESET);
 8003434:	2380      	movs	r3, #128	; 0x80
 8003436:	0119      	lsls	r1, r3, #4
 8003438:	2390      	movs	r3, #144	; 0x90
 800343a:	05db      	lsls	r3, r3, #23
 800343c:	2200      	movs	r2, #0
 800343e:	0018      	movs	r0, r3
 8003440:	f7fd fe17 	bl	8001072 <HAL_GPIO_WritePin>
	return id;
 8003444:	69fb      	ldr	r3, [r7, #28]
}
 8003446:	0018      	movs	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	b009      	add	sp, #36	; 0x24
 800344c:	bd90      	pop	{r4, r7, pc}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	200000c8 	.word	0x200000c8
 8003454:	200003ac 	.word	0x200003ac

08003458 <Check_DB>:

int Check_DB (void){
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
	int ids = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
	SendtoFP(Getenrolled_packet());
 8003462:	003b      	movs	r3, r7
 8003464:	0018      	movs	r0, r3
 8003466:	f7ff fcc0 	bl	8002dea <Getenrolled_packet>
 800346a:	003b      	movs	r3, r7
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	6859      	ldr	r1, [r3, #4]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	f7ff fc29 	bl	8002cc8 <SendtoFP>
	while(check == 0);	//check for ACK
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	4b18      	ldr	r3, [pc, #96]	; (80034dc <Check_DB+0x84>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0fb      	beq.n	8003478 <Check_DB+0x20>
	if(check == 1){
 8003480:	4b16      	ldr	r3, [pc, #88]	; (80034dc <Check_DB+0x84>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d102      	bne.n	800348e <Check_DB+0x36>
		check = 0;
 8003488:	4b14      	ldr	r3, [pc, #80]	; (80034dc <Check_DB+0x84>)
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
	}
	//Convert hex response to int
	ids = ids + (int)responseParam[0];
 800348e:	4b14      	ldr	r3, [pc, #80]	; (80034e0 <Check_DB+0x88>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	001a      	movs	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	189b      	adds	r3, r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
	ids = ids + ((int)responseParam[1] * 16);
 800349a:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <Check_DB+0x88>)
 800349c:	785b      	ldrb	r3, [r3, #1]
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	18d3      	adds	r3, r2, r3
 80034a4:	60fb      	str	r3, [r7, #12]
	ids = ids + ((int)responseParam[2] * 24);
 80034a6:	4b0e      	ldr	r3, [pc, #56]	; (80034e0 <Check_DB+0x88>)
 80034a8:	789b      	ldrb	r3, [r3, #2]
 80034aa:	001a      	movs	r2, r3
 80034ac:	0013      	movs	r3, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	189b      	adds	r3, r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	001a      	movs	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	189b      	adds	r3, r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
	ids = ids + ((int)responseParam[3] * 32);
 80034bc:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <Check_DB+0x88>)
 80034be:	78db      	ldrb	r3, [r3, #3]
 80034c0:	015b      	lsls	r3, r3, #5
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	18d3      	adds	r3, r2, r3
 80034c6:	60fb      	str	r3, [r7, #12]
	if(ids > 0){
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	dd01      	ble.n	80034d2 <Check_DB+0x7a>
		//for (int i = 0; i < ids; i++){
			//Flash_LED();
		//}
		return 1;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <Check_DB+0x7c>
	}
	return 0;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	0018      	movs	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b004      	add	sp, #16
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	200000c8 	.word	0x200000c8
 80034e0:	200003ac 	.word	0x200003ac

080034e4 <SendtoPi>:



/* USER CODE BEGIN Prototypes */

void SendtoPi(int select, char string[100], int input){
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
	if(select == 1){
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d10e      	bne.n	8003514 <SendtoPi+0x30>
		sprintf(buffer,string);
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	4b23      	ldr	r3, [pc, #140]	; (8003588 <SendtoPi+0xa4>)
 80034fa:	0011      	movs	r1, r2
 80034fc:	0018      	movs	r0, r3
 80034fe:	f001 f869 	bl	80045d4 <siprintf>
		len = strlen(buffer);
 8003502:	4b21      	ldr	r3, [pc, #132]	; (8003588 <SendtoPi+0xa4>)
 8003504:	0018      	movs	r0, r3
 8003506:	f7fc fdff 	bl	8000108 <strlen>
 800350a:	0003      	movs	r3, r0
 800350c:	001a      	movs	r2, r3
 800350e:	4b1f      	ldr	r3, [pc, #124]	; (800358c <SendtoPi+0xa8>)
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	e010      	b.n	8003536 <SendtoPi+0x52>
	}else if(select == 0){
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10d      	bne.n	8003536 <SendtoPi+0x52>
		sprintf(buffer,"%d",input);
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	491c      	ldr	r1, [pc, #112]	; (8003590 <SendtoPi+0xac>)
 800351e:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <SendtoPi+0xa4>)
 8003520:	0018      	movs	r0, r3
 8003522:	f001 f857 	bl	80045d4 <siprintf>
		len = strlen(buffer);
 8003526:	4b18      	ldr	r3, [pc, #96]	; (8003588 <SendtoPi+0xa4>)
 8003528:	0018      	movs	r0, r3
 800352a:	f7fc fded 	bl	8000108 <strlen>
 800352e:	0003      	movs	r3, r0
 8003530:	001a      	movs	r2, r3
 8003532:	4b16      	ldr	r3, [pc, #88]	; (800358c <SendtoPi+0xa8>)
 8003534:	601a      	str	r2, [r3, #0]
	}
	HAL_UART_Transmit(&huart1,buffer,len,1000);
 8003536:	4b15      	ldr	r3, [pc, #84]	; (800358c <SendtoPi+0xa8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	b29a      	uxth	r2, r3
 800353c:	23fa      	movs	r3, #250	; 0xfa
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4911      	ldr	r1, [pc, #68]	; (8003588 <SendtoPi+0xa4>)
 8003542:	4814      	ldr	r0, [pc, #80]	; (8003594 <SendtoPi+0xb0>)
 8003544:	f7fe fb48 	bl	8001bd8 <HAL_UART_Transmit>
	HAL_Delay(10);
 8003548:	200a      	movs	r0, #10
 800354a:	f7fc feb7 	bl	80002bc <HAL_Delay>
	sprintf(buffer,"\n\r");
 800354e:	4a0e      	ldr	r2, [pc, #56]	; (8003588 <SendtoPi+0xa4>)
 8003550:	4b11      	ldr	r3, [pc, #68]	; (8003598 <SendtoPi+0xb4>)
 8003552:	0010      	movs	r0, r2
 8003554:	0019      	movs	r1, r3
 8003556:	2303      	movs	r3, #3
 8003558:	001a      	movs	r2, r3
 800355a:	f000 fff7 	bl	800454c <memcpy>
	len = strlen(buffer);
 800355e:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <SendtoPi+0xa4>)
 8003560:	0018      	movs	r0, r3
 8003562:	f7fc fdd1 	bl	8000108 <strlen>
 8003566:	0003      	movs	r3, r0
 8003568:	001a      	movs	r2, r3
 800356a:	4b08      	ldr	r3, [pc, #32]	; (800358c <SendtoPi+0xa8>)
 800356c:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart1,buffer,len,1000);
 800356e:	4b07      	ldr	r3, [pc, #28]	; (800358c <SendtoPi+0xa8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	b29a      	uxth	r2, r3
 8003574:	23fa      	movs	r3, #250	; 0xfa
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4903      	ldr	r1, [pc, #12]	; (8003588 <SendtoPi+0xa4>)
 800357a:	4806      	ldr	r0, [pc, #24]	; (8003594 <SendtoPi+0xb0>)
 800357c:	f7fe fb2c 	bl	8001bd8 <HAL_UART_Transmit>
}
 8003580:	46c0      	nop			; (mov r8, r8)
 8003582:	46bd      	mov	sp, r7
 8003584:	b004      	add	sp, #16
 8003586:	bd80      	pop	{r7, pc}
 8003588:	20000280 	.word	0x20000280
 800358c:	20000484 	.word	0x20000484
 8003590:	08004e08 	.word	0x08004e08
 8003594:	20000210 	.word	0x20000210
 8003598:	08004e0c 	.word	0x08004e0c

0800359c <SendSnap>:

void SendSnap(void){
 800359c:	b580      	push	{r7, lr}
 800359e:	b0cc      	sub	sp, #304	; 0x130
 80035a0:	af00      	add	r7, sp, #0
	 char message[300];
	 snprintf(message,sizeof(message),"{\"MessageID\":\"SNAP\",\"DoorID\":\"\",\"Date\":\"\",\"Time\":\"\",\"UserID\":\"\",\"Method\":\"\",\"AccessGranted\":,\"ImageID\":\"\"}\n");
 80035a2:	1d3a      	adds	r2, r7, #4
 80035a4:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <SendSnap+0x2c>)
 80035a6:	0010      	movs	r0, r2
 80035a8:	0019      	movs	r1, r3
 80035aa:	236c      	movs	r3, #108	; 0x6c
 80035ac:	001a      	movs	r2, r3
 80035ae:	f000 ffcd 	bl	800454c <memcpy>
	 SendtoPi(1,message,0);
 80035b2:	1d3b      	adds	r3, r7, #4
 80035b4:	2200      	movs	r2, #0
 80035b6:	0019      	movs	r1, r3
 80035b8:	2001      	movs	r0, #1
 80035ba:	f7ff ff93 	bl	80034e4 <SendtoPi>
}
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	46bd      	mov	sp, r7
 80035c2:	b04c      	add	sp, #304	; 0x130
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	08004e10 	.word	0x08004e10

080035cc <SendAccessFPS>:

void SendAccessFPS(int id){
 80035cc:	b5b0      	push	{r4, r5, r7, lr}
 80035ce:	b0ce      	sub	sp, #312	; 0x138
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
	 char message[300];
	 SendSnap();
 80035d4:	f7ff ffe2 	bl	800359c <SendSnap>
	 snprintf(message,sizeof(message),"{\"MessageID\":\"NEW_RECORD\",\"DoorID\":\"\",\"Date\":\"\",\"Time\":\"\",\"UserID\":\"%d\",\"Method\":\"SCANNER\",\"AccessGranted\":true,\"ImageID\":\"\"}\n",id);
 80035d8:	687c      	ldr	r4, [r7, #4]
 80035da:	4a09      	ldr	r2, [pc, #36]	; (8003600 <SendAccessFPS+0x34>)
 80035dc:	2396      	movs	r3, #150	; 0x96
 80035de:	0059      	lsls	r1, r3, #1
 80035e0:	250c      	movs	r5, #12
 80035e2:	1978      	adds	r0, r7, r5
 80035e4:	0023      	movs	r3, r4
 80035e6:	f000 ffc3 	bl	8004570 <sniprintf>
	 SendtoPi(1,message,0);
 80035ea:	197b      	adds	r3, r7, r5
 80035ec:	2200      	movs	r2, #0
 80035ee:	0019      	movs	r1, r3
 80035f0:	2001      	movs	r0, #1
 80035f2:	f7ff ff77 	bl	80034e4 <SendtoPi>
}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	46bd      	mov	sp, r7
 80035fa:	b04e      	add	sp, #312	; 0x138
 80035fc:	bdb0      	pop	{r4, r5, r7, pc}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	08004e7c 	.word	0x08004e7c

08003604 <SendDeniedFPS>:

void SendDeniedFPS(void){
 8003604:	b580      	push	{r7, lr}
 8003606:	b0cc      	sub	sp, #304	; 0x130
 8003608:	af00      	add	r7, sp, #0
	 char message[300];
	 SendSnap();
 800360a:	f7ff ffc7 	bl	800359c <SendSnap>
	 snprintf(message,sizeof(message),"{\"MessageID\":\"NEW_RECORD\",\"DoorID\":\"\",\"Date\":\"\",\"Time\":\"\",\"UserID\":\"\",\"Method\":\"SCANNER\",\"AccessGranted\":false,\"ImageID\":\"\"}\n");
 800360e:	1d3a      	adds	r2, r7, #4
 8003610:	4b08      	ldr	r3, [pc, #32]	; (8003634 <SendDeniedFPS+0x30>)
 8003612:	0010      	movs	r0, r2
 8003614:	0019      	movs	r1, r3
 8003616:	237e      	movs	r3, #126	; 0x7e
 8003618:	001a      	movs	r2, r3
 800361a:	f000 ff97 	bl	800454c <memcpy>
	 SendtoPi(1,message,0);
 800361e:	1d3b      	adds	r3, r7, #4
 8003620:	2200      	movs	r2, #0
 8003622:	0019      	movs	r1, r3
 8003624:	2001      	movs	r0, #1
 8003626:	f7ff ff5d 	bl	80034e4 <SendtoPi>
}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	46bd      	mov	sp, r7
 800362e:	b04c      	add	sp, #304	; 0x130
 8003630:	bd80      	pop	{r7, pc}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	08004efc 	.word	0x08004efc

08003638 <SendDeniedIR>:

void SendDeniedIR(void){
 8003638:	b580      	push	{r7, lr}
 800363a:	b0cc      	sub	sp, #304	; 0x130
 800363c:	af00      	add	r7, sp, #0
	 char message[300];
	 SendSnap();
 800363e:	f7ff ffad 	bl	800359c <SendSnap>
	 snprintf(message,sizeof(message),"{\"MessageID\":\"NEW_RECORD\",\"DoorID\":\"\",\"Date\":\"\",\"Time\":\"\",\"UserID\":\"\",\"Method\":\"\",\"AccessGranted\":false,\"ImageID\":\"\"}\n");
 8003642:	1d3a      	adds	r2, r7, #4
 8003644:	4b08      	ldr	r3, [pc, #32]	; (8003668 <SendDeniedIR+0x30>)
 8003646:	0010      	movs	r0, r2
 8003648:	0019      	movs	r1, r3
 800364a:	2377      	movs	r3, #119	; 0x77
 800364c:	001a      	movs	r2, r3
 800364e:	f000 ff7d 	bl	800454c <memcpy>
	 SendtoPi(1,message,0);
 8003652:	1d3b      	adds	r3, r7, #4
 8003654:	2200      	movs	r2, #0
 8003656:	0019      	movs	r1, r3
 8003658:	2001      	movs	r0, #1
 800365a:	f7ff ff43 	bl	80034e4 <SendtoPi>
}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	46bd      	mov	sp, r7
 8003662:	b04c      	add	sp, #304	; 0x130
 8003664:	bd80      	pop	{r7, pc}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	08004f7c 	.word	0x08004f7c

0800366c <SendNewUserFPS>:

void SendNewUserFPS(int id){
 800366c:	b5b0      	push	{r4, r5, r7, lr}
 800366e:	b0ce      	sub	sp, #312	; 0x138
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	 char message[300];
	 SendSnap();
 8003674:	f7ff ff92 	bl	800359c <SendSnap>
	 snprintf(message,sizeof(message),"{\"MessageID\":\"NEW_USER\",\"DoorID\":\"\",\"Date\":\"\",\"Time\":\"\",\"UserID\":\"%d\",\"Method\":\"\",\"AccessGranted\":,\"ImageID\":\"\"}\n",id);
 8003678:	687c      	ldr	r4, [r7, #4]
 800367a:	4a09      	ldr	r2, [pc, #36]	; (80036a0 <SendNewUserFPS+0x34>)
 800367c:	2396      	movs	r3, #150	; 0x96
 800367e:	0059      	lsls	r1, r3, #1
 8003680:	250c      	movs	r5, #12
 8003682:	1978      	adds	r0, r7, r5
 8003684:	0023      	movs	r3, r4
 8003686:	f000 ff73 	bl	8004570 <sniprintf>
	 SendtoPi(1,message,0);
 800368a:	197b      	adds	r3, r7, r5
 800368c:	2200      	movs	r2, #0
 800368e:	0019      	movs	r1, r3
 8003690:	2001      	movs	r0, #1
 8003692:	f7ff ff27 	bl	80034e4 <SendtoPi>
}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	46bd      	mov	sp, r7
 800369a:	b04e      	add	sp, #312	; 0x138
 800369c:	bdb0      	pop	{r4, r5, r7, pc}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	08004ff4 	.word	0x08004ff4

080036a4 <GetUnlockDoor>:

void GetUnlockDoor(void){
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
	  OpenLatch();
 80036a8:	f000 f824 	bl	80036f4 <OpenLatch>
	  WaitLatch(5000);
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <GetUnlockDoor+0x18>)
 80036ae:	0018      	movs	r0, r3
 80036b0:	f000 fa52 	bl	8003b58 <WaitLatch>
}
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	00001388 	.word	0x00001388

080036c0 <SendAccessKey>:

void SendAccessKey(){
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b0cc      	sub	sp, #304	; 0x130
 80036c4:	af00      	add	r7, sp, #0
	 char message[300];
	 SendSnap();
 80036c6:	f7ff ff69 	bl	800359c <SendSnap>
	 snprintf(message,sizeof(message),"{\"MessageID\":\"NEW_RECORD\",\"DoorID\":\"\",\"Date\":\"\",\"Time\":\"\",\"UserID\":\"\",\"Method\":\"KEY\",\"AccessGranted\":true,\"ImageID\":\"\"}\n");
 80036ca:	1d3a      	adds	r2, r7, #4
 80036cc:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <SendAccessKey+0x30>)
 80036ce:	0010      	movs	r0, r2
 80036d0:	0019      	movs	r1, r3
 80036d2:	2379      	movs	r3, #121	; 0x79
 80036d4:	001a      	movs	r2, r3
 80036d6:	f000 ff39 	bl	800454c <memcpy>
	 SendtoPi(1,message,0);
 80036da:	1d3b      	adds	r3, r7, #4
 80036dc:	2200      	movs	r2, #0
 80036de:	0019      	movs	r1, r3
 80036e0:	2001      	movs	r0, #1
 80036e2:	f7ff feff 	bl	80034e4 <SendtoPi>
}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b04c      	add	sp, #304	; 0x130
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	08005068 	.word	0x08005068

080036f4 <OpenLatch>:
 int finger_delay = 0;
 bool finger_on = 0;
/* USER CODE END Private defines */

/* USER CODE BEGIN Prototypes */
 void OpenLatch(){
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
 	  HAL_GPIO_WritePin(GPIOC, SOLENOID_ENABLE_Pin, SET);
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	019b      	lsls	r3, r3, #6
 80036fc:	4806      	ldr	r0, [pc, #24]	; (8003718 <OpenLatch+0x24>)
 80036fe:	2201      	movs	r2, #1
 8003700:	0019      	movs	r1, r3
 8003702:	f7fd fcb6 	bl	8001072 <HAL_GPIO_WritePin>
 	  //HAL_Delay(5000);
 	  HAL_GPIO_WritePin(GPIOC, SOLENOID_Pin, SET);
 8003706:	4b04      	ldr	r3, [pc, #16]	; (8003718 <OpenLatch+0x24>)
 8003708:	2201      	movs	r2, #1
 800370a:	2180      	movs	r1, #128	; 0x80
 800370c:	0018      	movs	r0, r3
 800370e:	f7fd fcb0 	bl	8001072 <HAL_GPIO_WritePin>
 }
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	48000800 	.word	0x48000800

0800371c <CloseLatch>:

 void CloseLatch(){
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
 	  HAL_GPIO_WritePin(GPIOC, SOLENOID_Pin, RESET);
 8003720:	4b07      	ldr	r3, [pc, #28]	; (8003740 <CloseLatch+0x24>)
 8003722:	2200      	movs	r2, #0
 8003724:	2180      	movs	r1, #128	; 0x80
 8003726:	0018      	movs	r0, r3
 8003728:	f7fd fca3 	bl	8001072 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOC, SOLENOID_ENABLE_Pin, RESET);
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	019b      	lsls	r3, r3, #6
 8003730:	4803      	ldr	r0, [pc, #12]	; (8003740 <CloseLatch+0x24>)
 8003732:	2200      	movs	r2, #0
 8003734:	0019      	movs	r1, r3
 8003736:	f7fd fc9c 	bl	8001072 <HAL_GPIO_WritePin>
 }
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	48000800 	.word	0x48000800

08003744 <WaitFingerPlace>:

 bool WaitFingerPlace(int timeoutplace){
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
	 int timeout_temp = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
	 while(HAL_GPIO_ReadPin(GPIOC, FINGERPRINT_SENSE_Pin) == 0 && timeout_temp < timeoutplace){timeout_temp++;}
 8003750:	e002      	b.n	8003758 <WaitFingerPlace+0x14>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	3301      	adds	r3, #1
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4a0a      	ldr	r2, [pc, #40]	; (8003788 <WaitFingerPlace+0x44>)
 800375e:	0019      	movs	r1, r3
 8003760:	0010      	movs	r0, r2
 8003762:	f7fd fc69 	bl	8001038 <HAL_GPIO_ReadPin>
 8003766:	1e03      	subs	r3, r0, #0
 8003768:	d103      	bne.n	8003772 <WaitFingerPlace+0x2e>
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	429a      	cmp	r2, r3
 8003770:	dbef      	blt.n	8003752 <WaitFingerPlace+0xe>
	 if(timeout_temp < timeoutplace){
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	429a      	cmp	r2, r3
 8003778:	da01      	bge.n	800377e <WaitFingerPlace+0x3a>
		 return true;
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <WaitFingerPlace+0x3c>
	 }
	 return false;
 800377e:	2300      	movs	r3, #0
 }
 8003780:	0018      	movs	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	b004      	add	sp, #16
 8003786:	bd80      	pop	{r7, pc}
 8003788:	48000800 	.word	0x48000800

0800378c <WaitFingerRemove>:

 void WaitFingerRemove(int timeoutremove){
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
	 int timeout_temp = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
	 while(HAL_GPIO_ReadPin(GPIOC, FINGERPRINT_SENSE_Pin) != 0 && timeout_temp < timeoutremove){timeout_temp++;}
 8003798:	e002      	b.n	80037a0 <WaitFingerRemove+0x14>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	3301      	adds	r3, #1
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	2380      	movs	r3, #128	; 0x80
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4a07      	ldr	r2, [pc, #28]	; (80037c4 <WaitFingerRemove+0x38>)
 80037a6:	0019      	movs	r1, r3
 80037a8:	0010      	movs	r0, r2
 80037aa:	f7fd fc45 	bl	8001038 <HAL_GPIO_ReadPin>
 80037ae:	1e03      	subs	r3, r0, #0
 80037b0:	d003      	beq.n	80037ba <WaitFingerRemove+0x2e>
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	dbef      	blt.n	800379a <WaitFingerRemove+0xe>
	 if(timeout_temp < timeoutremove){
		 return true;
	 }
	 return false;
 80037ba:	46c0      	nop			; (mov r8, r8)
 }
 80037bc:	46bd      	mov	sp, r7
 80037be:	b004      	add	sp, #16
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	48000800 	.word	0x48000800

080037c8 <Debounce>:

 bool Debounce(int btn){
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 	bool return_val = false;
 80037d0:	230f      	movs	r3, #15
 80037d2:	18fb      	adds	r3, r7, r3
 80037d4:	2200      	movs	r2, #0
 80037d6:	701a      	strb	r2, [r3, #0]
 	switch(btn){
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d900      	bls.n	80037e0 <Debounce+0x18>
 80037de:	e1b4      	b.n	8003b4a <Debounce+0x382>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	009a      	lsls	r2, r3, #2
 80037e4:	4bc6      	ldr	r3, [pc, #792]	; (8003b00 <Debounce+0x338>)
 80037e6:	18d3      	adds	r3, r2, r3
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	469f      	mov	pc, r3
 	case 0: // reset button
 		if(HAL_GPIO_ReadPin(GPIOA, BCK_RESET_BTN_Pin) == 0 && reset_on == false){
 80037ec:	2390      	movs	r3, #144	; 0x90
 80037ee:	05db      	lsls	r3, r3, #23
 80037f0:	2101      	movs	r1, #1
 80037f2:	0018      	movs	r0, r3
 80037f4:	f7fd fc20 	bl	8001038 <HAL_GPIO_ReadPin>
 80037f8:	1e03      	subs	r3, r0, #0
 80037fa:	d12b      	bne.n	8003854 <Debounce+0x8c>
 80037fc:	4bc1      	ldr	r3, [pc, #772]	; (8003b04 <Debounce+0x33c>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2201      	movs	r2, #1
 8003802:	4053      	eors	r3, r2
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d024      	beq.n	8003854 <Debounce+0x8c>
 			if(reset_btn_last == false){
 800380a:	4bbf      	ldr	r3, [pc, #764]	; (8003b08 <Debounce+0x340>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2201      	movs	r2, #1
 8003810:	4053      	eors	r3, r2
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d006      	beq.n	8003826 <Debounce+0x5e>
 				reset_btn_last = true;
 8003818:	4bbb      	ldr	r3, [pc, #748]	; (8003b08 <Debounce+0x340>)
 800381a:	2201      	movs	r2, #1
 800381c:	701a      	strb	r2, [r3, #0]
 				reset_delay = 0;
 800381e:	4bbb      	ldr	r3, [pc, #748]	; (8003b0c <Debounce+0x344>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
 			if(reset_btn_last == false){
 8003824:	e02f      	b.n	8003886 <Debounce+0xbe>
 			}
 			else {
 				if(reset_delay == btn_delay){
 8003826:	4bb9      	ldr	r3, [pc, #740]	; (8003b0c <Debounce+0x344>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4bb9      	ldr	r3, [pc, #740]	; (8003b10 <Debounce+0x348>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d10a      	bne.n	8003848 <Debounce+0x80>
 					return_val = true;
 8003832:	230f      	movs	r3, #15
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	2201      	movs	r2, #1
 8003838:	701a      	strb	r2, [r3, #0]
 					reset_delay = 0;
 800383a:	4bb4      	ldr	r3, [pc, #720]	; (8003b0c <Debounce+0x344>)
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
 					reset_on = true;
 8003840:	4bb0      	ldr	r3, [pc, #704]	; (8003b04 <Debounce+0x33c>)
 8003842:	2201      	movs	r2, #1
 8003844:	701a      	strb	r2, [r3, #0]
 			if(reset_btn_last == false){
 8003846:	e01e      	b.n	8003886 <Debounce+0xbe>
 				}
 				else{
 					reset_delay++;
 8003848:	4bb0      	ldr	r3, [pc, #704]	; (8003b0c <Debounce+0x344>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	4baf      	ldr	r3, [pc, #700]	; (8003b0c <Debounce+0x344>)
 8003850:	601a      	str	r2, [r3, #0]
 			if(reset_btn_last == false){
 8003852:	e018      	b.n	8003886 <Debounce+0xbe>
 				}
 			}
 		}
 		else if(HAL_GPIO_ReadPin(GPIOA, BCK_RESET_BTN_Pin) != 0){
 8003854:	2390      	movs	r3, #144	; 0x90
 8003856:	05db      	lsls	r3, r3, #23
 8003858:	2101      	movs	r1, #1
 800385a:	0018      	movs	r0, r3
 800385c:	f7fd fbec 	bl	8001038 <HAL_GPIO_ReadPin>
 8003860:	1e03      	subs	r3, r0, #0
 8003862:	d006      	beq.n	8003872 <Debounce+0xaa>
 			reset_btn_last = false;
 8003864:	4ba8      	ldr	r3, [pc, #672]	; (8003b08 <Debounce+0x340>)
 8003866:	2200      	movs	r2, #0
 8003868:	701a      	strb	r2, [r3, #0]
 			reset_on = false;
 800386a:	4ba6      	ldr	r3, [pc, #664]	; (8003b04 <Debounce+0x33c>)
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
 		}
 		else if(reset_on == true){
 			return_val = true;
 		}
 		break;
 8003870:	e13e      	b.n	8003af0 <Debounce+0x328>
 		else if(reset_on == true){
 8003872:	4ba4      	ldr	r3, [pc, #656]	; (8003b04 <Debounce+0x33c>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d100      	bne.n	800387c <Debounce+0xb4>
 800387a:	e139      	b.n	8003af0 <Debounce+0x328>
 			return_val = true;
 800387c:	230f      	movs	r3, #15
 800387e:	18fb      	adds	r3, r7, r3
 8003880:	2201      	movs	r2, #1
 8003882:	701a      	strb	r2, [r3, #0]
 		break;
 8003884:	e134      	b.n	8003af0 <Debounce+0x328>
 8003886:	e133      	b.n	8003af0 <Debounce+0x328>
 	case 1: // new user button
 		if(HAL_GPIO_ReadPin(GPIOA, BCK_NEWUSER_BTN_Pin) == 0 && newusr_on == false){
 8003888:	2390      	movs	r3, #144	; 0x90
 800388a:	05db      	lsls	r3, r3, #23
 800388c:	2102      	movs	r1, #2
 800388e:	0018      	movs	r0, r3
 8003890:	f7fd fbd2 	bl	8001038 <HAL_GPIO_ReadPin>
 8003894:	1e03      	subs	r3, r0, #0
 8003896:	d12b      	bne.n	80038f0 <Debounce+0x128>
 8003898:	4b9e      	ldr	r3, [pc, #632]	; (8003b14 <Debounce+0x34c>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2201      	movs	r2, #1
 800389e:	4053      	eors	r3, r2
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d024      	beq.n	80038f0 <Debounce+0x128>
 			if(newusr_btn_last == false){
 80038a6:	4b9c      	ldr	r3, [pc, #624]	; (8003b18 <Debounce+0x350>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2201      	movs	r2, #1
 80038ac:	4053      	eors	r3, r2
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d006      	beq.n	80038c2 <Debounce+0xfa>
 				newusr_btn_last = true;
 80038b4:	4b98      	ldr	r3, [pc, #608]	; (8003b18 <Debounce+0x350>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	701a      	strb	r2, [r3, #0]
 				newusr_delay = 0;
 80038ba:	4b98      	ldr	r3, [pc, #608]	; (8003b1c <Debounce+0x354>)
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]
 			if(newusr_btn_last == false){
 80038c0:	e02f      	b.n	8003922 <Debounce+0x15a>
 			}
 			else {
 				if(newusr_delay == btn_delay){
 80038c2:	4b96      	ldr	r3, [pc, #600]	; (8003b1c <Debounce+0x354>)
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	4b92      	ldr	r3, [pc, #584]	; (8003b10 <Debounce+0x348>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d10a      	bne.n	80038e4 <Debounce+0x11c>
 					return_val = true;
 80038ce:	230f      	movs	r3, #15
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	2201      	movs	r2, #1
 80038d4:	701a      	strb	r2, [r3, #0]
 					newusr_delay = 0;
 80038d6:	4b91      	ldr	r3, [pc, #580]	; (8003b1c <Debounce+0x354>)
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
 					newusr_on = true;
 80038dc:	4b8d      	ldr	r3, [pc, #564]	; (8003b14 <Debounce+0x34c>)
 80038de:	2201      	movs	r2, #1
 80038e0:	701a      	strb	r2, [r3, #0]
 			if(newusr_btn_last == false){
 80038e2:	e01e      	b.n	8003922 <Debounce+0x15a>
 				}
 				else{
 					newusr_delay++;
 80038e4:	4b8d      	ldr	r3, [pc, #564]	; (8003b1c <Debounce+0x354>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	4b8c      	ldr	r3, [pc, #560]	; (8003b1c <Debounce+0x354>)
 80038ec:	601a      	str	r2, [r3, #0]
 			if(newusr_btn_last == false){
 80038ee:	e018      	b.n	8003922 <Debounce+0x15a>
 				}
 			}
 		}
 		else if(HAL_GPIO_ReadPin(GPIOA, BCK_NEWUSER_BTN_Pin) != 0){
 80038f0:	2390      	movs	r3, #144	; 0x90
 80038f2:	05db      	lsls	r3, r3, #23
 80038f4:	2102      	movs	r1, #2
 80038f6:	0018      	movs	r0, r3
 80038f8:	f7fd fb9e 	bl	8001038 <HAL_GPIO_ReadPin>
 80038fc:	1e03      	subs	r3, r0, #0
 80038fe:	d006      	beq.n	800390e <Debounce+0x146>
 			newusr_btn_last = false;
 8003900:	4b85      	ldr	r3, [pc, #532]	; (8003b18 <Debounce+0x350>)
 8003902:	2200      	movs	r2, #0
 8003904:	701a      	strb	r2, [r3, #0]
 			newusr_on = false;
 8003906:	4b83      	ldr	r3, [pc, #524]	; (8003b14 <Debounce+0x34c>)
 8003908:	2200      	movs	r2, #0
 800390a:	701a      	strb	r2, [r3, #0]
 		}
 		else if(newusr_on == true){
 			return_val = true;
 		}
 		break;
 800390c:	e0f2      	b.n	8003af4 <Debounce+0x32c>
 		else if(newusr_on == true){
 800390e:	4b81      	ldr	r3, [pc, #516]	; (8003b14 <Debounce+0x34c>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d100      	bne.n	8003918 <Debounce+0x150>
 8003916:	e0ed      	b.n	8003af4 <Debounce+0x32c>
 			return_val = true;
 8003918:	230f      	movs	r3, #15
 800391a:	18fb      	adds	r3, r7, r3
 800391c:	2201      	movs	r2, #1
 800391e:	701a      	strb	r2, [r3, #0]
 		break;
 8003920:	e0e8      	b.n	8003af4 <Debounce+0x32c>
 8003922:	e0e7      	b.n	8003af4 <Debounce+0x32c>
 	case 2: // key button
 		if(HAL_GPIO_ReadPin(GPIOC, BTM_KEYUSED_BTN_Pin) == 0 && key_on == false){
 8003924:	4b7e      	ldr	r3, [pc, #504]	; (8003b20 <Debounce+0x358>)
 8003926:	2104      	movs	r1, #4
 8003928:	0018      	movs	r0, r3
 800392a:	f7fd fb85 	bl	8001038 <HAL_GPIO_ReadPin>
 800392e:	1e03      	subs	r3, r0, #0
 8003930:	d12b      	bne.n	800398a <Debounce+0x1c2>
 8003932:	4b7c      	ldr	r3, [pc, #496]	; (8003b24 <Debounce+0x35c>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2201      	movs	r2, #1
 8003938:	4053      	eors	r3, r2
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d024      	beq.n	800398a <Debounce+0x1c2>
 			if(key_btn_last == false){
 8003940:	4b79      	ldr	r3, [pc, #484]	; (8003b28 <Debounce+0x360>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2201      	movs	r2, #1
 8003946:	4053      	eors	r3, r2
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d006      	beq.n	800395c <Debounce+0x194>
 				key_btn_last = true;
 800394e:	4b76      	ldr	r3, [pc, #472]	; (8003b28 <Debounce+0x360>)
 8003950:	2201      	movs	r2, #1
 8003952:	701a      	strb	r2, [r3, #0]
 				key_delay = 0;
 8003954:	4b75      	ldr	r3, [pc, #468]	; (8003b2c <Debounce+0x364>)
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
 			if(key_btn_last == false){
 800395a:	e02e      	b.n	80039ba <Debounce+0x1f2>
 			}
 			else {
 				if(key_delay == btn_delay){
 800395c:	4b73      	ldr	r3, [pc, #460]	; (8003b2c <Debounce+0x364>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4b6b      	ldr	r3, [pc, #428]	; (8003b10 <Debounce+0x348>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d10a      	bne.n	800397e <Debounce+0x1b6>
 					return_val = true;
 8003968:	230f      	movs	r3, #15
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	2201      	movs	r2, #1
 800396e:	701a      	strb	r2, [r3, #0]
 					key_delay = 0;
 8003970:	4b6e      	ldr	r3, [pc, #440]	; (8003b2c <Debounce+0x364>)
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
 					key_on = true;
 8003976:	4b6b      	ldr	r3, [pc, #428]	; (8003b24 <Debounce+0x35c>)
 8003978:	2201      	movs	r2, #1
 800397a:	701a      	strb	r2, [r3, #0]
 			if(key_btn_last == false){
 800397c:	e01d      	b.n	80039ba <Debounce+0x1f2>
 				}
 				else{
 					key_delay++;
 800397e:	4b6b      	ldr	r3, [pc, #428]	; (8003b2c <Debounce+0x364>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	4b69      	ldr	r3, [pc, #420]	; (8003b2c <Debounce+0x364>)
 8003986:	601a      	str	r2, [r3, #0]
 			if(key_btn_last == false){
 8003988:	e017      	b.n	80039ba <Debounce+0x1f2>
 				}
 			}
 		}
 		else if(HAL_GPIO_ReadPin(GPIOC, BTM_KEYUSED_BTN_Pin) != 0){
 800398a:	4b65      	ldr	r3, [pc, #404]	; (8003b20 <Debounce+0x358>)
 800398c:	2104      	movs	r1, #4
 800398e:	0018      	movs	r0, r3
 8003990:	f7fd fb52 	bl	8001038 <HAL_GPIO_ReadPin>
 8003994:	1e03      	subs	r3, r0, #0
 8003996:	d006      	beq.n	80039a6 <Debounce+0x1de>
 			key_btn_last = false;
 8003998:	4b63      	ldr	r3, [pc, #396]	; (8003b28 <Debounce+0x360>)
 800399a:	2200      	movs	r2, #0
 800399c:	701a      	strb	r2, [r3, #0]
 			key_on = false;
 800399e:	4b61      	ldr	r3, [pc, #388]	; (8003b24 <Debounce+0x35c>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
 		}
 		else if(key_on == true){
 			return_val = true;
 		}
 		break;
 80039a4:	e0a8      	b.n	8003af8 <Debounce+0x330>
 		else if(key_on == true){
 80039a6:	4b5f      	ldr	r3, [pc, #380]	; (8003b24 <Debounce+0x35c>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d100      	bne.n	80039b0 <Debounce+0x1e8>
 80039ae:	e0a3      	b.n	8003af8 <Debounce+0x330>
 			return_val = true;
 80039b0:	230f      	movs	r3, #15
 80039b2:	18fb      	adds	r3, r7, r3
 80039b4:	2201      	movs	r2, #1
 80039b6:	701a      	strb	r2, [r3, #0]
 		break;
 80039b8:	e09e      	b.n	8003af8 <Debounce+0x330>
 80039ba:	e09d      	b.n	8003af8 <Debounce+0x330>
 	case 3: // door button
 		if(HAL_GPIO_ReadPin(GPIOC, SIDE_DOOROPEN_BTN_Pin) != 0 && door_on == false){
 80039bc:	4b58      	ldr	r3, [pc, #352]	; (8003b20 <Debounce+0x358>)
 80039be:	2102      	movs	r1, #2
 80039c0:	0018      	movs	r0, r3
 80039c2:	f7fd fb39 	bl	8001038 <HAL_GPIO_ReadPin>
 80039c6:	1e03      	subs	r3, r0, #0
 80039c8:	d02b      	beq.n	8003a22 <Debounce+0x25a>
 80039ca:	4b59      	ldr	r3, [pc, #356]	; (8003b30 <Debounce+0x368>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2201      	movs	r2, #1
 80039d0:	4053      	eors	r3, r2
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d024      	beq.n	8003a22 <Debounce+0x25a>
 			if(door_btn_last == false){
 80039d8:	4b56      	ldr	r3, [pc, #344]	; (8003b34 <Debounce+0x36c>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2201      	movs	r2, #1
 80039de:	4053      	eors	r3, r2
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d006      	beq.n	80039f4 <Debounce+0x22c>
 				door_btn_last = true;
 80039e6:	4b53      	ldr	r3, [pc, #332]	; (8003b34 <Debounce+0x36c>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	701a      	strb	r2, [r3, #0]
 				door_delay = 0;
 80039ec:	4b52      	ldr	r3, [pc, #328]	; (8003b38 <Debounce+0x370>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
 			if(door_btn_last == false){
 80039f2:	e02d      	b.n	8003a50 <Debounce+0x288>
 			}
 			else {
 				if(door_delay == btn_delay){
 80039f4:	4b50      	ldr	r3, [pc, #320]	; (8003b38 <Debounce+0x370>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4b45      	ldr	r3, [pc, #276]	; (8003b10 <Debounce+0x348>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d10a      	bne.n	8003a16 <Debounce+0x24e>
 					return_val = true;
 8003a00:	230f      	movs	r3, #15
 8003a02:	18fb      	adds	r3, r7, r3
 8003a04:	2201      	movs	r2, #1
 8003a06:	701a      	strb	r2, [r3, #0]
 					door_delay = 0;
 8003a08:	4b4b      	ldr	r3, [pc, #300]	; (8003b38 <Debounce+0x370>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
 					door_on = true;
 8003a0e:	4b48      	ldr	r3, [pc, #288]	; (8003b30 <Debounce+0x368>)
 8003a10:	2201      	movs	r2, #1
 8003a12:	701a      	strb	r2, [r3, #0]
 			if(door_btn_last == false){
 8003a14:	e01c      	b.n	8003a50 <Debounce+0x288>
 				}
 				else{
 					door_delay++;
 8003a16:	4b48      	ldr	r3, [pc, #288]	; (8003b38 <Debounce+0x370>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	4b46      	ldr	r3, [pc, #280]	; (8003b38 <Debounce+0x370>)
 8003a1e:	601a      	str	r2, [r3, #0]
 			if(door_btn_last == false){
 8003a20:	e016      	b.n	8003a50 <Debounce+0x288>
 				}
 			}
 		}
 		else if(HAL_GPIO_ReadPin(GPIOC, SIDE_DOOROPEN_BTN_Pin) == 0){
 8003a22:	4b3f      	ldr	r3, [pc, #252]	; (8003b20 <Debounce+0x358>)
 8003a24:	2102      	movs	r1, #2
 8003a26:	0018      	movs	r0, r3
 8003a28:	f7fd fb06 	bl	8001038 <HAL_GPIO_ReadPin>
 8003a2c:	1e03      	subs	r3, r0, #0
 8003a2e:	d106      	bne.n	8003a3e <Debounce+0x276>
 			door_btn_last = false;
 8003a30:	4b40      	ldr	r3, [pc, #256]	; (8003b34 <Debounce+0x36c>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	701a      	strb	r2, [r3, #0]
 			door_on = false;
 8003a36:	4b3e      	ldr	r3, [pc, #248]	; (8003b30 <Debounce+0x368>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
 		}
 		else if(door_on == true){
 			return_val = true;
 		}
 		break;
 8003a3c:	e05e      	b.n	8003afc <Debounce+0x334>
 		else if(door_on == true){
 8003a3e:	4b3c      	ldr	r3, [pc, #240]	; (8003b30 <Debounce+0x368>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d05a      	beq.n	8003afc <Debounce+0x334>
 			return_val = true;
 8003a46:	230f      	movs	r3, #15
 8003a48:	18fb      	adds	r3, r7, r3
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	701a      	strb	r2, [r3, #0]
 		break;
 8003a4e:	e055      	b.n	8003afc <Debounce+0x334>
 8003a50:	e054      	b.n	8003afc <Debounce+0x334>
 	case 4: // fingerprint scanner detect
 		if(HAL_GPIO_ReadPin(GPIOC, FINGERPRINT_SENSE_Pin) != 0 && finger_on == false){
 8003a52:	2380      	movs	r3, #128	; 0x80
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4a32      	ldr	r2, [pc, #200]	; (8003b20 <Debounce+0x358>)
 8003a58:	0019      	movs	r1, r3
 8003a5a:	0010      	movs	r0, r2
 8003a5c:	f7fd faec 	bl	8001038 <HAL_GPIO_ReadPin>
 8003a60:	1e03      	subs	r3, r0, #0
 8003a62:	d02b      	beq.n	8003abc <Debounce+0x2f4>
 8003a64:	4b35      	ldr	r3, [pc, #212]	; (8003b3c <Debounce+0x374>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	4053      	eors	r3, r2
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d024      	beq.n	8003abc <Debounce+0x2f4>
 			if(finger_last == false){
 8003a72:	4b33      	ldr	r3, [pc, #204]	; (8003b40 <Debounce+0x378>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2201      	movs	r2, #1
 8003a78:	4053      	eors	r3, r2
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d006      	beq.n	8003a8e <Debounce+0x2c6>
 				finger_last = true;
 8003a80:	4b2f      	ldr	r3, [pc, #188]	; (8003b40 <Debounce+0x378>)
 8003a82:	2201      	movs	r2, #1
 8003a84:	701a      	strb	r2, [r3, #0]
 				finger_delay = 0;
 8003a86:	4b2f      	ldr	r3, [pc, #188]	; (8003b44 <Debounce+0x37c>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 			if(finger_last == false){
 8003a8c:	e02f      	b.n	8003aee <Debounce+0x326>
 			}
 			else {
 				if(finger_delay == btn_delay){
 8003a8e:	4b2d      	ldr	r3, [pc, #180]	; (8003b44 <Debounce+0x37c>)
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	4b1f      	ldr	r3, [pc, #124]	; (8003b10 <Debounce+0x348>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d10a      	bne.n	8003ab0 <Debounce+0x2e8>
 					return_val = true;
 8003a9a:	230f      	movs	r3, #15
 8003a9c:	18fb      	adds	r3, r7, r3
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	701a      	strb	r2, [r3, #0]
 					finger_delay = 0;
 8003aa2:	4b28      	ldr	r3, [pc, #160]	; (8003b44 <Debounce+0x37c>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
 					finger_on = true;
 8003aa8:	4b24      	ldr	r3, [pc, #144]	; (8003b3c <Debounce+0x374>)
 8003aaa:	2201      	movs	r2, #1
 8003aac:	701a      	strb	r2, [r3, #0]
 			if(finger_last == false){
 8003aae:	e01e      	b.n	8003aee <Debounce+0x326>
 				}
 				else{
 					finger_delay++;
 8003ab0:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <Debounce+0x37c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	4b23      	ldr	r3, [pc, #140]	; (8003b44 <Debounce+0x37c>)
 8003ab8:	601a      	str	r2, [r3, #0]
 			if(finger_last == false){
 8003aba:	e018      	b.n	8003aee <Debounce+0x326>
 				}
 			}
 		}
 		else if(HAL_GPIO_ReadPin(GPIOC, FINGERPRINT_SENSE_Pin) == 0){
 8003abc:	2380      	movs	r3, #128	; 0x80
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4a17      	ldr	r2, [pc, #92]	; (8003b20 <Debounce+0x358>)
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	0010      	movs	r0, r2
 8003ac6:	f7fd fab7 	bl	8001038 <HAL_GPIO_ReadPin>
 8003aca:	1e03      	subs	r3, r0, #0
 8003acc:	d106      	bne.n	8003adc <Debounce+0x314>
 			finger_last = false;
 8003ace:	4b1c      	ldr	r3, [pc, #112]	; (8003b40 <Debounce+0x378>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	701a      	strb	r2, [r3, #0]
 			finger_on = false;
 8003ad4:	4b19      	ldr	r3, [pc, #100]	; (8003b3c <Debounce+0x374>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
 		}
 		else if(finger_on == true){
 			return_val = true;
 		}
 		break;
 8003ada:	e035      	b.n	8003b48 <Debounce+0x380>
 		else if(finger_on == true){
 8003adc:	4b17      	ldr	r3, [pc, #92]	; (8003b3c <Debounce+0x374>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d031      	beq.n	8003b48 <Debounce+0x380>
 			return_val = true;
 8003ae4:	230f      	movs	r3, #15
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	2201      	movs	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]
 		break;
 8003aec:	e02c      	b.n	8003b48 <Debounce+0x380>
 8003aee:	e02b      	b.n	8003b48 <Debounce+0x380>
 		break;
 8003af0:	46c0      	nop			; (mov r8, r8)
 8003af2:	e02a      	b.n	8003b4a <Debounce+0x382>
 		break;
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	e028      	b.n	8003b4a <Debounce+0x382>
 		break;
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	e026      	b.n	8003b4a <Debounce+0x382>
 		break;
 8003afc:	46c0      	nop			; (mov r8, r8)
 8003afe:	e024      	b.n	8003b4a <Debounce+0x382>
 8003b00:	080050e4 	.word	0x080050e4
 8003b04:	20000098 	.word	0x20000098
 8003b08:	20000090 	.word	0x20000090
 8003b0c:	20000094 	.word	0x20000094
 8003b10:	20000000 	.word	0x20000000
 8003b14:	200000a0 	.word	0x200000a0
 8003b18:	20000099 	.word	0x20000099
 8003b1c:	2000009c 	.word	0x2000009c
 8003b20:	48000800 	.word	0x48000800
 8003b24:	200000b0 	.word	0x200000b0
 8003b28:	200000a9 	.word	0x200000a9
 8003b2c:	200000ac 	.word	0x200000ac
 8003b30:	200000a8 	.word	0x200000a8
 8003b34:	200000a1 	.word	0x200000a1
 8003b38:	200000a4 	.word	0x200000a4
 8003b3c:	200000b8 	.word	0x200000b8
 8003b40:	200000b1 	.word	0x200000b1
 8003b44:	200000b4 	.word	0x200000b4
 		break;
 8003b48:	46c0      	nop			; (mov r8, r8)
 	}

 	return return_val;
 8003b4a:	230f      	movs	r3, #15
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 }
 8003b50:	0018      	movs	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	b004      	add	sp, #16
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <WaitLatch>:

 void WaitLatch(int holdtimer){
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
	 int timer_temp = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]
	 while(timer_temp < holdtimer){
 8003b64:	e00a      	b.n	8003b7c <WaitLatch+0x24>
		 if(Debounce(3)){
 8003b66:	2003      	movs	r0, #3
 8003b68:	f7ff fe2e 	bl	80037c8 <Debounce>
 8003b6c:	1e03      	subs	r3, r0, #0
 8003b6e:	d002      	beq.n	8003b76 <WaitLatch+0x1e>
			 CloseLatch();
 8003b70:	f7ff fdd4 	bl	800371c <CloseLatch>
			 break;
 8003b74:	e006      	b.n	8003b84 <WaitLatch+0x2c>
		 }
		 timer_temp++;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	60fb      	str	r3, [r7, #12]
	 while(timer_temp < holdtimer){
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	dbf0      	blt.n	8003b66 <WaitLatch+0xe>
	 }
 }
 8003b84:	46c0      	nop			; (mov r8, r8)
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b004      	add	sp, #16
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_UART_RxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // change this for recieve from both UARTs
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
	if(Rx_data[0] == old_Rx_data[0] && Rx_data[1] == old_Rx_data[1]){
 8003b94:	4b25      	ldr	r3, [pc, #148]	; (8003c2c <HAL_UART_RxCpltCallback+0xa0>)
 8003b96:	781a      	ldrb	r2, [r3, #0]
 8003b98:	4b25      	ldr	r3, [pc, #148]	; (8003c30 <HAL_UART_RxCpltCallback+0xa4>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d10d      	bne.n	8003bbc <HAL_UART_RxCpltCallback+0x30>
 8003ba0:	4b22      	ldr	r3, [pc, #136]	; (8003c2c <HAL_UART_RxCpltCallback+0xa0>)
 8003ba2:	785a      	ldrb	r2, [r3, #1]
 8003ba4:	4b22      	ldr	r3, [pc, #136]	; (8003c30 <HAL_UART_RxCpltCallback+0xa4>)
 8003ba6:	785b      	ldrb	r3, [r3, #1]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d107      	bne.n	8003bbc <HAL_UART_RxCpltCallback+0x30>
		check = Check_Response(Rx_data2);
 8003bac:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <HAL_UART_RxCpltCallback+0xa8>)
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f7fe ffe6 	bl	8002b80 <Check_Response>
 8003bb4:	0002      	movs	r2, r0
 8003bb6:	4b20      	ldr	r3, [pc, #128]	; (8003c38 <HAL_UART_RxCpltCallback+0xac>)
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e026      	b.n	8003c0a <HAL_UART_RxCpltCallback+0x7e>
		//Rx_data2[0] = 0x0;
	}
	else{
		if(Rx_data[0] == 0x03){ // delete single user
 8003bbc:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <HAL_UART_RxCpltCallback+0xa0>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d103      	bne.n	8003bcc <HAL_UART_RxCpltCallback+0x40>
			delete_user_flag = true;
 8003bc4:	4b1d      	ldr	r3, [pc, #116]	; (8003c3c <HAL_UART_RxCpltCallback+0xb0>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	701a      	strb	r2, [r3, #0]
 8003bca:	e016      	b.n	8003bfa <HAL_UART_RxCpltCallback+0x6e>
			//int del_id = 0;
			//del_id = del_id + (int)Rx_data[1];
			//check database for user and let pi know if user doesn't exist. let pi know if completed successfully
			//SendtoFP(Delete_packet(del_id));
		}
		else if(Rx_data[0] == 0x04){
 8003bcc:	4b17      	ldr	r3, [pc, #92]	; (8003c2c <HAL_UART_RxCpltCallback+0xa0>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d103      	bne.n	8003bdc <HAL_UART_RxCpltCallback+0x50>
			new_user_flag = true;
 8003bd4:	4b1a      	ldr	r3, [pc, #104]	; (8003c40 <HAL_UART_RxCpltCallback+0xb4>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	701a      	strb	r2, [r3, #0]
 8003bda:	e00e      	b.n	8003bfa <HAL_UART_RxCpltCallback+0x6e>
			  LED_FP(0);
			  //while(HAL_GPIO_ReadPin(GPIOC, FINGERPRINT_SENSE_Pin) != 0 && timeout_cnt < timeout2){timeout_cnt++;} // get finger off scanner
			  timeout_cnt = 0;
			  */
		}
		else if(Rx_data[0] == 0x02) { // delete all users
 8003bdc:	4b13      	ldr	r3, [pc, #76]	; (8003c2c <HAL_UART_RxCpltCallback+0xa0>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d103      	bne.n	8003bec <HAL_UART_RxCpltCallback+0x60>
			clear_users_flag = true;
 8003be4:	4b17      	ldr	r3, [pc, #92]	; (8003c44 <HAL_UART_RxCpltCallback+0xb8>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	701a      	strb	r2, [r3, #0]
 8003bea:	e006      	b.n	8003bfa <HAL_UART_RxCpltCallback+0x6e>
			//SendtoFP(Deleteall_packet());
		}
		else if(Rx_data[0] == 0x01) { // unlock
 8003bec:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <HAL_UART_RxCpltCallback+0xa0>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d102      	bne.n	8003bfa <HAL_UART_RxCpltCallback+0x6e>
			unlock_flag = true;
 8003bf4:	4b14      	ldr	r3, [pc, #80]	; (8003c48 <HAL_UART_RxCpltCallback+0xbc>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	701a      	strb	r2, [r3, #0]
			//GetUnlockDoor();
		}
		old_Rx_data[0] = Rx_data[0];
 8003bfa:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <HAL_UART_RxCpltCallback+0xa0>)
 8003bfc:	781a      	ldrb	r2, [r3, #0]
 8003bfe:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <HAL_UART_RxCpltCallback+0xa4>)
 8003c00:	701a      	strb	r2, [r3, #0]
		old_Rx_data[1] = Rx_data[1];
 8003c02:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <HAL_UART_RxCpltCallback+0xa0>)
 8003c04:	785a      	ldrb	r2, [r3, #1]
 8003c06:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <HAL_UART_RxCpltCallback+0xa4>)
 8003c08:	705a      	strb	r2, [r3, #1]
	}

	HAL_UART_Receive_IT (&huart2, Rx_data2, 12);
 8003c0a:	490a      	ldr	r1, [pc, #40]	; (8003c34 <HAL_UART_RxCpltCallback+0xa8>)
 8003c0c:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <HAL_UART_RxCpltCallback+0xc0>)
 8003c0e:	220c      	movs	r2, #12
 8003c10:	0018      	movs	r0, r3
 8003c12:	f7fe f885 	bl	8001d20 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT (&huart1, Rx_data, 2);
 8003c16:	4905      	ldr	r1, [pc, #20]	; (8003c2c <HAL_UART_RxCpltCallback+0xa0>)
 8003c18:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <HAL_UART_RxCpltCallback+0xc4>)
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f7fe f87f 	bl	8001d20 <HAL_UART_Receive_IT>
}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b002      	add	sp, #8
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	200001a8 	.word	0x200001a8
 8003c30:	200003b0 	.word	0x200003b0
 8003c34:	20000138 	.word	0x20000138
 8003c38:	200000c8 	.word	0x200000c8
 8003c3c:	200000d5 	.word	0x200000d5
 8003c40:	200000d4 	.word	0x200000d4
 8003c44:	200000d6 	.word	0x200000d6
 8003c48:	200000d7 	.word	0x200000d7
 8003c4c:	20000414 	.word	0x20000414
 8003c50:	20000210 	.word	0x20000210

08003c54 <HAL_ADC_ConvCpltCallback>:

	return return_val;
}
*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 adc_value = HAL_ADC_GetValue(hadc1);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f7fc fcfa 	bl	8000658 <HAL_ADC_GetValue>
 8003c64:	0003      	movs	r3, r0
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <HAL_ADC_ConvCpltCallback+0xa8>)
 8003c6a:	801a      	strh	r2, [r3, #0]
 if(no_ir_flag == false && adc_value > 2500 && image_taken == 0 && first_run == 2){
 8003c6c:	4b24      	ldr	r3, [pc, #144]	; (8003d00 <HAL_ADC_ConvCpltCallback+0xac>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2201      	movs	r2, #1
 8003c72:	4053      	eors	r3, r2
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d020      	beq.n	8003cbc <HAL_ADC_ConvCpltCallback+0x68>
 8003c7a:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <HAL_ADC_ConvCpltCallback+0xa8>)
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	4a21      	ldr	r2, [pc, #132]	; (8003d04 <HAL_ADC_ConvCpltCallback+0xb0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d91b      	bls.n	8003cbc <HAL_ADC_ConvCpltCallback+0x68>
 8003c84:	4b20      	ldr	r3, [pc, #128]	; (8003d08 <HAL_ADC_ConvCpltCallback+0xb4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d117      	bne.n	8003cbc <HAL_ADC_ConvCpltCallback+0x68>
 8003c8c:	4b1f      	ldr	r3, [pc, #124]	; (8003d0c <HAL_ADC_ConvCpltCallback+0xb8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d113      	bne.n	8003cbc <HAL_ADC_ConvCpltCallback+0x68>
	 ir_cnt++;
 8003c94:	4b1e      	ldr	r3, [pc, #120]	; (8003d10 <HAL_ADC_ConvCpltCallback+0xbc>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	4b1d      	ldr	r3, [pc, #116]	; (8003d10 <HAL_ADC_ConvCpltCallback+0xbc>)
 8003c9c:	601a      	str	r2, [r3, #0]

	 //if(ir_cnt > 1000000){
	 if(ir_cnt > 100000){
 8003c9e:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <HAL_ADC_ConvCpltCallback+0xbc>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a1c      	ldr	r2, [pc, #112]	; (8003d14 <HAL_ADC_ConvCpltCallback+0xc0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	dd18      	ble.n	8003cda <HAL_ADC_ConvCpltCallback+0x86>
		 intruder_flag = true;
 8003ca8:	4b1b      	ldr	r3, [pc, #108]	; (8003d18 <HAL_ADC_ConvCpltCallback+0xc4>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	701a      	strb	r2, [r3, #0]
		 ir_cnt = 0;
 8003cae:	4b18      	ldr	r3, [pc, #96]	; (8003d10 <HAL_ADC_ConvCpltCallback+0xbc>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
		 image_taken = 1;
 8003cb4:	4b14      	ldr	r3, [pc, #80]	; (8003d08 <HAL_ADC_ConvCpltCallback+0xb4>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
	 if(ir_cnt > 100000){
 8003cba:	e00e      	b.n	8003cda <HAL_ADC_ConvCpltCallback+0x86>
	 }
	 //ir_flag = 1;
 }
 else if(adc_value <= 2300 || no_ir_flag == true){
 8003cbc:	4b0f      	ldr	r3, [pc, #60]	; (8003cfc <HAL_ADC_ConvCpltCallback+0xa8>)
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	4a16      	ldr	r2, [pc, #88]	; (8003d1c <HAL_ADC_ConvCpltCallback+0xc8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d903      	bls.n	8003cce <HAL_ADC_ConvCpltCallback+0x7a>
 8003cc6:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <HAL_ADC_ConvCpltCallback+0xac>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <HAL_ADC_ConvCpltCallback+0x86>
	 image_taken = 0;
 8003cce:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <HAL_ADC_ConvCpltCallback+0xb4>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
	 ir_cnt = 0;
 8003cd4:	4b0e      	ldr	r3, [pc, #56]	; (8003d10 <HAL_ADC_ConvCpltCallback+0xbc>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	601a      	str	r2, [r3, #0]
	 //no_ir_flag = false;
	 //ir_flag = 0;
 }
 if(first_run < 2){first_run++;}
 8003cda:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <HAL_ADC_ConvCpltCallback+0xb8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	dc04      	bgt.n	8003cec <HAL_ADC_ConvCpltCallback+0x98>
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <HAL_ADC_ConvCpltCallback+0xb8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	4b08      	ldr	r3, [pc, #32]	; (8003d0c <HAL_ADC_ConvCpltCallback+0xb8>)
 8003cea:	601a      	str	r2, [r3, #0]

 HAL_ADC_Start_IT(hadc1);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f7fc fc40 	bl	8000574 <HAL_ADC_Start_IT>
}
 8003cf4:	46c0      	nop			; (mov r8, r8)
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	b002      	add	sp, #8
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	2000020c 	.word	0x2000020c
 8003d00:	200000cc 	.word	0x200000cc
 8003d04:	000009c4 	.word	0x000009c4
 8003d08:	200000bc 	.word	0x200000bc
 8003d0c:	200000c0 	.word	0x200000c0
 8003d10:	200000c4 	.word	0x200000c4
 8003d14:	000186a0 	.word	0x000186a0
 8003d18:	200000d8 	.word	0x200000d8
 8003d1c:	000008fc 	.word	0x000008fc

08003d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d20:	b590      	push	{r4, r7, lr}
 8003d22:	b08d      	sub	sp, #52	; 0x34
 8003d24:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d26:	f7fc fa83 	bl	8000230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d2a:	f000 f985 	bl	8004038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d2e:	f7fe fe4f 	bl	80029d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003d32:	f000 fabf 	bl	80042b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003d36:	f000 faed 	bl	8004314 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8003d3a:	f7fe fd93 	bl	8002864 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc);
 8003d3e:	4bae      	ldr	r3, [pc, #696]	; (8003ff8 <main+0x2d8>)
 8003d40:	0018      	movs	r0, r3
 8003d42:	f7fc fc17 	bl	8000574 <HAL_ADC_Start_IT>
  HAL_GPIO_WritePin(GPIOC, SOLENOID_ENABLE_Pin, RESET);
 8003d46:	2380      	movs	r3, #128	; 0x80
 8003d48:	019b      	lsls	r3, r3, #6
 8003d4a:	48ac      	ldr	r0, [pc, #688]	; (8003ffc <main+0x2dc>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	0019      	movs	r1, r3
 8003d50:	f7fd f98f 	bl	8001072 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ELECTRO_ENABLE_Pin, RESET);
 8003d54:	2390      	movs	r3, #144	; 0x90
 8003d56:	05db      	lsls	r3, r3, #23
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2140      	movs	r1, #64	; 0x40
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f7fd f988 	bl	8001072 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, ELECTROMAGNET_Pin, RESET);
 8003d62:	4ba6      	ldr	r3, [pc, #664]	; (8003ffc <main+0x2dc>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	2140      	movs	r1, #64	; 0x40
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f7fd f982 	bl	8001072 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, SOLENOID_Pin, RESET);
 8003d6e:	4ba3      	ldr	r3, [pc, #652]	; (8003ffc <main+0x2dc>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	2180      	movs	r1, #128	; 0x80
 8003d74:	0018      	movs	r0, r3
 8003d76:	f7fd f97c 	bl	8001072 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SOLENOID_INVERT_Pin, RESET);
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	021b      	lsls	r3, r3, #8
 8003d7e:	48a0      	ldr	r0, [pc, #640]	; (8004000 <main+0x2e0>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	0019      	movs	r1, r3
 8003d84:	f7fd f975 	bl	8001072 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ELECTROMAGNET_INVERT_Pin, RESET);
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	01db      	lsls	r3, r3, #7
 8003d8c:	489c      	ldr	r0, [pc, #624]	; (8004000 <main+0x2e0>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	0019      	movs	r1, r3
 8003d92:	f7fd f96e 	bl	8001072 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, IR_RECIEVE_Pin, SET);
 8003d96:	2380      	movs	r3, #128	; 0x80
 8003d98:	0059      	lsls	r1, r3, #1
 8003d9a:	2390      	movs	r3, #144	; 0x90
 8003d9c:	05db      	lsls	r3, r3, #23
 8003d9e:	2201      	movs	r2, #1
 8003da0:	0018      	movs	r0, r3
 8003da2:	f7fd f966 	bl	8001072 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT (&huart2, Rx_data2, 12);
 8003da6:	4997      	ldr	r1, [pc, #604]	; (8004004 <main+0x2e4>)
 8003da8:	4b97      	ldr	r3, [pc, #604]	; (8004008 <main+0x2e8>)
 8003daa:	220c      	movs	r2, #12
 8003dac:	0018      	movs	r0, r3
 8003dae:	f7fd ffb7 	bl	8001d20 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT (&huart1, Rx_data, 2);
 8003db2:	4996      	ldr	r1, [pc, #600]	; (800400c <main+0x2ec>)
 8003db4:	4b96      	ldr	r3, [pc, #600]	; (8004010 <main+0x2f0>)
 8003db6:	2202      	movs	r2, #2
 8003db8:	0018      	movs	r0, r3
 8003dba:	f7fd ffb1 	bl	8001d20 <HAL_UART_Receive_IT>
  LED_FP(0);
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	f7ff f972 	bl	80030a8 <LED_FP>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(Debounce(4)){ // ===== PCB: IDENTIFY FINGER
 8003dc4:	2004      	movs	r0, #4
 8003dc6:	f7ff fcff 	bl	80037c8 <Debounce>
 8003dca:	1e03      	subs	r3, r0, #0
 8003dcc:	d03b      	beq.n	8003e46 <main+0x126>
		  no_ir_flag = true;
 8003dce:	4b91      	ldr	r3, [pc, #580]	; (8004014 <main+0x2f4>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	701a      	strb	r2, [r3, #0]
		  LED_FP(1);
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	f7ff f967 	bl	80030a8 <LED_FP>
		  int db_check;
		  if((db_check = Check_DB()) == 1){
 8003dda:	f7ff fb3d 	bl	8003458 <Check_DB>
 8003dde:	0003      	movs	r3, r0
 8003de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d113      	bne.n	8003e10 <main+0xf0>
			  int id = Identify_finger();
 8003de8:	f7ff fac6 	bl	8003378 <Identify_finger>
 8003dec:	0003      	movs	r3, r0
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
			  if(id == -1 || id == 0) {// finger not found
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	3301      	adds	r3, #1
 8003df4:	d002      	beq.n	8003dfc <main+0xdc>
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d102      	bne.n	8003e02 <main+0xe2>
				  SendDeniedFPS();
 8003dfc:	f7ff fc02 	bl	8003604 <SendDeniedFPS>
 8003e00:	e008      	b.n	8003e14 <main+0xf4>
			  }
			  else{ // access granted
				  //for(int i = 0; i < id; i++){
					//  Flash_LED();
				  //}
				  SendAccessFPS(id);
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	0018      	movs	r0, r3
 8003e06:	f7ff fbe1 	bl	80035cc <SendAccessFPS>
				  GetUnlockDoor();
 8003e0a:	f7ff fc4b 	bl	80036a4 <GetUnlockDoor>
 8003e0e:	e007      	b.n	8003e20 <main+0x100>
			  }
		  }
		  else{SendDeniedFPS();}
 8003e10:	f7ff fbf8 	bl	8003604 <SendDeniedFPS>
		  //LED_FP(0);
		  while(HAL_GPIO_ReadPin(GPIOC, FINGERPRINT_SENSE_Pin) != 0 && timeout_cnt < timeout2){timeout_cnt++;} // get finger off scanner
 8003e14:	e004      	b.n	8003e20 <main+0x100>
 8003e16:	4b80      	ldr	r3, [pc, #512]	; (8004018 <main+0x2f8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	4b7e      	ldr	r3, [pc, #504]	; (8004018 <main+0x2f8>)
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	2380      	movs	r3, #128	; 0x80
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4a75      	ldr	r2, [pc, #468]	; (8003ffc <main+0x2dc>)
 8003e26:	0019      	movs	r1, r3
 8003e28:	0010      	movs	r0, r2
 8003e2a:	f7fd f905 	bl	8001038 <HAL_GPIO_ReadPin>
 8003e2e:	1e03      	subs	r3, r0, #0
 8003e30:	d005      	beq.n	8003e3e <main+0x11e>
 8003e32:	4b79      	ldr	r3, [pc, #484]	; (8004018 <main+0x2f8>)
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	4b79      	ldr	r3, [pc, #484]	; (800401c <main+0x2fc>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	dbeb      	blt.n	8003e16 <main+0xf6>
		  timeout_cnt = 0;
 8003e3e:	4b76      	ldr	r3, [pc, #472]	; (8004018 <main+0x2f8>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	e070      	b.n	8003f28 <main+0x208>
	  }
	  else if(Debounce(0)){ // ===== PCB: RESET
 8003e46:	2000      	movs	r0, #0
 8003e48:	f7ff fcbe 	bl	80037c8 <Debounce>
 8003e4c:	1e03      	subs	r3, r0, #0
 8003e4e:	d010      	beq.n	8003e72 <main+0x152>
		  no_ir_flag = true;
 8003e50:	4b70      	ldr	r3, [pc, #448]	; (8004014 <main+0x2f4>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	701a      	strb	r2, [r3, #0]
		  LED_FP(1);
 8003e56:	2001      	movs	r0, #1
 8003e58:	f7ff f926 	bl	80030a8 <LED_FP>
		  HAL_Delay(1000);
 8003e5c:	23fa      	movs	r3, #250	; 0xfa
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	0018      	movs	r0, r3
 8003e62:	f7fc fa2b 	bl	80002bc <HAL_Delay>
		  LED_FP(0);
 8003e66:	2000      	movs	r0, #0
 8003e68:	f7ff f91e 	bl	80030a8 <LED_FP>
		  NVIC_SystemReset();
 8003e6c:	f7fe fe62 	bl	8002b34 <NVIC_SystemReset>
 8003e70:	e05a      	b.n	8003f28 <main+0x208>
	  }
	  else if(Debounce(2)){ // ===== PCB: KEY USED
 8003e72:	2002      	movs	r0, #2
 8003e74:	f7ff fca8 	bl	80037c8 <Debounce>
 8003e78:	1e03      	subs	r3, r0, #0
 8003e7a:	d005      	beq.n	8003e88 <main+0x168>
		  no_ir_flag = true;
 8003e7c:	4b65      	ldr	r3, [pc, #404]	; (8004014 <main+0x2f4>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	701a      	strb	r2, [r3, #0]
		  SendAccessKey();
 8003e82:	f7ff fc1d 	bl	80036c0 <SendAccessKey>
 8003e86:	e04f      	b.n	8003f28 <main+0x208>
	  }
	  //else if(Debounce(3)){ // ===== PCB: DOOR OPEN
		//  no_ir_flag = true;
	  //}
	  else if(Debounce(1)){ // ===== PCB: LEARN FINGER
 8003e88:	2001      	movs	r0, #1
 8003e8a:	f7ff fc9d 	bl	80037c8 <Debounce>
 8003e8e:	1e03      	subs	r3, r0, #0
 8003e90:	d047      	beq.n	8003f22 <main+0x202>
		  LED_FP(1);
 8003e92:	2001      	movs	r0, #1
 8003e94:	f7ff f908 	bl	80030a8 <LED_FP>
		  no_ir_flag = true;
 8003e98:	4b5e      	ldr	r3, [pc, #376]	; (8004014 <main+0x2f4>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	701a      	strb	r2, [r3, #0]
		  while(HAL_GPIO_ReadPin(GPIOC, FINGERPRINT_SENSE_Pin) == 0 && timeout_cnt < timeout){timeout_cnt++;} // put finger on scanner
 8003e9e:	e004      	b.n	8003eaa <main+0x18a>
 8003ea0:	4b5d      	ldr	r3, [pc, #372]	; (8004018 <main+0x2f8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	4b5c      	ldr	r3, [pc, #368]	; (8004018 <main+0x2f8>)
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	2380      	movs	r3, #128	; 0x80
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4a53      	ldr	r2, [pc, #332]	; (8003ffc <main+0x2dc>)
 8003eb0:	0019      	movs	r1, r3
 8003eb2:	0010      	movs	r0, r2
 8003eb4:	f7fd f8c0 	bl	8001038 <HAL_GPIO_ReadPin>
 8003eb8:	1e03      	subs	r3, r0, #0
 8003eba:	d105      	bne.n	8003ec8 <main+0x1a8>
 8003ebc:	4b56      	ldr	r3, [pc, #344]	; (8004018 <main+0x2f8>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4b57      	ldr	r3, [pc, #348]	; (8004020 <main+0x300>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	dbeb      	blt.n	8003ea0 <main+0x180>
		  if(timeout_cnt < timeout){
 8003ec8:	4b53      	ldr	r3, [pc, #332]	; (8004018 <main+0x2f8>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	4b54      	ldr	r3, [pc, #336]	; (8004020 <main+0x300>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	da07      	bge.n	8003ee4 <main+0x1c4>
			  int new_id = Enroll_finger();
 8003ed4:	f7ff f934 	bl	8003140 <Enroll_finger>
 8003ed8:	0003      	movs	r3, r0
 8003eda:	62fb      	str	r3, [r7, #44]	; 0x2c
			  SendNewUserFPS(new_id);
 8003edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f7ff fbc4 	bl	800366c <SendNewUserFPS>
		  }
		  timeout_cnt = 0;
 8003ee4:	4b4c      	ldr	r3, [pc, #304]	; (8004018 <main+0x2f8>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]
		  LED_FP(0);
 8003eea:	2000      	movs	r0, #0
 8003eec:	f7ff f8dc 	bl	80030a8 <LED_FP>
		  while(HAL_GPIO_ReadPin(GPIOC, FINGERPRINT_SENSE_Pin) != 0 && timeout_cnt < timeout2){timeout_cnt++;} // get finger off scanner
 8003ef0:	e004      	b.n	8003efc <main+0x1dc>
 8003ef2:	4b49      	ldr	r3, [pc, #292]	; (8004018 <main+0x2f8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	4b47      	ldr	r3, [pc, #284]	; (8004018 <main+0x2f8>)
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	2380      	movs	r3, #128	; 0x80
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4a3e      	ldr	r2, [pc, #248]	; (8003ffc <main+0x2dc>)
 8003f02:	0019      	movs	r1, r3
 8003f04:	0010      	movs	r0, r2
 8003f06:	f7fd f897 	bl	8001038 <HAL_GPIO_ReadPin>
 8003f0a:	1e03      	subs	r3, r0, #0
 8003f0c:	d005      	beq.n	8003f1a <main+0x1fa>
 8003f0e:	4b42      	ldr	r3, [pc, #264]	; (8004018 <main+0x2f8>)
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	4b42      	ldr	r3, [pc, #264]	; (800401c <main+0x2fc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	dbeb      	blt.n	8003ef2 <main+0x1d2>
		  timeout_cnt = 0;
 8003f1a:	4b3f      	ldr	r3, [pc, #252]	; (8004018 <main+0x2f8>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]
 8003f20:	e002      	b.n	8003f28 <main+0x208>
	  }
	  else{ no_ir_flag = false;}
 8003f22:	4b3c      	ldr	r3, [pc, #240]	; (8004014 <main+0x2f4>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]

	  if(new_user_flag){ // ======== SERVER REQUEST: NEW USER
 8003f28:	4b3e      	ldr	r3, [pc, #248]	; (8004024 <main+0x304>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d020      	beq.n	8003f72 <main+0x252>
		  LED_FP(1);
 8003f30:	2001      	movs	r0, #1
 8003f32:	f7ff f8b9 	bl	80030a8 <LED_FP>
		  new_user_flag = false;
 8003f36:	4b3b      	ldr	r3, [pc, #236]	; (8004024 <main+0x304>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	701a      	strb	r2, [r3, #0]
		  no_ir_flag = true;
 8003f3c:	4b35      	ldr	r3, [pc, #212]	; (8004014 <main+0x2f4>)
 8003f3e:	2201      	movs	r2, #1
 8003f40:	701a      	strb	r2, [r3, #0]
		  // put finger on scanner
		  if(WaitFingerPlace(timeout)){
 8003f42:	4b37      	ldr	r3, [pc, #220]	; (8004020 <main+0x300>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7ff fbfc 	bl	8003744 <WaitFingerPlace>
 8003f4c:	1e03      	subs	r3, r0, #0
 8003f4e:	d007      	beq.n	8003f60 <main+0x240>
			  int new_id = Enroll_finger();
 8003f50:	f7ff f8f6 	bl	8003140 <Enroll_finger>
 8003f54:	0003      	movs	r3, r0
 8003f56:	61fb      	str	r3, [r7, #28]
			  SendNewUserFPS(new_id);
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f7ff fb86 	bl	800366c <SendNewUserFPS>
		  }
		  // get finger off scanner
		  WaitFingerRemove(timeout2);
 8003f60:	4b2e      	ldr	r3, [pc, #184]	; (800401c <main+0x2fc>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	0018      	movs	r0, r3
 8003f66:	f7ff fc11 	bl	800378c <WaitFingerRemove>
		  LED_FP(0);
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	f7ff f89c 	bl	80030a8 <LED_FP>
 8003f70:	e037      	b.n	8003fe2 <main+0x2c2>
	  }
	  else if(clear_users_flag){ // ===== SERVER REQUEST: DELETE ALL USERS
 8003f72:	4b2d      	ldr	r3, [pc, #180]	; (8004028 <main+0x308>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00d      	beq.n	8003f96 <main+0x276>
		  clear_users_flag = false;
 8003f7a:	4b2b      	ldr	r3, [pc, #172]	; (8004028 <main+0x308>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	701a      	strb	r2, [r3, #0]
		  SendtoFP(Deleteall_packet());
 8003f80:	1d3b      	adds	r3, r7, #4
 8003f82:	0018      	movs	r0, r3
 8003f84:	f7ff f81f 	bl	8002fc6 <Deleteall_packet>
 8003f88:	1d3b      	adds	r3, r7, #4
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	6859      	ldr	r1, [r3, #4]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	f7fe fe9a 	bl	8002cc8 <SendtoFP>
 8003f94:	e025      	b.n	8003fe2 <main+0x2c2>
	  }
	  else if(delete_user_flag){ // ===== SERVER REQUEST: DELETE USER BY ID
 8003f96:	4b25      	ldr	r3, [pc, #148]	; (800402c <main+0x30c>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d018      	beq.n	8003fd0 <main+0x2b0>
		  delete_user_flag = false;
 8003f9e:	4b23      	ldr	r3, [pc, #140]	; (800402c <main+0x30c>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	701a      	strb	r2, [r3, #0]
		  int del_id = 0;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	623b      	str	r3, [r7, #32]
		  del_id = del_id + (int)Rx_data[1];
 8003fa8:	4b18      	ldr	r3, [pc, #96]	; (800400c <main+0x2ec>)
 8003faa:	785b      	ldrb	r3, [r3, #1]
 8003fac:	001a      	movs	r2, r3
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	189b      	adds	r3, r3, r2
 8003fb2:	623b      	str	r3, [r7, #32]
		  SendtoFP(Delete_packet(del_id));
 8003fb4:	2410      	movs	r4, #16
 8003fb6:	193b      	adds	r3, r7, r4
 8003fb8:	6a3a      	ldr	r2, [r7, #32]
 8003fba:	0011      	movs	r1, r2
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f7fe ffe0 	bl	8002f82 <Delete_packet>
 8003fc2:	193b      	adds	r3, r7, r4
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	6859      	ldr	r1, [r3, #4]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	f7fe fe7d 	bl	8002cc8 <SendtoFP>
 8003fce:	e008      	b.n	8003fe2 <main+0x2c2>
	  }
	  else if(unlock_flag){ // ===== SERVER REQUEST: UNLOCK DOOR
 8003fd0:	4b17      	ldr	r3, [pc, #92]	; (8004030 <main+0x310>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d004      	beq.n	8003fe2 <main+0x2c2>
		  unlock_flag = false;
 8003fd8:	4b15      	ldr	r3, [pc, #84]	; (8004030 <main+0x310>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]
		  GetUnlockDoor();
 8003fde:	f7ff fb61 	bl	80036a4 <GetUnlockDoor>
	  }

	  if(intruder_flag){ // ===== IR SENSOR: INTRUDER
 8003fe2:	4b14      	ldr	r3, [pc, #80]	; (8004034 <main+0x314>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d100      	bne.n	8003fec <main+0x2cc>
 8003fea:	e6eb      	b.n	8003dc4 <main+0xa4>
		  intruder_flag = false;
 8003fec:	4b11      	ldr	r3, [pc, #68]	; (8004034 <main+0x314>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]
		  SendDeniedIR();
 8003ff2:	f7ff fb21 	bl	8003638 <SendDeniedIR>
	  if(Debounce(4)){ // ===== PCB: IDENTIFY FINGER
 8003ff6:	e6e5      	b.n	8003dc4 <main+0xa4>
 8003ff8:	200000ec 	.word	0x200000ec
 8003ffc:	48000800 	.word	0x48000800
 8004000:	48000400 	.word	0x48000400
 8004004:	20000138 	.word	0x20000138
 8004008:	20000414 	.word	0x20000414
 800400c:	200001a8 	.word	0x200001a8
 8004010:	20000210 	.word	0x20000210
 8004014:	200000cc 	.word	0x200000cc
 8004018:	200000d0 	.word	0x200000d0
 800401c:	20000008 	.word	0x20000008
 8004020:	20000004 	.word	0x20000004
 8004024:	200000d4 	.word	0x200000d4
 8004028:	200000d6 	.word	0x200000d6
 800402c:	200000d5 	.word	0x200000d5
 8004030:	200000d7 	.word	0x200000d7
 8004034:	200000d8 	.word	0x200000d8

08004038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004038:	b590      	push	{r4, r7, lr}
 800403a:	b097      	sub	sp, #92	; 0x5c
 800403c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800403e:	2428      	movs	r4, #40	; 0x28
 8004040:	193b      	adds	r3, r7, r4
 8004042:	0018      	movs	r0, r3
 8004044:	2330      	movs	r3, #48	; 0x30
 8004046:	001a      	movs	r2, r3
 8004048:	2100      	movs	r1, #0
 800404a:	f000 fa88 	bl	800455e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800404e:	2318      	movs	r3, #24
 8004050:	18fb      	adds	r3, r7, r3
 8004052:	0018      	movs	r0, r3
 8004054:	2310      	movs	r3, #16
 8004056:	001a      	movs	r2, r3
 8004058:	2100      	movs	r1, #0
 800405a:	f000 fa80 	bl	800455e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800405e:	1d3b      	adds	r3, r7, #4
 8004060:	0018      	movs	r0, r3
 8004062:	2314      	movs	r3, #20
 8004064:	001a      	movs	r2, r3
 8004066:	2100      	movs	r1, #0
 8004068:	f000 fa79 	bl	800455e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800406c:	0021      	movs	r1, r4
 800406e:	187b      	adds	r3, r7, r1
 8004070:	2212      	movs	r2, #18
 8004072:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004074:	187b      	adds	r3, r7, r1
 8004076:	2201      	movs	r2, #1
 8004078:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800407a:	187b      	adds	r3, r7, r1
 800407c:	2201      	movs	r2, #1
 800407e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004080:	187b      	adds	r3, r7, r1
 8004082:	2210      	movs	r2, #16
 8004084:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8004086:	187b      	adds	r3, r7, r1
 8004088:	2210      	movs	r2, #16
 800408a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800408c:	187b      	adds	r3, r7, r1
 800408e:	2202      	movs	r2, #2
 8004090:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004092:	187b      	adds	r3, r7, r1
 8004094:	2200      	movs	r2, #0
 8004096:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8004098:	187b      	adds	r3, r7, r1
 800409a:	22a0      	movs	r2, #160	; 0xa0
 800409c:	0392      	lsls	r2, r2, #14
 800409e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80040a0:	187b      	adds	r3, r7, r1
 80040a2:	2200      	movs	r2, #0
 80040a4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040a6:	187b      	adds	r3, r7, r1
 80040a8:	0018      	movs	r0, r3
 80040aa:	f7fc ffff 	bl	80010ac <HAL_RCC_OscConfig>
 80040ae:	1e03      	subs	r3, r0, #0
 80040b0:	d001      	beq.n	80040b6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80040b2:	f000 f828 	bl	8004106 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040b6:	2118      	movs	r1, #24
 80040b8:	187b      	adds	r3, r7, r1
 80040ba:	2207      	movs	r2, #7
 80040bc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040be:	187b      	adds	r3, r7, r1
 80040c0:	2202      	movs	r2, #2
 80040c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040c4:	187b      	adds	r3, r7, r1
 80040c6:	2200      	movs	r2, #0
 80040c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80040ca:	187b      	adds	r3, r7, r1
 80040cc:	2200      	movs	r2, #0
 80040ce:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80040d0:	187b      	adds	r3, r7, r1
 80040d2:	2101      	movs	r1, #1
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7fd fadd 	bl	8001694 <HAL_RCC_ClockConfig>
 80040da:	1e03      	subs	r3, r0, #0
 80040dc:	d001      	beq.n	80040e2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80040de:	f000 f812 	bl	8004106 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80040e2:	1d3b      	adds	r3, r7, #4
 80040e4:	2201      	movs	r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80040e8:	1d3b      	adds	r3, r7, #4
 80040ea:	2200      	movs	r2, #0
 80040ec:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040ee:	1d3b      	adds	r3, r7, #4
 80040f0:	0018      	movs	r0, r3
 80040f2:	f7fd fc3b 	bl	800196c <HAL_RCCEx_PeriphCLKConfig>
 80040f6:	1e03      	subs	r3, r0, #0
 80040f8:	d001      	beq.n	80040fe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80040fa:	f000 f804 	bl	8004106 <Error_Handler>
  }
}
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	46bd      	mov	sp, r7
 8004102:	b017      	add	sp, #92	; 0x5c
 8004104:	bd90      	pop	{r4, r7, pc}

08004106 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004116:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <HAL_MspInit+0x44>)
 8004118:	699a      	ldr	r2, [r3, #24]
 800411a:	4b0e      	ldr	r3, [pc, #56]	; (8004154 <HAL_MspInit+0x44>)
 800411c:	2101      	movs	r1, #1
 800411e:	430a      	orrs	r2, r1
 8004120:	619a      	str	r2, [r3, #24]
 8004122:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <HAL_MspInit+0x44>)
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	2201      	movs	r2, #1
 8004128:	4013      	ands	r3, r2
 800412a:	607b      	str	r3, [r7, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800412e:	4b09      	ldr	r3, [pc, #36]	; (8004154 <HAL_MspInit+0x44>)
 8004130:	69da      	ldr	r2, [r3, #28]
 8004132:	4b08      	ldr	r3, [pc, #32]	; (8004154 <HAL_MspInit+0x44>)
 8004134:	2180      	movs	r1, #128	; 0x80
 8004136:	0549      	lsls	r1, r1, #21
 8004138:	430a      	orrs	r2, r1
 800413a:	61da      	str	r2, [r3, #28]
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <HAL_MspInit+0x44>)
 800413e:	69da      	ldr	r2, [r3, #28]
 8004140:	2380      	movs	r3, #128	; 0x80
 8004142:	055b      	lsls	r3, r3, #21
 8004144:	4013      	ands	r3, r2
 8004146:	603b      	str	r3, [r7, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	46bd      	mov	sp, r7
 800414e:	b002      	add	sp, #8
 8004150:	bd80      	pop	{r7, pc}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	40021000 	.word	0x40021000

08004158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800415c:	46c0      	nop			; (mov r8, r8)
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004166:	e7fe      	b.n	8004166 <HardFault_Handler+0x4>

08004168 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800416c:	46c0      	nop			; (mov r8, r8)
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004180:	f7fc f886 	bl	8000290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004184:	46c0      	nop			; (mov r8, r8)
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8004190:	4b03      	ldr	r3, [pc, #12]	; (80041a0 <ADC1_COMP_IRQHandler+0x14>)
 8004192:	0018      	movs	r0, r3
 8004194:	f7fc fa6c 	bl	8000670 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	46c0      	nop			; (mov r8, r8)
 80041a0:	200000ec 	.word	0x200000ec

080041a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80041a8:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <USART1_IRQHandler+0x14>)
 80041aa:	0018      	movs	r0, r3
 80041ac:	f7fd fe42 	bl	8001e34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80041b0:	46c0      	nop			; (mov r8, r8)
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	20000210 	.word	0x20000210

080041bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80041c0:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <USART2_IRQHandler+0x14>)
 80041c2:	0018      	movs	r0, r3
 80041c4:	f7fd fe36 	bl	8001e34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80041c8:	46c0      	nop			; (mov r8, r8)
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	20000414 	.word	0x20000414

080041d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80041dc:	4b11      	ldr	r3, [pc, #68]	; (8004224 <_sbrk+0x50>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d102      	bne.n	80041ea <_sbrk+0x16>
		heap_end = &end;
 80041e4:	4b0f      	ldr	r3, [pc, #60]	; (8004224 <_sbrk+0x50>)
 80041e6:	4a10      	ldr	r2, [pc, #64]	; (8004228 <_sbrk+0x54>)
 80041e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80041ea:	4b0e      	ldr	r3, [pc, #56]	; (8004224 <_sbrk+0x50>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80041f0:	4b0c      	ldr	r3, [pc, #48]	; (8004224 <_sbrk+0x50>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	18d3      	adds	r3, r2, r3
 80041f8:	466a      	mov	r2, sp
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d907      	bls.n	800420e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80041fe:	f000 f97b 	bl	80044f8 <__errno>
 8004202:	0003      	movs	r3, r0
 8004204:	220c      	movs	r2, #12
 8004206:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004208:	2301      	movs	r3, #1
 800420a:	425b      	negs	r3, r3
 800420c:	e006      	b.n	800421c <_sbrk+0x48>
	}

	heap_end += incr;
 800420e:	4b05      	ldr	r3, [pc, #20]	; (8004224 <_sbrk+0x50>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	18d2      	adds	r2, r2, r3
 8004216:	4b03      	ldr	r3, [pc, #12]	; (8004224 <_sbrk+0x50>)
 8004218:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800421a:	68fb      	ldr	r3, [r7, #12]
}
 800421c:	0018      	movs	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	b004      	add	sp, #16
 8004222:	bd80      	pop	{r7, pc}
 8004224:	200000dc 	.word	0x200000dc
 8004228:	20000490 	.word	0x20000490

0800422c <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8004230:	4b1a      	ldr	r3, [pc, #104]	; (800429c <SystemInit+0x70>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	4b19      	ldr	r3, [pc, #100]	; (800429c <SystemInit+0x70>)
 8004236:	2101      	movs	r1, #1
 8004238:	430a      	orrs	r2, r1
 800423a:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 800423c:	4b17      	ldr	r3, [pc, #92]	; (800429c <SystemInit+0x70>)
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	4b16      	ldr	r3, [pc, #88]	; (800429c <SystemInit+0x70>)
 8004242:	4917      	ldr	r1, [pc, #92]	; (80042a0 <SystemInit+0x74>)
 8004244:	400a      	ands	r2, r1
 8004246:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8004248:	4b14      	ldr	r3, [pc, #80]	; (800429c <SystemInit+0x70>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4b13      	ldr	r3, [pc, #76]	; (800429c <SystemInit+0x70>)
 800424e:	4915      	ldr	r1, [pc, #84]	; (80042a4 <SystemInit+0x78>)
 8004250:	400a      	ands	r2, r1
 8004252:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004254:	4b11      	ldr	r3, [pc, #68]	; (800429c <SystemInit+0x70>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	4b10      	ldr	r3, [pc, #64]	; (800429c <SystemInit+0x70>)
 800425a:	4913      	ldr	r1, [pc, #76]	; (80042a8 <SystemInit+0x7c>)
 800425c:	400a      	ands	r2, r1
 800425e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8004260:	4b0e      	ldr	r3, [pc, #56]	; (800429c <SystemInit+0x70>)
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	4b0d      	ldr	r3, [pc, #52]	; (800429c <SystemInit+0x70>)
 8004266:	4911      	ldr	r1, [pc, #68]	; (80042ac <SystemInit+0x80>)
 8004268:	400a      	ands	r2, r1
 800426a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800426c:	4b0b      	ldr	r3, [pc, #44]	; (800429c <SystemInit+0x70>)
 800426e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004270:	4b0a      	ldr	r3, [pc, #40]	; (800429c <SystemInit+0x70>)
 8004272:	210f      	movs	r1, #15
 8004274:	438a      	bics	r2, r1
 8004276:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 8004278:	4b08      	ldr	r3, [pc, #32]	; (800429c <SystemInit+0x70>)
 800427a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800427c:	4b07      	ldr	r3, [pc, #28]	; (800429c <SystemInit+0x70>)
 800427e:	490c      	ldr	r1, [pc, #48]	; (80042b0 <SystemInit+0x84>)
 8004280:	400a      	ands	r2, r1
 8004282:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8004284:	4b05      	ldr	r3, [pc, #20]	; (800429c <SystemInit+0x70>)
 8004286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004288:	4b04      	ldr	r3, [pc, #16]	; (800429c <SystemInit+0x70>)
 800428a:	2101      	movs	r1, #1
 800428c:	438a      	bics	r2, r1
 800428e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004290:	4b02      	ldr	r3, [pc, #8]	; (800429c <SystemInit+0x70>)
 8004292:	2200      	movs	r2, #0
 8004294:	609a      	str	r2, [r3, #8]

}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40021000 	.word	0x40021000
 80042a0:	f8ffb80c 	.word	0xf8ffb80c
 80042a4:	fef6ffff 	.word	0xfef6ffff
 80042a8:	fffbffff 	.word	0xfffbffff
 80042ac:	ffc0ffff 	.word	0xffc0ffff
 80042b0:	fffffeac 	.word	0xfffffeac

080042b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80042b8:	4b14      	ldr	r3, [pc, #80]	; (800430c <MX_USART1_UART_Init+0x58>)
 80042ba:	4a15      	ldr	r2, [pc, #84]	; (8004310 <MX_USART1_UART_Init+0x5c>)
 80042bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80042be:	4b13      	ldr	r3, [pc, #76]	; (800430c <MX_USART1_UART_Init+0x58>)
 80042c0:	22e1      	movs	r2, #225	; 0xe1
 80042c2:	0252      	lsls	r2, r2, #9
 80042c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80042c6:	4b11      	ldr	r3, [pc, #68]	; (800430c <MX_USART1_UART_Init+0x58>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80042cc:	4b0f      	ldr	r3, [pc, #60]	; (800430c <MX_USART1_UART_Init+0x58>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80042d2:	4b0e      	ldr	r3, [pc, #56]	; (800430c <MX_USART1_UART_Init+0x58>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80042d8:	4b0c      	ldr	r3, [pc, #48]	; (800430c <MX_USART1_UART_Init+0x58>)
 80042da:	220c      	movs	r2, #12
 80042dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042de:	4b0b      	ldr	r3, [pc, #44]	; (800430c <MX_USART1_UART_Init+0x58>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80042e4:	4b09      	ldr	r3, [pc, #36]	; (800430c <MX_USART1_UART_Init+0x58>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042ea:	4b08      	ldr	r3, [pc, #32]	; (800430c <MX_USART1_UART_Init+0x58>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042f0:	4b06      	ldr	r3, [pc, #24]	; (800430c <MX_USART1_UART_Init+0x58>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80042f6:	4b05      	ldr	r3, [pc, #20]	; (800430c <MX_USART1_UART_Init+0x58>)
 80042f8:	0018      	movs	r0, r3
 80042fa:	f7fd fc15 	bl	8001b28 <HAL_UART_Init>
 80042fe:	1e03      	subs	r3, r0, #0
 8004300:	d001      	beq.n	8004306 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004302:	f7ff ff00 	bl	8004106 <Error_Handler>
  }

}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20000210 	.word	0x20000210
 8004310:	40013800 	.word	0x40013800

08004314 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004318:	4b14      	ldr	r3, [pc, #80]	; (800436c <MX_USART2_UART_Init+0x58>)
 800431a:	4a15      	ldr	r2, [pc, #84]	; (8004370 <MX_USART2_UART_Init+0x5c>)
 800431c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800431e:	4b13      	ldr	r3, [pc, #76]	; (800436c <MX_USART2_UART_Init+0x58>)
 8004320:	2296      	movs	r2, #150	; 0x96
 8004322:	0192      	lsls	r2, r2, #6
 8004324:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004326:	4b11      	ldr	r3, [pc, #68]	; (800436c <MX_USART2_UART_Init+0x58>)
 8004328:	2200      	movs	r2, #0
 800432a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800432c:	4b0f      	ldr	r3, [pc, #60]	; (800436c <MX_USART2_UART_Init+0x58>)
 800432e:	2200      	movs	r2, #0
 8004330:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004332:	4b0e      	ldr	r3, [pc, #56]	; (800436c <MX_USART2_UART_Init+0x58>)
 8004334:	2200      	movs	r2, #0
 8004336:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004338:	4b0c      	ldr	r3, [pc, #48]	; (800436c <MX_USART2_UART_Init+0x58>)
 800433a:	220c      	movs	r2, #12
 800433c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800433e:	4b0b      	ldr	r3, [pc, #44]	; (800436c <MX_USART2_UART_Init+0x58>)
 8004340:	2200      	movs	r2, #0
 8004342:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004344:	4b09      	ldr	r3, [pc, #36]	; (800436c <MX_USART2_UART_Init+0x58>)
 8004346:	2200      	movs	r2, #0
 8004348:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800434a:	4b08      	ldr	r3, [pc, #32]	; (800436c <MX_USART2_UART_Init+0x58>)
 800434c:	2200      	movs	r2, #0
 800434e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004350:	4b06      	ldr	r3, [pc, #24]	; (800436c <MX_USART2_UART_Init+0x58>)
 8004352:	2200      	movs	r2, #0
 8004354:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004356:	4b05      	ldr	r3, [pc, #20]	; (800436c <MX_USART2_UART_Init+0x58>)
 8004358:	0018      	movs	r0, r3
 800435a:	f7fd fbe5 	bl	8001b28 <HAL_UART_Init>
 800435e:	1e03      	subs	r3, r0, #0
 8004360:	d001      	beq.n	8004366 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004362:	f7ff fed0 	bl	8004106 <Error_Handler>
  }

}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20000414 	.word	0x20000414
 8004370:	40004400 	.word	0x40004400

08004374 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08c      	sub	sp, #48	; 0x30
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800437c:	231c      	movs	r3, #28
 800437e:	18fb      	adds	r3, r7, r3
 8004380:	0018      	movs	r0, r3
 8004382:	2314      	movs	r3, #20
 8004384:	001a      	movs	r2, r3
 8004386:	2100      	movs	r1, #0
 8004388:	f000 f8e9 	bl	800455e <memset>
  if(uartHandle->Instance==USART1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a41      	ldr	r2, [pc, #260]	; (8004498 <HAL_UART_MspInit+0x124>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d13c      	bne.n	8004410 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004396:	4b41      	ldr	r3, [pc, #260]	; (800449c <HAL_UART_MspInit+0x128>)
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	4b40      	ldr	r3, [pc, #256]	; (800449c <HAL_UART_MspInit+0x128>)
 800439c:	2180      	movs	r1, #128	; 0x80
 800439e:	01c9      	lsls	r1, r1, #7
 80043a0:	430a      	orrs	r2, r1
 80043a2:	619a      	str	r2, [r3, #24]
 80043a4:	4b3d      	ldr	r3, [pc, #244]	; (800449c <HAL_UART_MspInit+0x128>)
 80043a6:	699a      	ldr	r2, [r3, #24]
 80043a8:	2380      	movs	r3, #128	; 0x80
 80043aa:	01db      	lsls	r3, r3, #7
 80043ac:	4013      	ands	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
 80043b0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043b2:	4b3a      	ldr	r3, [pc, #232]	; (800449c <HAL_UART_MspInit+0x128>)
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	4b39      	ldr	r3, [pc, #228]	; (800449c <HAL_UART_MspInit+0x128>)
 80043b8:	2180      	movs	r1, #128	; 0x80
 80043ba:	0289      	lsls	r1, r1, #10
 80043bc:	430a      	orrs	r2, r1
 80043be:	615a      	str	r2, [r3, #20]
 80043c0:	4b36      	ldr	r3, [pc, #216]	; (800449c <HAL_UART_MspInit+0x128>)
 80043c2:	695a      	ldr	r2, [r3, #20]
 80043c4:	2380      	movs	r3, #128	; 0x80
 80043c6:	029b      	lsls	r3, r3, #10
 80043c8:	4013      	ands	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = UART_RPI_TX_Pin|UART_RPI_RX_Pin;
 80043ce:	211c      	movs	r1, #28
 80043d0:	187b      	adds	r3, r7, r1
 80043d2:	22c0      	movs	r2, #192	; 0xc0
 80043d4:	00d2      	lsls	r2, r2, #3
 80043d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d8:	187b      	adds	r3, r7, r1
 80043da:	2202      	movs	r2, #2
 80043dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	2200      	movs	r2, #0
 80043e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043e4:	187b      	adds	r3, r7, r1
 80043e6:	2203      	movs	r2, #3
 80043e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80043ea:	187b      	adds	r3, r7, r1
 80043ec:	2201      	movs	r2, #1
 80043ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043f0:	187a      	adds	r2, r7, r1
 80043f2:	2390      	movs	r3, #144	; 0x90
 80043f4:	05db      	lsls	r3, r3, #23
 80043f6:	0011      	movs	r1, r2
 80043f8:	0018      	movs	r0, r3
 80043fa:	f7fc fca9 	bl	8000d50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80043fe:	2200      	movs	r2, #0
 8004400:	2100      	movs	r1, #0
 8004402:	201b      	movs	r0, #27
 8004404:	f7fc fc2c 	bl	8000c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004408:	201b      	movs	r0, #27
 800440a:	f7fc fc3e 	bl	8000c8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800440e:	e03f      	b.n	8004490 <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART2)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a22      	ldr	r2, [pc, #136]	; (80044a0 <HAL_UART_MspInit+0x12c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d13a      	bne.n	8004490 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800441a:	4b20      	ldr	r3, [pc, #128]	; (800449c <HAL_UART_MspInit+0x128>)
 800441c:	69da      	ldr	r2, [r3, #28]
 800441e:	4b1f      	ldr	r3, [pc, #124]	; (800449c <HAL_UART_MspInit+0x128>)
 8004420:	2180      	movs	r1, #128	; 0x80
 8004422:	0289      	lsls	r1, r1, #10
 8004424:	430a      	orrs	r2, r1
 8004426:	61da      	str	r2, [r3, #28]
 8004428:	4b1c      	ldr	r3, [pc, #112]	; (800449c <HAL_UART_MspInit+0x128>)
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	2380      	movs	r3, #128	; 0x80
 800442e:	029b      	lsls	r3, r3, #10
 8004430:	4013      	ands	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004436:	4b19      	ldr	r3, [pc, #100]	; (800449c <HAL_UART_MspInit+0x128>)
 8004438:	695a      	ldr	r2, [r3, #20]
 800443a:	4b18      	ldr	r3, [pc, #96]	; (800449c <HAL_UART_MspInit+0x128>)
 800443c:	2180      	movs	r1, #128	; 0x80
 800443e:	0289      	lsls	r1, r1, #10
 8004440:	430a      	orrs	r2, r1
 8004442:	615a      	str	r2, [r3, #20]
 8004444:	4b15      	ldr	r3, [pc, #84]	; (800449c <HAL_UART_MspInit+0x128>)
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	2380      	movs	r3, #128	; 0x80
 800444a:	029b      	lsls	r3, r3, #10
 800444c:	4013      	ands	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART_FINGER_TX_Pin|UART_FINGER_RX_Pin;
 8004452:	211c      	movs	r1, #28
 8004454:	187b      	adds	r3, r7, r1
 8004456:	220c      	movs	r2, #12
 8004458:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800445a:	187b      	adds	r3, r7, r1
 800445c:	2202      	movs	r2, #2
 800445e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004460:	187b      	adds	r3, r7, r1
 8004462:	2200      	movs	r2, #0
 8004464:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004466:	187b      	adds	r3, r7, r1
 8004468:	2203      	movs	r2, #3
 800446a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800446c:	187b      	adds	r3, r7, r1
 800446e:	2201      	movs	r2, #1
 8004470:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004472:	187a      	adds	r2, r7, r1
 8004474:	2390      	movs	r3, #144	; 0x90
 8004476:	05db      	lsls	r3, r3, #23
 8004478:	0011      	movs	r1, r2
 800447a:	0018      	movs	r0, r3
 800447c:	f7fc fc68 	bl	8000d50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004480:	2200      	movs	r2, #0
 8004482:	2100      	movs	r1, #0
 8004484:	201c      	movs	r0, #28
 8004486:	f7fc fbeb 	bl	8000c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800448a:	201c      	movs	r0, #28
 800448c:	f7fc fbfd 	bl	8000c8a <HAL_NVIC_EnableIRQ>
}
 8004490:	46c0      	nop			; (mov r8, r8)
 8004492:	46bd      	mov	sp, r7
 8004494:	b00c      	add	sp, #48	; 0x30
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40013800 	.word	0x40013800
 800449c:	40021000 	.word	0x40021000
 80044a0:	40004400 	.word	0x40004400

080044a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80044a4:	480d      	ldr	r0, [pc, #52]	; (80044dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80044a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044a8:	480d      	ldr	r0, [pc, #52]	; (80044e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80044aa:	490e      	ldr	r1, [pc, #56]	; (80044e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80044ac:	4a0e      	ldr	r2, [pc, #56]	; (80044e8 <LoopForever+0xe>)
  movs r3, #0
 80044ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044b0:	e002      	b.n	80044b8 <LoopCopyDataInit>

080044b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044b6:	3304      	adds	r3, #4

080044b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044bc:	d3f9      	bcc.n	80044b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044be:	4a0b      	ldr	r2, [pc, #44]	; (80044ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80044c0:	4c0b      	ldr	r4, [pc, #44]	; (80044f0 <LoopForever+0x16>)
  movs r3, #0
 80044c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044c4:	e001      	b.n	80044ca <LoopFillZerobss>

080044c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044c8:	3204      	adds	r2, #4

080044ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044cc:	d3fb      	bcc.n	80044c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80044ce:	f7ff fead 	bl	800422c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80044d2:	f000 f817 	bl	8004504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80044d6:	f7ff fc23 	bl	8003d20 <main>

080044da <LoopForever>:

LoopForever:
    b LoopForever
 80044da:	e7fe      	b.n	80044da <LoopForever>
  ldr   r0, =_estack
 80044dc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80044e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044e4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80044e8:	0800514c 	.word	0x0800514c
  ldr r2, =_sbss
 80044ec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80044f0:	2000048c 	.word	0x2000048c

080044f4 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80044f4:	e7fe      	b.n	80044f4 <CEC_CAN_IRQHandler>
	...

080044f8 <__errno>:
 80044f8:	4b01      	ldr	r3, [pc, #4]	; (8004500 <__errno+0x8>)
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	4770      	bx	lr
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	20000010 	.word	0x20000010

08004504 <__libc_init_array>:
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	2600      	movs	r6, #0
 8004508:	4d0c      	ldr	r5, [pc, #48]	; (800453c <__libc_init_array+0x38>)
 800450a:	4c0d      	ldr	r4, [pc, #52]	; (8004540 <__libc_init_array+0x3c>)
 800450c:	1b64      	subs	r4, r4, r5
 800450e:	10a4      	asrs	r4, r4, #2
 8004510:	42a6      	cmp	r6, r4
 8004512:	d109      	bne.n	8004528 <__libc_init_array+0x24>
 8004514:	2600      	movs	r6, #0
 8004516:	f000 fc5b 	bl	8004dd0 <_init>
 800451a:	4d0a      	ldr	r5, [pc, #40]	; (8004544 <__libc_init_array+0x40>)
 800451c:	4c0a      	ldr	r4, [pc, #40]	; (8004548 <__libc_init_array+0x44>)
 800451e:	1b64      	subs	r4, r4, r5
 8004520:	10a4      	asrs	r4, r4, #2
 8004522:	42a6      	cmp	r6, r4
 8004524:	d105      	bne.n	8004532 <__libc_init_array+0x2e>
 8004526:	bd70      	pop	{r4, r5, r6, pc}
 8004528:	00b3      	lsls	r3, r6, #2
 800452a:	58eb      	ldr	r3, [r5, r3]
 800452c:	4798      	blx	r3
 800452e:	3601      	adds	r6, #1
 8004530:	e7ee      	b.n	8004510 <__libc_init_array+0xc>
 8004532:	00b3      	lsls	r3, r6, #2
 8004534:	58eb      	ldr	r3, [r5, r3]
 8004536:	4798      	blx	r3
 8004538:	3601      	adds	r6, #1
 800453a:	e7f2      	b.n	8004522 <__libc_init_array+0x1e>
 800453c:	08005144 	.word	0x08005144
 8004540:	08005144 	.word	0x08005144
 8004544:	08005144 	.word	0x08005144
 8004548:	08005148 	.word	0x08005148

0800454c <memcpy>:
 800454c:	2300      	movs	r3, #0
 800454e:	b510      	push	{r4, lr}
 8004550:	429a      	cmp	r2, r3
 8004552:	d100      	bne.n	8004556 <memcpy+0xa>
 8004554:	bd10      	pop	{r4, pc}
 8004556:	5ccc      	ldrb	r4, [r1, r3]
 8004558:	54c4      	strb	r4, [r0, r3]
 800455a:	3301      	adds	r3, #1
 800455c:	e7f8      	b.n	8004550 <memcpy+0x4>

0800455e <memset>:
 800455e:	0003      	movs	r3, r0
 8004560:	1812      	adds	r2, r2, r0
 8004562:	4293      	cmp	r3, r2
 8004564:	d100      	bne.n	8004568 <memset+0xa>
 8004566:	4770      	bx	lr
 8004568:	7019      	strb	r1, [r3, #0]
 800456a:	3301      	adds	r3, #1
 800456c:	e7f9      	b.n	8004562 <memset+0x4>
	...

08004570 <sniprintf>:
 8004570:	b40c      	push	{r2, r3}
 8004572:	b530      	push	{r4, r5, lr}
 8004574:	4b16      	ldr	r3, [pc, #88]	; (80045d0 <sniprintf+0x60>)
 8004576:	b09d      	sub	sp, #116	; 0x74
 8004578:	1e0c      	subs	r4, r1, #0
 800457a:	681d      	ldr	r5, [r3, #0]
 800457c:	da08      	bge.n	8004590 <sniprintf+0x20>
 800457e:	238b      	movs	r3, #139	; 0x8b
 8004580:	2001      	movs	r0, #1
 8004582:	602b      	str	r3, [r5, #0]
 8004584:	4240      	negs	r0, r0
 8004586:	b01d      	add	sp, #116	; 0x74
 8004588:	bc30      	pop	{r4, r5}
 800458a:	bc08      	pop	{r3}
 800458c:	b002      	add	sp, #8
 800458e:	4718      	bx	r3
 8004590:	2382      	movs	r3, #130	; 0x82
 8004592:	a902      	add	r1, sp, #8
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	818b      	strh	r3, [r1, #12]
 8004598:	2300      	movs	r3, #0
 800459a:	9002      	str	r0, [sp, #8]
 800459c:	6108      	str	r0, [r1, #16]
 800459e:	429c      	cmp	r4, r3
 80045a0:	d000      	beq.n	80045a4 <sniprintf+0x34>
 80045a2:	1e63      	subs	r3, r4, #1
 80045a4:	608b      	str	r3, [r1, #8]
 80045a6:	614b      	str	r3, [r1, #20]
 80045a8:	2301      	movs	r3, #1
 80045aa:	425b      	negs	r3, r3
 80045ac:	81cb      	strh	r3, [r1, #14]
 80045ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80045b0:	ab21      	add	r3, sp, #132	; 0x84
 80045b2:	0028      	movs	r0, r5
 80045b4:	9301      	str	r3, [sp, #4]
 80045b6:	f000 f88f 	bl	80046d8 <_svfiprintf_r>
 80045ba:	1c43      	adds	r3, r0, #1
 80045bc:	da01      	bge.n	80045c2 <sniprintf+0x52>
 80045be:	238b      	movs	r3, #139	; 0x8b
 80045c0:	602b      	str	r3, [r5, #0]
 80045c2:	2c00      	cmp	r4, #0
 80045c4:	d0df      	beq.n	8004586 <sniprintf+0x16>
 80045c6:	2300      	movs	r3, #0
 80045c8:	9a02      	ldr	r2, [sp, #8]
 80045ca:	7013      	strb	r3, [r2, #0]
 80045cc:	e7db      	b.n	8004586 <sniprintf+0x16>
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	20000010 	.word	0x20000010

080045d4 <siprintf>:
 80045d4:	b40e      	push	{r1, r2, r3}
 80045d6:	b500      	push	{lr}
 80045d8:	490b      	ldr	r1, [pc, #44]	; (8004608 <siprintf+0x34>)
 80045da:	b09c      	sub	sp, #112	; 0x70
 80045dc:	ab1d      	add	r3, sp, #116	; 0x74
 80045de:	9002      	str	r0, [sp, #8]
 80045e0:	9006      	str	r0, [sp, #24]
 80045e2:	9107      	str	r1, [sp, #28]
 80045e4:	9104      	str	r1, [sp, #16]
 80045e6:	4809      	ldr	r0, [pc, #36]	; (800460c <siprintf+0x38>)
 80045e8:	4909      	ldr	r1, [pc, #36]	; (8004610 <siprintf+0x3c>)
 80045ea:	cb04      	ldmia	r3!, {r2}
 80045ec:	9105      	str	r1, [sp, #20]
 80045ee:	6800      	ldr	r0, [r0, #0]
 80045f0:	a902      	add	r1, sp, #8
 80045f2:	9301      	str	r3, [sp, #4]
 80045f4:	f000 f870 	bl	80046d8 <_svfiprintf_r>
 80045f8:	2300      	movs	r3, #0
 80045fa:	9a02      	ldr	r2, [sp, #8]
 80045fc:	7013      	strb	r3, [r2, #0]
 80045fe:	b01c      	add	sp, #112	; 0x70
 8004600:	bc08      	pop	{r3}
 8004602:	b003      	add	sp, #12
 8004604:	4718      	bx	r3
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	7fffffff 	.word	0x7fffffff
 800460c:	20000010 	.word	0x20000010
 8004610:	ffff0208 	.word	0xffff0208

08004614 <__ssputs_r>:
 8004614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004616:	688e      	ldr	r6, [r1, #8]
 8004618:	b085      	sub	sp, #20
 800461a:	0007      	movs	r7, r0
 800461c:	000c      	movs	r4, r1
 800461e:	9203      	str	r2, [sp, #12]
 8004620:	9301      	str	r3, [sp, #4]
 8004622:	429e      	cmp	r6, r3
 8004624:	d83c      	bhi.n	80046a0 <__ssputs_r+0x8c>
 8004626:	2390      	movs	r3, #144	; 0x90
 8004628:	898a      	ldrh	r2, [r1, #12]
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	421a      	tst	r2, r3
 800462e:	d034      	beq.n	800469a <__ssputs_r+0x86>
 8004630:	2503      	movs	r5, #3
 8004632:	6909      	ldr	r1, [r1, #16]
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	1a5b      	subs	r3, r3, r1
 8004638:	9302      	str	r3, [sp, #8]
 800463a:	6963      	ldr	r3, [r4, #20]
 800463c:	9802      	ldr	r0, [sp, #8]
 800463e:	435d      	muls	r5, r3
 8004640:	0feb      	lsrs	r3, r5, #31
 8004642:	195d      	adds	r5, r3, r5
 8004644:	9b01      	ldr	r3, [sp, #4]
 8004646:	106d      	asrs	r5, r5, #1
 8004648:	3301      	adds	r3, #1
 800464a:	181b      	adds	r3, r3, r0
 800464c:	42ab      	cmp	r3, r5
 800464e:	d900      	bls.n	8004652 <__ssputs_r+0x3e>
 8004650:	001d      	movs	r5, r3
 8004652:	0553      	lsls	r3, r2, #21
 8004654:	d532      	bpl.n	80046bc <__ssputs_r+0xa8>
 8004656:	0029      	movs	r1, r5
 8004658:	0038      	movs	r0, r7
 800465a:	f000 fb19 	bl	8004c90 <_malloc_r>
 800465e:	1e06      	subs	r6, r0, #0
 8004660:	d109      	bne.n	8004676 <__ssputs_r+0x62>
 8004662:	230c      	movs	r3, #12
 8004664:	603b      	str	r3, [r7, #0]
 8004666:	2340      	movs	r3, #64	; 0x40
 8004668:	2001      	movs	r0, #1
 800466a:	89a2      	ldrh	r2, [r4, #12]
 800466c:	4240      	negs	r0, r0
 800466e:	4313      	orrs	r3, r2
 8004670:	81a3      	strh	r3, [r4, #12]
 8004672:	b005      	add	sp, #20
 8004674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004676:	9a02      	ldr	r2, [sp, #8]
 8004678:	6921      	ldr	r1, [r4, #16]
 800467a:	f7ff ff67 	bl	800454c <memcpy>
 800467e:	89a3      	ldrh	r3, [r4, #12]
 8004680:	4a14      	ldr	r2, [pc, #80]	; (80046d4 <__ssputs_r+0xc0>)
 8004682:	401a      	ands	r2, r3
 8004684:	2380      	movs	r3, #128	; 0x80
 8004686:	4313      	orrs	r3, r2
 8004688:	81a3      	strh	r3, [r4, #12]
 800468a:	9b02      	ldr	r3, [sp, #8]
 800468c:	6126      	str	r6, [r4, #16]
 800468e:	18f6      	adds	r6, r6, r3
 8004690:	6026      	str	r6, [r4, #0]
 8004692:	6165      	str	r5, [r4, #20]
 8004694:	9e01      	ldr	r6, [sp, #4]
 8004696:	1aed      	subs	r5, r5, r3
 8004698:	60a5      	str	r5, [r4, #8]
 800469a:	9b01      	ldr	r3, [sp, #4]
 800469c:	429e      	cmp	r6, r3
 800469e:	d900      	bls.n	80046a2 <__ssputs_r+0x8e>
 80046a0:	9e01      	ldr	r6, [sp, #4]
 80046a2:	0032      	movs	r2, r6
 80046a4:	9903      	ldr	r1, [sp, #12]
 80046a6:	6820      	ldr	r0, [r4, #0]
 80046a8:	f000 fa95 	bl	8004bd6 <memmove>
 80046ac:	68a3      	ldr	r3, [r4, #8]
 80046ae:	2000      	movs	r0, #0
 80046b0:	1b9b      	subs	r3, r3, r6
 80046b2:	60a3      	str	r3, [r4, #8]
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	199e      	adds	r6, r3, r6
 80046b8:	6026      	str	r6, [r4, #0]
 80046ba:	e7da      	b.n	8004672 <__ssputs_r+0x5e>
 80046bc:	002a      	movs	r2, r5
 80046be:	0038      	movs	r0, r7
 80046c0:	f000 fb44 	bl	8004d4c <_realloc_r>
 80046c4:	1e06      	subs	r6, r0, #0
 80046c6:	d1e0      	bne.n	800468a <__ssputs_r+0x76>
 80046c8:	6921      	ldr	r1, [r4, #16]
 80046ca:	0038      	movs	r0, r7
 80046cc:	f000 fa96 	bl	8004bfc <_free_r>
 80046d0:	e7c7      	b.n	8004662 <__ssputs_r+0x4e>
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	fffffb7f 	.word	0xfffffb7f

080046d8 <_svfiprintf_r>:
 80046d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046da:	b0a1      	sub	sp, #132	; 0x84
 80046dc:	9003      	str	r0, [sp, #12]
 80046de:	001d      	movs	r5, r3
 80046e0:	898b      	ldrh	r3, [r1, #12]
 80046e2:	000f      	movs	r7, r1
 80046e4:	0016      	movs	r6, r2
 80046e6:	061b      	lsls	r3, r3, #24
 80046e8:	d511      	bpl.n	800470e <_svfiprintf_r+0x36>
 80046ea:	690b      	ldr	r3, [r1, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10e      	bne.n	800470e <_svfiprintf_r+0x36>
 80046f0:	2140      	movs	r1, #64	; 0x40
 80046f2:	f000 facd 	bl	8004c90 <_malloc_r>
 80046f6:	6038      	str	r0, [r7, #0]
 80046f8:	6138      	str	r0, [r7, #16]
 80046fa:	2800      	cmp	r0, #0
 80046fc:	d105      	bne.n	800470a <_svfiprintf_r+0x32>
 80046fe:	230c      	movs	r3, #12
 8004700:	9a03      	ldr	r2, [sp, #12]
 8004702:	3801      	subs	r0, #1
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	b021      	add	sp, #132	; 0x84
 8004708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800470a:	2340      	movs	r3, #64	; 0x40
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	2300      	movs	r3, #0
 8004710:	ac08      	add	r4, sp, #32
 8004712:	6163      	str	r3, [r4, #20]
 8004714:	3320      	adds	r3, #32
 8004716:	7663      	strb	r3, [r4, #25]
 8004718:	3310      	adds	r3, #16
 800471a:	76a3      	strb	r3, [r4, #26]
 800471c:	9507      	str	r5, [sp, #28]
 800471e:	0035      	movs	r5, r6
 8004720:	782b      	ldrb	r3, [r5, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <_svfiprintf_r+0x52>
 8004726:	2b25      	cmp	r3, #37	; 0x25
 8004728:	d146      	bne.n	80047b8 <_svfiprintf_r+0xe0>
 800472a:	1bab      	subs	r3, r5, r6
 800472c:	9305      	str	r3, [sp, #20]
 800472e:	d00c      	beq.n	800474a <_svfiprintf_r+0x72>
 8004730:	0032      	movs	r2, r6
 8004732:	0039      	movs	r1, r7
 8004734:	9803      	ldr	r0, [sp, #12]
 8004736:	f7ff ff6d 	bl	8004614 <__ssputs_r>
 800473a:	1c43      	adds	r3, r0, #1
 800473c:	d100      	bne.n	8004740 <_svfiprintf_r+0x68>
 800473e:	e0ae      	b.n	800489e <_svfiprintf_r+0x1c6>
 8004740:	6962      	ldr	r2, [r4, #20]
 8004742:	9b05      	ldr	r3, [sp, #20]
 8004744:	4694      	mov	ip, r2
 8004746:	4463      	add	r3, ip
 8004748:	6163      	str	r3, [r4, #20]
 800474a:	782b      	ldrb	r3, [r5, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d100      	bne.n	8004752 <_svfiprintf_r+0x7a>
 8004750:	e0a5      	b.n	800489e <_svfiprintf_r+0x1c6>
 8004752:	2201      	movs	r2, #1
 8004754:	2300      	movs	r3, #0
 8004756:	4252      	negs	r2, r2
 8004758:	6062      	str	r2, [r4, #4]
 800475a:	a904      	add	r1, sp, #16
 800475c:	3254      	adds	r2, #84	; 0x54
 800475e:	1852      	adds	r2, r2, r1
 8004760:	1c6e      	adds	r6, r5, #1
 8004762:	6023      	str	r3, [r4, #0]
 8004764:	60e3      	str	r3, [r4, #12]
 8004766:	60a3      	str	r3, [r4, #8]
 8004768:	7013      	strb	r3, [r2, #0]
 800476a:	65a3      	str	r3, [r4, #88]	; 0x58
 800476c:	7831      	ldrb	r1, [r6, #0]
 800476e:	2205      	movs	r2, #5
 8004770:	4853      	ldr	r0, [pc, #332]	; (80048c0 <_svfiprintf_r+0x1e8>)
 8004772:	f000 fa25 	bl	8004bc0 <memchr>
 8004776:	1c75      	adds	r5, r6, #1
 8004778:	2800      	cmp	r0, #0
 800477a:	d11f      	bne.n	80047bc <_svfiprintf_r+0xe4>
 800477c:	6822      	ldr	r2, [r4, #0]
 800477e:	06d3      	lsls	r3, r2, #27
 8004780:	d504      	bpl.n	800478c <_svfiprintf_r+0xb4>
 8004782:	2353      	movs	r3, #83	; 0x53
 8004784:	a904      	add	r1, sp, #16
 8004786:	185b      	adds	r3, r3, r1
 8004788:	2120      	movs	r1, #32
 800478a:	7019      	strb	r1, [r3, #0]
 800478c:	0713      	lsls	r3, r2, #28
 800478e:	d504      	bpl.n	800479a <_svfiprintf_r+0xc2>
 8004790:	2353      	movs	r3, #83	; 0x53
 8004792:	a904      	add	r1, sp, #16
 8004794:	185b      	adds	r3, r3, r1
 8004796:	212b      	movs	r1, #43	; 0x2b
 8004798:	7019      	strb	r1, [r3, #0]
 800479a:	7833      	ldrb	r3, [r6, #0]
 800479c:	2b2a      	cmp	r3, #42	; 0x2a
 800479e:	d016      	beq.n	80047ce <_svfiprintf_r+0xf6>
 80047a0:	0035      	movs	r5, r6
 80047a2:	2100      	movs	r1, #0
 80047a4:	200a      	movs	r0, #10
 80047a6:	68e3      	ldr	r3, [r4, #12]
 80047a8:	782a      	ldrb	r2, [r5, #0]
 80047aa:	1c6e      	adds	r6, r5, #1
 80047ac:	3a30      	subs	r2, #48	; 0x30
 80047ae:	2a09      	cmp	r2, #9
 80047b0:	d94e      	bls.n	8004850 <_svfiprintf_r+0x178>
 80047b2:	2900      	cmp	r1, #0
 80047b4:	d018      	beq.n	80047e8 <_svfiprintf_r+0x110>
 80047b6:	e010      	b.n	80047da <_svfiprintf_r+0x102>
 80047b8:	3501      	adds	r5, #1
 80047ba:	e7b1      	b.n	8004720 <_svfiprintf_r+0x48>
 80047bc:	4b40      	ldr	r3, [pc, #256]	; (80048c0 <_svfiprintf_r+0x1e8>)
 80047be:	6822      	ldr	r2, [r4, #0]
 80047c0:	1ac0      	subs	r0, r0, r3
 80047c2:	2301      	movs	r3, #1
 80047c4:	4083      	lsls	r3, r0
 80047c6:	4313      	orrs	r3, r2
 80047c8:	6023      	str	r3, [r4, #0]
 80047ca:	002e      	movs	r6, r5
 80047cc:	e7ce      	b.n	800476c <_svfiprintf_r+0x94>
 80047ce:	9b07      	ldr	r3, [sp, #28]
 80047d0:	1d19      	adds	r1, r3, #4
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	9107      	str	r1, [sp, #28]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	db01      	blt.n	80047de <_svfiprintf_r+0x106>
 80047da:	930b      	str	r3, [sp, #44]	; 0x2c
 80047dc:	e004      	b.n	80047e8 <_svfiprintf_r+0x110>
 80047de:	425b      	negs	r3, r3
 80047e0:	60e3      	str	r3, [r4, #12]
 80047e2:	2302      	movs	r3, #2
 80047e4:	4313      	orrs	r3, r2
 80047e6:	6023      	str	r3, [r4, #0]
 80047e8:	782b      	ldrb	r3, [r5, #0]
 80047ea:	2b2e      	cmp	r3, #46	; 0x2e
 80047ec:	d10a      	bne.n	8004804 <_svfiprintf_r+0x12c>
 80047ee:	786b      	ldrb	r3, [r5, #1]
 80047f0:	2b2a      	cmp	r3, #42	; 0x2a
 80047f2:	d135      	bne.n	8004860 <_svfiprintf_r+0x188>
 80047f4:	9b07      	ldr	r3, [sp, #28]
 80047f6:	3502      	adds	r5, #2
 80047f8:	1d1a      	adds	r2, r3, #4
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	9207      	str	r2, [sp, #28]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	db2b      	blt.n	800485a <_svfiprintf_r+0x182>
 8004802:	9309      	str	r3, [sp, #36]	; 0x24
 8004804:	4e2f      	ldr	r6, [pc, #188]	; (80048c4 <_svfiprintf_r+0x1ec>)
 8004806:	7829      	ldrb	r1, [r5, #0]
 8004808:	2203      	movs	r2, #3
 800480a:	0030      	movs	r0, r6
 800480c:	f000 f9d8 	bl	8004bc0 <memchr>
 8004810:	2800      	cmp	r0, #0
 8004812:	d006      	beq.n	8004822 <_svfiprintf_r+0x14a>
 8004814:	2340      	movs	r3, #64	; 0x40
 8004816:	1b80      	subs	r0, r0, r6
 8004818:	4083      	lsls	r3, r0
 800481a:	6822      	ldr	r2, [r4, #0]
 800481c:	3501      	adds	r5, #1
 800481e:	4313      	orrs	r3, r2
 8004820:	6023      	str	r3, [r4, #0]
 8004822:	7829      	ldrb	r1, [r5, #0]
 8004824:	2206      	movs	r2, #6
 8004826:	4828      	ldr	r0, [pc, #160]	; (80048c8 <_svfiprintf_r+0x1f0>)
 8004828:	1c6e      	adds	r6, r5, #1
 800482a:	7621      	strb	r1, [r4, #24]
 800482c:	f000 f9c8 	bl	8004bc0 <memchr>
 8004830:	2800      	cmp	r0, #0
 8004832:	d03c      	beq.n	80048ae <_svfiprintf_r+0x1d6>
 8004834:	4b25      	ldr	r3, [pc, #148]	; (80048cc <_svfiprintf_r+0x1f4>)
 8004836:	2b00      	cmp	r3, #0
 8004838:	d125      	bne.n	8004886 <_svfiprintf_r+0x1ae>
 800483a:	2207      	movs	r2, #7
 800483c:	9b07      	ldr	r3, [sp, #28]
 800483e:	3307      	adds	r3, #7
 8004840:	4393      	bics	r3, r2
 8004842:	3308      	adds	r3, #8
 8004844:	9307      	str	r3, [sp, #28]
 8004846:	6963      	ldr	r3, [r4, #20]
 8004848:	9a04      	ldr	r2, [sp, #16]
 800484a:	189b      	adds	r3, r3, r2
 800484c:	6163      	str	r3, [r4, #20]
 800484e:	e766      	b.n	800471e <_svfiprintf_r+0x46>
 8004850:	4343      	muls	r3, r0
 8004852:	2101      	movs	r1, #1
 8004854:	189b      	adds	r3, r3, r2
 8004856:	0035      	movs	r5, r6
 8004858:	e7a6      	b.n	80047a8 <_svfiprintf_r+0xd0>
 800485a:	2301      	movs	r3, #1
 800485c:	425b      	negs	r3, r3
 800485e:	e7d0      	b.n	8004802 <_svfiprintf_r+0x12a>
 8004860:	2300      	movs	r3, #0
 8004862:	200a      	movs	r0, #10
 8004864:	001a      	movs	r2, r3
 8004866:	3501      	adds	r5, #1
 8004868:	6063      	str	r3, [r4, #4]
 800486a:	7829      	ldrb	r1, [r5, #0]
 800486c:	1c6e      	adds	r6, r5, #1
 800486e:	3930      	subs	r1, #48	; 0x30
 8004870:	2909      	cmp	r1, #9
 8004872:	d903      	bls.n	800487c <_svfiprintf_r+0x1a4>
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0c5      	beq.n	8004804 <_svfiprintf_r+0x12c>
 8004878:	9209      	str	r2, [sp, #36]	; 0x24
 800487a:	e7c3      	b.n	8004804 <_svfiprintf_r+0x12c>
 800487c:	4342      	muls	r2, r0
 800487e:	2301      	movs	r3, #1
 8004880:	1852      	adds	r2, r2, r1
 8004882:	0035      	movs	r5, r6
 8004884:	e7f1      	b.n	800486a <_svfiprintf_r+0x192>
 8004886:	ab07      	add	r3, sp, #28
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	003a      	movs	r2, r7
 800488c:	4b10      	ldr	r3, [pc, #64]	; (80048d0 <_svfiprintf_r+0x1f8>)
 800488e:	0021      	movs	r1, r4
 8004890:	9803      	ldr	r0, [sp, #12]
 8004892:	e000      	b.n	8004896 <_svfiprintf_r+0x1be>
 8004894:	bf00      	nop
 8004896:	9004      	str	r0, [sp, #16]
 8004898:	9b04      	ldr	r3, [sp, #16]
 800489a:	3301      	adds	r3, #1
 800489c:	d1d3      	bne.n	8004846 <_svfiprintf_r+0x16e>
 800489e:	89bb      	ldrh	r3, [r7, #12]
 80048a0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80048a2:	065b      	lsls	r3, r3, #25
 80048a4:	d400      	bmi.n	80048a8 <_svfiprintf_r+0x1d0>
 80048a6:	e72e      	b.n	8004706 <_svfiprintf_r+0x2e>
 80048a8:	2001      	movs	r0, #1
 80048aa:	4240      	negs	r0, r0
 80048ac:	e72b      	b.n	8004706 <_svfiprintf_r+0x2e>
 80048ae:	ab07      	add	r3, sp, #28
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	003a      	movs	r2, r7
 80048b4:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <_svfiprintf_r+0x1f8>)
 80048b6:	0021      	movs	r1, r4
 80048b8:	9803      	ldr	r0, [sp, #12]
 80048ba:	f000 f879 	bl	80049b0 <_printf_i>
 80048be:	e7ea      	b.n	8004896 <_svfiprintf_r+0x1be>
 80048c0:	08005110 	.word	0x08005110
 80048c4:	08005116 	.word	0x08005116
 80048c8:	0800511a 	.word	0x0800511a
 80048cc:	00000000 	.word	0x00000000
 80048d0:	08004615 	.word	0x08004615

080048d4 <_printf_common>:
 80048d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048d6:	0015      	movs	r5, r2
 80048d8:	9301      	str	r3, [sp, #4]
 80048da:	688a      	ldr	r2, [r1, #8]
 80048dc:	690b      	ldr	r3, [r1, #16]
 80048de:	9000      	str	r0, [sp, #0]
 80048e0:	000c      	movs	r4, r1
 80048e2:	4293      	cmp	r3, r2
 80048e4:	da00      	bge.n	80048e8 <_printf_common+0x14>
 80048e6:	0013      	movs	r3, r2
 80048e8:	0022      	movs	r2, r4
 80048ea:	602b      	str	r3, [r5, #0]
 80048ec:	3243      	adds	r2, #67	; 0x43
 80048ee:	7812      	ldrb	r2, [r2, #0]
 80048f0:	2a00      	cmp	r2, #0
 80048f2:	d001      	beq.n	80048f8 <_printf_common+0x24>
 80048f4:	3301      	adds	r3, #1
 80048f6:	602b      	str	r3, [r5, #0]
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	069b      	lsls	r3, r3, #26
 80048fc:	d502      	bpl.n	8004904 <_printf_common+0x30>
 80048fe:	682b      	ldr	r3, [r5, #0]
 8004900:	3302      	adds	r3, #2
 8004902:	602b      	str	r3, [r5, #0]
 8004904:	2706      	movs	r7, #6
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	401f      	ands	r7, r3
 800490a:	d027      	beq.n	800495c <_printf_common+0x88>
 800490c:	0023      	movs	r3, r4
 800490e:	3343      	adds	r3, #67	; 0x43
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	1e5a      	subs	r2, r3, #1
 8004914:	4193      	sbcs	r3, r2
 8004916:	6822      	ldr	r2, [r4, #0]
 8004918:	0692      	lsls	r2, r2, #26
 800491a:	d430      	bmi.n	800497e <_printf_common+0xaa>
 800491c:	0022      	movs	r2, r4
 800491e:	9901      	ldr	r1, [sp, #4]
 8004920:	3243      	adds	r2, #67	; 0x43
 8004922:	9800      	ldr	r0, [sp, #0]
 8004924:	9e08      	ldr	r6, [sp, #32]
 8004926:	47b0      	blx	r6
 8004928:	1c43      	adds	r3, r0, #1
 800492a:	d025      	beq.n	8004978 <_printf_common+0xa4>
 800492c:	2306      	movs	r3, #6
 800492e:	6820      	ldr	r0, [r4, #0]
 8004930:	682a      	ldr	r2, [r5, #0]
 8004932:	68e1      	ldr	r1, [r4, #12]
 8004934:	4003      	ands	r3, r0
 8004936:	2500      	movs	r5, #0
 8004938:	2b04      	cmp	r3, #4
 800493a:	d103      	bne.n	8004944 <_printf_common+0x70>
 800493c:	1a8d      	subs	r5, r1, r2
 800493e:	43eb      	mvns	r3, r5
 8004940:	17db      	asrs	r3, r3, #31
 8004942:	401d      	ands	r5, r3
 8004944:	68a3      	ldr	r3, [r4, #8]
 8004946:	6922      	ldr	r2, [r4, #16]
 8004948:	4293      	cmp	r3, r2
 800494a:	dd01      	ble.n	8004950 <_printf_common+0x7c>
 800494c:	1a9b      	subs	r3, r3, r2
 800494e:	18ed      	adds	r5, r5, r3
 8004950:	2700      	movs	r7, #0
 8004952:	42bd      	cmp	r5, r7
 8004954:	d120      	bne.n	8004998 <_printf_common+0xc4>
 8004956:	2000      	movs	r0, #0
 8004958:	e010      	b.n	800497c <_printf_common+0xa8>
 800495a:	3701      	adds	r7, #1
 800495c:	68e3      	ldr	r3, [r4, #12]
 800495e:	682a      	ldr	r2, [r5, #0]
 8004960:	1a9b      	subs	r3, r3, r2
 8004962:	42bb      	cmp	r3, r7
 8004964:	ddd2      	ble.n	800490c <_printf_common+0x38>
 8004966:	0022      	movs	r2, r4
 8004968:	2301      	movs	r3, #1
 800496a:	3219      	adds	r2, #25
 800496c:	9901      	ldr	r1, [sp, #4]
 800496e:	9800      	ldr	r0, [sp, #0]
 8004970:	9e08      	ldr	r6, [sp, #32]
 8004972:	47b0      	blx	r6
 8004974:	1c43      	adds	r3, r0, #1
 8004976:	d1f0      	bne.n	800495a <_printf_common+0x86>
 8004978:	2001      	movs	r0, #1
 800497a:	4240      	negs	r0, r0
 800497c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800497e:	2030      	movs	r0, #48	; 0x30
 8004980:	18e1      	adds	r1, r4, r3
 8004982:	3143      	adds	r1, #67	; 0x43
 8004984:	7008      	strb	r0, [r1, #0]
 8004986:	0021      	movs	r1, r4
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	3145      	adds	r1, #69	; 0x45
 800498c:	7809      	ldrb	r1, [r1, #0]
 800498e:	18a2      	adds	r2, r4, r2
 8004990:	3243      	adds	r2, #67	; 0x43
 8004992:	3302      	adds	r3, #2
 8004994:	7011      	strb	r1, [r2, #0]
 8004996:	e7c1      	b.n	800491c <_printf_common+0x48>
 8004998:	0022      	movs	r2, r4
 800499a:	2301      	movs	r3, #1
 800499c:	321a      	adds	r2, #26
 800499e:	9901      	ldr	r1, [sp, #4]
 80049a0:	9800      	ldr	r0, [sp, #0]
 80049a2:	9e08      	ldr	r6, [sp, #32]
 80049a4:	47b0      	blx	r6
 80049a6:	1c43      	adds	r3, r0, #1
 80049a8:	d0e6      	beq.n	8004978 <_printf_common+0xa4>
 80049aa:	3701      	adds	r7, #1
 80049ac:	e7d1      	b.n	8004952 <_printf_common+0x7e>
	...

080049b0 <_printf_i>:
 80049b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049b2:	b089      	sub	sp, #36	; 0x24
 80049b4:	9204      	str	r2, [sp, #16]
 80049b6:	000a      	movs	r2, r1
 80049b8:	3243      	adds	r2, #67	; 0x43
 80049ba:	9305      	str	r3, [sp, #20]
 80049bc:	9003      	str	r0, [sp, #12]
 80049be:	9202      	str	r2, [sp, #8]
 80049c0:	7e0a      	ldrb	r2, [r1, #24]
 80049c2:	000c      	movs	r4, r1
 80049c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049c6:	2a6e      	cmp	r2, #110	; 0x6e
 80049c8:	d100      	bne.n	80049cc <_printf_i+0x1c>
 80049ca:	e086      	b.n	8004ada <_printf_i+0x12a>
 80049cc:	d81f      	bhi.n	8004a0e <_printf_i+0x5e>
 80049ce:	2a63      	cmp	r2, #99	; 0x63
 80049d0:	d033      	beq.n	8004a3a <_printf_i+0x8a>
 80049d2:	d808      	bhi.n	80049e6 <_printf_i+0x36>
 80049d4:	2a00      	cmp	r2, #0
 80049d6:	d100      	bne.n	80049da <_printf_i+0x2a>
 80049d8:	e08c      	b.n	8004af4 <_printf_i+0x144>
 80049da:	2a58      	cmp	r2, #88	; 0x58
 80049dc:	d04d      	beq.n	8004a7a <_printf_i+0xca>
 80049de:	0025      	movs	r5, r4
 80049e0:	3542      	adds	r5, #66	; 0x42
 80049e2:	702a      	strb	r2, [r5, #0]
 80049e4:	e030      	b.n	8004a48 <_printf_i+0x98>
 80049e6:	2a64      	cmp	r2, #100	; 0x64
 80049e8:	d001      	beq.n	80049ee <_printf_i+0x3e>
 80049ea:	2a69      	cmp	r2, #105	; 0x69
 80049ec:	d1f7      	bne.n	80049de <_printf_i+0x2e>
 80049ee:	6819      	ldr	r1, [r3, #0]
 80049f0:	6825      	ldr	r5, [r4, #0]
 80049f2:	1d0a      	adds	r2, r1, #4
 80049f4:	0628      	lsls	r0, r5, #24
 80049f6:	d529      	bpl.n	8004a4c <_printf_i+0x9c>
 80049f8:	6808      	ldr	r0, [r1, #0]
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	2800      	cmp	r0, #0
 80049fe:	da03      	bge.n	8004a08 <_printf_i+0x58>
 8004a00:	232d      	movs	r3, #45	; 0x2d
 8004a02:	9a02      	ldr	r2, [sp, #8]
 8004a04:	4240      	negs	r0, r0
 8004a06:	7013      	strb	r3, [r2, #0]
 8004a08:	4e6b      	ldr	r6, [pc, #428]	; (8004bb8 <_printf_i+0x208>)
 8004a0a:	270a      	movs	r7, #10
 8004a0c:	e04f      	b.n	8004aae <_printf_i+0xfe>
 8004a0e:	2a73      	cmp	r2, #115	; 0x73
 8004a10:	d074      	beq.n	8004afc <_printf_i+0x14c>
 8004a12:	d808      	bhi.n	8004a26 <_printf_i+0x76>
 8004a14:	2a6f      	cmp	r2, #111	; 0x6f
 8004a16:	d01f      	beq.n	8004a58 <_printf_i+0xa8>
 8004a18:	2a70      	cmp	r2, #112	; 0x70
 8004a1a:	d1e0      	bne.n	80049de <_printf_i+0x2e>
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	6809      	ldr	r1, [r1, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	6022      	str	r2, [r4, #0]
 8004a24:	e003      	b.n	8004a2e <_printf_i+0x7e>
 8004a26:	2a75      	cmp	r2, #117	; 0x75
 8004a28:	d016      	beq.n	8004a58 <_printf_i+0xa8>
 8004a2a:	2a78      	cmp	r2, #120	; 0x78
 8004a2c:	d1d7      	bne.n	80049de <_printf_i+0x2e>
 8004a2e:	0022      	movs	r2, r4
 8004a30:	2178      	movs	r1, #120	; 0x78
 8004a32:	3245      	adds	r2, #69	; 0x45
 8004a34:	7011      	strb	r1, [r2, #0]
 8004a36:	4e61      	ldr	r6, [pc, #388]	; (8004bbc <_printf_i+0x20c>)
 8004a38:	e022      	b.n	8004a80 <_printf_i+0xd0>
 8004a3a:	0025      	movs	r5, r4
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	3542      	adds	r5, #66	; 0x42
 8004a40:	1d11      	adds	r1, r2, #4
 8004a42:	6019      	str	r1, [r3, #0]
 8004a44:	6813      	ldr	r3, [r2, #0]
 8004a46:	702b      	strb	r3, [r5, #0]
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e065      	b.n	8004b18 <_printf_i+0x168>
 8004a4c:	6808      	ldr	r0, [r1, #0]
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	0669      	lsls	r1, r5, #25
 8004a52:	d5d3      	bpl.n	80049fc <_printf_i+0x4c>
 8004a54:	b200      	sxth	r0, r0
 8004a56:	e7d1      	b.n	80049fc <_printf_i+0x4c>
 8004a58:	6819      	ldr	r1, [r3, #0]
 8004a5a:	6825      	ldr	r5, [r4, #0]
 8004a5c:	1d08      	adds	r0, r1, #4
 8004a5e:	6018      	str	r0, [r3, #0]
 8004a60:	6808      	ldr	r0, [r1, #0]
 8004a62:	062e      	lsls	r6, r5, #24
 8004a64:	d505      	bpl.n	8004a72 <_printf_i+0xc2>
 8004a66:	4e54      	ldr	r6, [pc, #336]	; (8004bb8 <_printf_i+0x208>)
 8004a68:	2708      	movs	r7, #8
 8004a6a:	2a6f      	cmp	r2, #111	; 0x6f
 8004a6c:	d01b      	beq.n	8004aa6 <_printf_i+0xf6>
 8004a6e:	270a      	movs	r7, #10
 8004a70:	e019      	b.n	8004aa6 <_printf_i+0xf6>
 8004a72:	066d      	lsls	r5, r5, #25
 8004a74:	d5f7      	bpl.n	8004a66 <_printf_i+0xb6>
 8004a76:	b280      	uxth	r0, r0
 8004a78:	e7f5      	b.n	8004a66 <_printf_i+0xb6>
 8004a7a:	3145      	adds	r1, #69	; 0x45
 8004a7c:	4e4e      	ldr	r6, [pc, #312]	; (8004bb8 <_printf_i+0x208>)
 8004a7e:	700a      	strb	r2, [r1, #0]
 8004a80:	6818      	ldr	r0, [r3, #0]
 8004a82:	6822      	ldr	r2, [r4, #0]
 8004a84:	1d01      	adds	r1, r0, #4
 8004a86:	6800      	ldr	r0, [r0, #0]
 8004a88:	6019      	str	r1, [r3, #0]
 8004a8a:	0615      	lsls	r5, r2, #24
 8004a8c:	d521      	bpl.n	8004ad2 <_printf_i+0x122>
 8004a8e:	07d3      	lsls	r3, r2, #31
 8004a90:	d502      	bpl.n	8004a98 <_printf_i+0xe8>
 8004a92:	2320      	movs	r3, #32
 8004a94:	431a      	orrs	r2, r3
 8004a96:	6022      	str	r2, [r4, #0]
 8004a98:	2710      	movs	r7, #16
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	d103      	bne.n	8004aa6 <_printf_i+0xf6>
 8004a9e:	2320      	movs	r3, #32
 8004aa0:	6822      	ldr	r2, [r4, #0]
 8004aa2:	439a      	bics	r2, r3
 8004aa4:	6022      	str	r2, [r4, #0]
 8004aa6:	0023      	movs	r3, r4
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	3343      	adds	r3, #67	; 0x43
 8004aac:	701a      	strb	r2, [r3, #0]
 8004aae:	6863      	ldr	r3, [r4, #4]
 8004ab0:	60a3      	str	r3, [r4, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	db58      	blt.n	8004b68 <_printf_i+0x1b8>
 8004ab6:	2204      	movs	r2, #4
 8004ab8:	6821      	ldr	r1, [r4, #0]
 8004aba:	4391      	bics	r1, r2
 8004abc:	6021      	str	r1, [r4, #0]
 8004abe:	2800      	cmp	r0, #0
 8004ac0:	d154      	bne.n	8004b6c <_printf_i+0x1bc>
 8004ac2:	9d02      	ldr	r5, [sp, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d05a      	beq.n	8004b7e <_printf_i+0x1ce>
 8004ac8:	0025      	movs	r5, r4
 8004aca:	7833      	ldrb	r3, [r6, #0]
 8004acc:	3542      	adds	r5, #66	; 0x42
 8004ace:	702b      	strb	r3, [r5, #0]
 8004ad0:	e055      	b.n	8004b7e <_printf_i+0x1ce>
 8004ad2:	0655      	lsls	r5, r2, #25
 8004ad4:	d5db      	bpl.n	8004a8e <_printf_i+0xde>
 8004ad6:	b280      	uxth	r0, r0
 8004ad8:	e7d9      	b.n	8004a8e <_printf_i+0xde>
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	680d      	ldr	r5, [r1, #0]
 8004ade:	1d10      	adds	r0, r2, #4
 8004ae0:	6949      	ldr	r1, [r1, #20]
 8004ae2:	6018      	str	r0, [r3, #0]
 8004ae4:	6813      	ldr	r3, [r2, #0]
 8004ae6:	062e      	lsls	r6, r5, #24
 8004ae8:	d501      	bpl.n	8004aee <_printf_i+0x13e>
 8004aea:	6019      	str	r1, [r3, #0]
 8004aec:	e002      	b.n	8004af4 <_printf_i+0x144>
 8004aee:	066d      	lsls	r5, r5, #25
 8004af0:	d5fb      	bpl.n	8004aea <_printf_i+0x13a>
 8004af2:	8019      	strh	r1, [r3, #0]
 8004af4:	2300      	movs	r3, #0
 8004af6:	9d02      	ldr	r5, [sp, #8]
 8004af8:	6123      	str	r3, [r4, #16]
 8004afa:	e04f      	b.n	8004b9c <_printf_i+0x1ec>
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	1d11      	adds	r1, r2, #4
 8004b00:	6019      	str	r1, [r3, #0]
 8004b02:	6815      	ldr	r5, [r2, #0]
 8004b04:	2100      	movs	r1, #0
 8004b06:	6862      	ldr	r2, [r4, #4]
 8004b08:	0028      	movs	r0, r5
 8004b0a:	f000 f859 	bl	8004bc0 <memchr>
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	d001      	beq.n	8004b16 <_printf_i+0x166>
 8004b12:	1b40      	subs	r0, r0, r5
 8004b14:	6060      	str	r0, [r4, #4]
 8004b16:	6863      	ldr	r3, [r4, #4]
 8004b18:	6123      	str	r3, [r4, #16]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	9a02      	ldr	r2, [sp, #8]
 8004b1e:	7013      	strb	r3, [r2, #0]
 8004b20:	e03c      	b.n	8004b9c <_printf_i+0x1ec>
 8004b22:	6923      	ldr	r3, [r4, #16]
 8004b24:	002a      	movs	r2, r5
 8004b26:	9904      	ldr	r1, [sp, #16]
 8004b28:	9803      	ldr	r0, [sp, #12]
 8004b2a:	9d05      	ldr	r5, [sp, #20]
 8004b2c:	47a8      	blx	r5
 8004b2e:	1c43      	adds	r3, r0, #1
 8004b30:	d03e      	beq.n	8004bb0 <_printf_i+0x200>
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	079b      	lsls	r3, r3, #30
 8004b36:	d415      	bmi.n	8004b64 <_printf_i+0x1b4>
 8004b38:	9b07      	ldr	r3, [sp, #28]
 8004b3a:	68e0      	ldr	r0, [r4, #12]
 8004b3c:	4298      	cmp	r0, r3
 8004b3e:	da39      	bge.n	8004bb4 <_printf_i+0x204>
 8004b40:	0018      	movs	r0, r3
 8004b42:	e037      	b.n	8004bb4 <_printf_i+0x204>
 8004b44:	0022      	movs	r2, r4
 8004b46:	2301      	movs	r3, #1
 8004b48:	3219      	adds	r2, #25
 8004b4a:	9904      	ldr	r1, [sp, #16]
 8004b4c:	9803      	ldr	r0, [sp, #12]
 8004b4e:	9e05      	ldr	r6, [sp, #20]
 8004b50:	47b0      	blx	r6
 8004b52:	1c43      	adds	r3, r0, #1
 8004b54:	d02c      	beq.n	8004bb0 <_printf_i+0x200>
 8004b56:	3501      	adds	r5, #1
 8004b58:	68e3      	ldr	r3, [r4, #12]
 8004b5a:	9a07      	ldr	r2, [sp, #28]
 8004b5c:	1a9b      	subs	r3, r3, r2
 8004b5e:	42ab      	cmp	r3, r5
 8004b60:	dcf0      	bgt.n	8004b44 <_printf_i+0x194>
 8004b62:	e7e9      	b.n	8004b38 <_printf_i+0x188>
 8004b64:	2500      	movs	r5, #0
 8004b66:	e7f7      	b.n	8004b58 <_printf_i+0x1a8>
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	d0ad      	beq.n	8004ac8 <_printf_i+0x118>
 8004b6c:	9d02      	ldr	r5, [sp, #8]
 8004b6e:	0039      	movs	r1, r7
 8004b70:	f7fb fb58 	bl	8000224 <__aeabi_uidivmod>
 8004b74:	5c73      	ldrb	r3, [r6, r1]
 8004b76:	3d01      	subs	r5, #1
 8004b78:	702b      	strb	r3, [r5, #0]
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	d1f7      	bne.n	8004b6e <_printf_i+0x1be>
 8004b7e:	2f08      	cmp	r7, #8
 8004b80:	d109      	bne.n	8004b96 <_printf_i+0x1e6>
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	07db      	lsls	r3, r3, #31
 8004b86:	d506      	bpl.n	8004b96 <_printf_i+0x1e6>
 8004b88:	6863      	ldr	r3, [r4, #4]
 8004b8a:	6922      	ldr	r2, [r4, #16]
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	dc02      	bgt.n	8004b96 <_printf_i+0x1e6>
 8004b90:	2330      	movs	r3, #48	; 0x30
 8004b92:	3d01      	subs	r5, #1
 8004b94:	702b      	strb	r3, [r5, #0]
 8004b96:	9b02      	ldr	r3, [sp, #8]
 8004b98:	1b5b      	subs	r3, r3, r5
 8004b9a:	6123      	str	r3, [r4, #16]
 8004b9c:	9b05      	ldr	r3, [sp, #20]
 8004b9e:	aa07      	add	r2, sp, #28
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	0021      	movs	r1, r4
 8004ba4:	9b04      	ldr	r3, [sp, #16]
 8004ba6:	9803      	ldr	r0, [sp, #12]
 8004ba8:	f7ff fe94 	bl	80048d4 <_printf_common>
 8004bac:	1c43      	adds	r3, r0, #1
 8004bae:	d1b8      	bne.n	8004b22 <_printf_i+0x172>
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	4240      	negs	r0, r0
 8004bb4:	b009      	add	sp, #36	; 0x24
 8004bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bb8:	08005121 	.word	0x08005121
 8004bbc:	08005132 	.word	0x08005132

08004bc0 <memchr>:
 8004bc0:	b2c9      	uxtb	r1, r1
 8004bc2:	1882      	adds	r2, r0, r2
 8004bc4:	4290      	cmp	r0, r2
 8004bc6:	d101      	bne.n	8004bcc <memchr+0xc>
 8004bc8:	2000      	movs	r0, #0
 8004bca:	4770      	bx	lr
 8004bcc:	7803      	ldrb	r3, [r0, #0]
 8004bce:	428b      	cmp	r3, r1
 8004bd0:	d0fb      	beq.n	8004bca <memchr+0xa>
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	e7f6      	b.n	8004bc4 <memchr+0x4>

08004bd6 <memmove>:
 8004bd6:	b510      	push	{r4, lr}
 8004bd8:	4288      	cmp	r0, r1
 8004bda:	d902      	bls.n	8004be2 <memmove+0xc>
 8004bdc:	188b      	adds	r3, r1, r2
 8004bde:	4298      	cmp	r0, r3
 8004be0:	d303      	bcc.n	8004bea <memmove+0x14>
 8004be2:	2300      	movs	r3, #0
 8004be4:	e007      	b.n	8004bf6 <memmove+0x20>
 8004be6:	5c8b      	ldrb	r3, [r1, r2]
 8004be8:	5483      	strb	r3, [r0, r2]
 8004bea:	3a01      	subs	r2, #1
 8004bec:	d2fb      	bcs.n	8004be6 <memmove+0x10>
 8004bee:	bd10      	pop	{r4, pc}
 8004bf0:	5ccc      	ldrb	r4, [r1, r3]
 8004bf2:	54c4      	strb	r4, [r0, r3]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d1fa      	bne.n	8004bf0 <memmove+0x1a>
 8004bfa:	e7f8      	b.n	8004bee <memmove+0x18>

08004bfc <_free_r>:
 8004bfc:	b570      	push	{r4, r5, r6, lr}
 8004bfe:	0005      	movs	r5, r0
 8004c00:	2900      	cmp	r1, #0
 8004c02:	d010      	beq.n	8004c26 <_free_r+0x2a>
 8004c04:	1f0c      	subs	r4, r1, #4
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	da00      	bge.n	8004c0e <_free_r+0x12>
 8004c0c:	18e4      	adds	r4, r4, r3
 8004c0e:	0028      	movs	r0, r5
 8004c10:	f000 f8d4 	bl	8004dbc <__malloc_lock>
 8004c14:	4a1d      	ldr	r2, [pc, #116]	; (8004c8c <_free_r+0x90>)
 8004c16:	6813      	ldr	r3, [r2, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d105      	bne.n	8004c28 <_free_r+0x2c>
 8004c1c:	6063      	str	r3, [r4, #4]
 8004c1e:	6014      	str	r4, [r2, #0]
 8004c20:	0028      	movs	r0, r5
 8004c22:	f000 f8cc 	bl	8004dbe <__malloc_unlock>
 8004c26:	bd70      	pop	{r4, r5, r6, pc}
 8004c28:	42a3      	cmp	r3, r4
 8004c2a:	d909      	bls.n	8004c40 <_free_r+0x44>
 8004c2c:	6821      	ldr	r1, [r4, #0]
 8004c2e:	1860      	adds	r0, r4, r1
 8004c30:	4283      	cmp	r3, r0
 8004c32:	d1f3      	bne.n	8004c1c <_free_r+0x20>
 8004c34:	6818      	ldr	r0, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	1841      	adds	r1, r0, r1
 8004c3a:	6021      	str	r1, [r4, #0]
 8004c3c:	e7ee      	b.n	8004c1c <_free_r+0x20>
 8004c3e:	0013      	movs	r3, r2
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	2a00      	cmp	r2, #0
 8004c44:	d001      	beq.n	8004c4a <_free_r+0x4e>
 8004c46:	42a2      	cmp	r2, r4
 8004c48:	d9f9      	bls.n	8004c3e <_free_r+0x42>
 8004c4a:	6819      	ldr	r1, [r3, #0]
 8004c4c:	1858      	adds	r0, r3, r1
 8004c4e:	42a0      	cmp	r0, r4
 8004c50:	d10b      	bne.n	8004c6a <_free_r+0x6e>
 8004c52:	6820      	ldr	r0, [r4, #0]
 8004c54:	1809      	adds	r1, r1, r0
 8004c56:	1858      	adds	r0, r3, r1
 8004c58:	6019      	str	r1, [r3, #0]
 8004c5a:	4282      	cmp	r2, r0
 8004c5c:	d1e0      	bne.n	8004c20 <_free_r+0x24>
 8004c5e:	6810      	ldr	r0, [r2, #0]
 8004c60:	6852      	ldr	r2, [r2, #4]
 8004c62:	1841      	adds	r1, r0, r1
 8004c64:	6019      	str	r1, [r3, #0]
 8004c66:	605a      	str	r2, [r3, #4]
 8004c68:	e7da      	b.n	8004c20 <_free_r+0x24>
 8004c6a:	42a0      	cmp	r0, r4
 8004c6c:	d902      	bls.n	8004c74 <_free_r+0x78>
 8004c6e:	230c      	movs	r3, #12
 8004c70:	602b      	str	r3, [r5, #0]
 8004c72:	e7d5      	b.n	8004c20 <_free_r+0x24>
 8004c74:	6821      	ldr	r1, [r4, #0]
 8004c76:	1860      	adds	r0, r4, r1
 8004c78:	4282      	cmp	r2, r0
 8004c7a:	d103      	bne.n	8004c84 <_free_r+0x88>
 8004c7c:	6810      	ldr	r0, [r2, #0]
 8004c7e:	6852      	ldr	r2, [r2, #4]
 8004c80:	1841      	adds	r1, r0, r1
 8004c82:	6021      	str	r1, [r4, #0]
 8004c84:	6062      	str	r2, [r4, #4]
 8004c86:	605c      	str	r4, [r3, #4]
 8004c88:	e7ca      	b.n	8004c20 <_free_r+0x24>
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	200000e0 	.word	0x200000e0

08004c90 <_malloc_r>:
 8004c90:	2303      	movs	r3, #3
 8004c92:	b570      	push	{r4, r5, r6, lr}
 8004c94:	1ccd      	adds	r5, r1, #3
 8004c96:	439d      	bics	r5, r3
 8004c98:	3508      	adds	r5, #8
 8004c9a:	0006      	movs	r6, r0
 8004c9c:	2d0c      	cmp	r5, #12
 8004c9e:	d21e      	bcs.n	8004cde <_malloc_r+0x4e>
 8004ca0:	250c      	movs	r5, #12
 8004ca2:	42a9      	cmp	r1, r5
 8004ca4:	d81d      	bhi.n	8004ce2 <_malloc_r+0x52>
 8004ca6:	0030      	movs	r0, r6
 8004ca8:	f000 f888 	bl	8004dbc <__malloc_lock>
 8004cac:	4a25      	ldr	r2, [pc, #148]	; (8004d44 <_malloc_r+0xb4>)
 8004cae:	6814      	ldr	r4, [r2, #0]
 8004cb0:	0021      	movs	r1, r4
 8004cb2:	2900      	cmp	r1, #0
 8004cb4:	d119      	bne.n	8004cea <_malloc_r+0x5a>
 8004cb6:	4c24      	ldr	r4, [pc, #144]	; (8004d48 <_malloc_r+0xb8>)
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d103      	bne.n	8004cc6 <_malloc_r+0x36>
 8004cbe:	0030      	movs	r0, r6
 8004cc0:	f000 f86a 	bl	8004d98 <_sbrk_r>
 8004cc4:	6020      	str	r0, [r4, #0]
 8004cc6:	0029      	movs	r1, r5
 8004cc8:	0030      	movs	r0, r6
 8004cca:	f000 f865 	bl	8004d98 <_sbrk_r>
 8004cce:	1c43      	adds	r3, r0, #1
 8004cd0:	d12b      	bne.n	8004d2a <_malloc_r+0x9a>
 8004cd2:	230c      	movs	r3, #12
 8004cd4:	0030      	movs	r0, r6
 8004cd6:	6033      	str	r3, [r6, #0]
 8004cd8:	f000 f871 	bl	8004dbe <__malloc_unlock>
 8004cdc:	e003      	b.n	8004ce6 <_malloc_r+0x56>
 8004cde:	2d00      	cmp	r5, #0
 8004ce0:	dadf      	bge.n	8004ca2 <_malloc_r+0x12>
 8004ce2:	230c      	movs	r3, #12
 8004ce4:	6033      	str	r3, [r6, #0]
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	bd70      	pop	{r4, r5, r6, pc}
 8004cea:	680b      	ldr	r3, [r1, #0]
 8004cec:	1b5b      	subs	r3, r3, r5
 8004cee:	d419      	bmi.n	8004d24 <_malloc_r+0x94>
 8004cf0:	2b0b      	cmp	r3, #11
 8004cf2:	d903      	bls.n	8004cfc <_malloc_r+0x6c>
 8004cf4:	600b      	str	r3, [r1, #0]
 8004cf6:	18cc      	adds	r4, r1, r3
 8004cf8:	6025      	str	r5, [r4, #0]
 8004cfa:	e003      	b.n	8004d04 <_malloc_r+0x74>
 8004cfc:	684b      	ldr	r3, [r1, #4]
 8004cfe:	428c      	cmp	r4, r1
 8004d00:	d10d      	bne.n	8004d1e <_malloc_r+0x8e>
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	0030      	movs	r0, r6
 8004d06:	f000 f85a 	bl	8004dbe <__malloc_unlock>
 8004d0a:	0020      	movs	r0, r4
 8004d0c:	2207      	movs	r2, #7
 8004d0e:	300b      	adds	r0, #11
 8004d10:	1d23      	adds	r3, r4, #4
 8004d12:	4390      	bics	r0, r2
 8004d14:	1ac3      	subs	r3, r0, r3
 8004d16:	d0e7      	beq.n	8004ce8 <_malloc_r+0x58>
 8004d18:	425a      	negs	r2, r3
 8004d1a:	50e2      	str	r2, [r4, r3]
 8004d1c:	e7e4      	b.n	8004ce8 <_malloc_r+0x58>
 8004d1e:	6063      	str	r3, [r4, #4]
 8004d20:	000c      	movs	r4, r1
 8004d22:	e7ef      	b.n	8004d04 <_malloc_r+0x74>
 8004d24:	000c      	movs	r4, r1
 8004d26:	6849      	ldr	r1, [r1, #4]
 8004d28:	e7c3      	b.n	8004cb2 <_malloc_r+0x22>
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	1cc4      	adds	r4, r0, #3
 8004d2e:	439c      	bics	r4, r3
 8004d30:	42a0      	cmp	r0, r4
 8004d32:	d0e1      	beq.n	8004cf8 <_malloc_r+0x68>
 8004d34:	1a21      	subs	r1, r4, r0
 8004d36:	0030      	movs	r0, r6
 8004d38:	f000 f82e 	bl	8004d98 <_sbrk_r>
 8004d3c:	1c43      	adds	r3, r0, #1
 8004d3e:	d1db      	bne.n	8004cf8 <_malloc_r+0x68>
 8004d40:	e7c7      	b.n	8004cd2 <_malloc_r+0x42>
 8004d42:	46c0      	nop			; (mov r8, r8)
 8004d44:	200000e0 	.word	0x200000e0
 8004d48:	200000e4 	.word	0x200000e4

08004d4c <_realloc_r>:
 8004d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4e:	0007      	movs	r7, r0
 8004d50:	000d      	movs	r5, r1
 8004d52:	0016      	movs	r6, r2
 8004d54:	2900      	cmp	r1, #0
 8004d56:	d105      	bne.n	8004d64 <_realloc_r+0x18>
 8004d58:	0011      	movs	r1, r2
 8004d5a:	f7ff ff99 	bl	8004c90 <_malloc_r>
 8004d5e:	0004      	movs	r4, r0
 8004d60:	0020      	movs	r0, r4
 8004d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d64:	2a00      	cmp	r2, #0
 8004d66:	d103      	bne.n	8004d70 <_realloc_r+0x24>
 8004d68:	f7ff ff48 	bl	8004bfc <_free_r>
 8004d6c:	0034      	movs	r4, r6
 8004d6e:	e7f7      	b.n	8004d60 <_realloc_r+0x14>
 8004d70:	f000 f826 	bl	8004dc0 <_malloc_usable_size_r>
 8004d74:	002c      	movs	r4, r5
 8004d76:	42b0      	cmp	r0, r6
 8004d78:	d2f2      	bcs.n	8004d60 <_realloc_r+0x14>
 8004d7a:	0031      	movs	r1, r6
 8004d7c:	0038      	movs	r0, r7
 8004d7e:	f7ff ff87 	bl	8004c90 <_malloc_r>
 8004d82:	1e04      	subs	r4, r0, #0
 8004d84:	d0ec      	beq.n	8004d60 <_realloc_r+0x14>
 8004d86:	0029      	movs	r1, r5
 8004d88:	0032      	movs	r2, r6
 8004d8a:	f7ff fbdf 	bl	800454c <memcpy>
 8004d8e:	0029      	movs	r1, r5
 8004d90:	0038      	movs	r0, r7
 8004d92:	f7ff ff33 	bl	8004bfc <_free_r>
 8004d96:	e7e3      	b.n	8004d60 <_realloc_r+0x14>

08004d98 <_sbrk_r>:
 8004d98:	2300      	movs	r3, #0
 8004d9a:	b570      	push	{r4, r5, r6, lr}
 8004d9c:	4c06      	ldr	r4, [pc, #24]	; (8004db8 <_sbrk_r+0x20>)
 8004d9e:	0005      	movs	r5, r0
 8004da0:	0008      	movs	r0, r1
 8004da2:	6023      	str	r3, [r4, #0]
 8004da4:	f7ff fa16 	bl	80041d4 <_sbrk>
 8004da8:	1c43      	adds	r3, r0, #1
 8004daa:	d103      	bne.n	8004db4 <_sbrk_r+0x1c>
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d000      	beq.n	8004db4 <_sbrk_r+0x1c>
 8004db2:	602b      	str	r3, [r5, #0]
 8004db4:	bd70      	pop	{r4, r5, r6, pc}
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	20000488 	.word	0x20000488

08004dbc <__malloc_lock>:
 8004dbc:	4770      	bx	lr

08004dbe <__malloc_unlock>:
 8004dbe:	4770      	bx	lr

08004dc0 <_malloc_usable_size_r>:
 8004dc0:	1f0b      	subs	r3, r1, #4
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	1f18      	subs	r0, r3, #4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	da01      	bge.n	8004dce <_malloc_usable_size_r+0xe>
 8004dca:	580b      	ldr	r3, [r1, r0]
 8004dcc:	18c0      	adds	r0, r0, r3
 8004dce:	4770      	bx	lr

08004dd0 <_init>:
 8004dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd6:	bc08      	pop	{r3}
 8004dd8:	469e      	mov	lr, r3
 8004dda:	4770      	bx	lr

08004ddc <_fini>:
 8004ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dde:	46c0      	nop			; (mov r8, r8)
 8004de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004de2:	bc08      	pop	{r3}
 8004de4:	469e      	mov	lr, r3
 8004de6:	4770      	bx	lr
